{"ast":null,"code":"import _slicedToArray from\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";var Oauth2=function Oauth2(){var _require=require(\"twitter-api-sdk\"),Client=_require.Client,auth=_require.auth;var CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;var CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;var CLIENT_ID=process.env.REACT_APP_CLIENT_ID;var CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;var ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;var ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;var CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;var BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;var authClient=new auth.OAuth2User({client_id:CLIENT_ID,client_secret:CLIENT_SECRET,callback:\"http://localhost:3000/login/oauth2/code/twitter\",scopes:[\"tweet.read\",\"users.read\",\"tweet.write\"]});var client=new Client(authClient);var STATE=\"my-state\";//Get authorization\nvar authUrl=authClient.generateAuthURL({state:STATE,code_challenge:\"challenge\"});// const TWITTER_STATE = \"twitter-increaser-state\";\nvar TWITTER_STATE=\"state\";var TWITTER_CODE_CHALLENGE=\"challenge\";var TWITTER_AUTH_URL=\"https://twitter.com/i/oauth2/authorize\";var TWITTER_SCOPE=[\"tweet.read\",\"users.read\"].join(\" \");// const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\nuseEffect(function(){console.log(authUrl);//   const getURLWithQueryParams = (\n//   baseUrl: string,\n//   params: Record<string, any>\n// ) => {\n//   const query = Object.entries(params)\n//     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n//     .join(\"&\")\n//   return `${baseUrl}?${query}`\n// }\n// const getTwitterOAuthUrl = (redirectUri: string) =>\n// getURLWithQueryParams(TWITTER_AUTH_URL, {\n//   response_type: \"code\",\n//   client_id: CLIENT_ID,\n//   redirect_uri: redirectUri,\n//   scope: TWITTER_SCOPE,\n//   state: TWITTER_STATE,\n//   code_challenge: TWITTER_CODE_CHALLENGE,\n//   code_challenge_method: \"plain\",\n// })\n//   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\n//   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\n},[]);// const authHandler = (err:any, data:any) => {\n//   console.log(err, data);\n// };\n// const [user, setUser] = useState<any>([]);\n// useEffect(() => {\n// \taxios\n// \t\t.get(\"/oauth2\")\n// \t\t.then((res) => {\n// \t\t\tsetUser(res.data);\n// \t\t\tconsole.log(res.data);\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err.config);\n// \t\t\tconsole.log(err.response.data);\n// \t\t});\n// }, []);\n// const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\n// const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\n// Consuming a Stream\n// if(BEARER_TOKEN){\n//   const client = new Client(BEARER_TOKEN);\n//   async function OauthTwitter() {\n//     const stream = client.tweets.sampleStream({\n//       \"tweet.fields\": [\"author_id\"],\n//     });\n//     for await (const tweet of stream) {\n//       console.log(tweet.data?.author_id);\n//     }\n//     return(null);\n//   }\n//   return(<div><OauthTwitter/></div>)\n// }\n// Getting a Tweet\n// if(BEARER_TOKEN){\n//   const client = new Client(BEARER_TOKEN);\n//   async function GettingATweet() {\n//     const tweet = await client.tweets.findTweetById(\"20\");\n//     // console.log(tweet.data.text);\n//     console.log(tweet);\n//   }\n//     return(null);\n// }\n// oauth2-bearer.ts \n// if(BEARER_TOKEN){\n//   async function Oauth2Bearer() {\n//     const client = new Client(BEARER_TOKEN);\n//     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n//     if (!data) throw new Error(\"Couldn't find user\");\n//     let count = 0;\n//     for await (const followers of client.users.usersIdFollowers(data.id)) {\n//       console.log(followers);\n//       if (++count === 3) {\n//         break;\n//       }\n//     }\n//     return (<div></div>);\n//   }\n// }\n// if(BEARER_TOKEN){\n//     const client = new Client(BEARER_TOKEN);\n//     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n//     if (!data) throw new Error(\"Couldn't find user\");\n//     let count = 0;\n//     for await (const followers of client.users.usersIdFollowers(data.id)) {\n//       console.log(followers);\n//       if (++count === 3) {\n//         break;\n//       }\n//     }\n//     return (<div></div>);\n// }\n// const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\n// const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\n// function TestOauth(){\n//   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\n//     authCallback={authHandler}\n//     consumerKey={CONSUMER_KEY}\n//     consumerSecret={CONSUMER_SECRET}\n//   />)}\n//   else{\n//     return(<div></div>)\n//   }\n// }\n// return (<p>1<GettingATweet/></p>)\n// const authHandler = (err:any, data:any) => {\n//   console.log(err, data);\n// };\nfunction BtnToTwitterLogin(){function handleClick(e){var getURLWithQueryParams=function getURLWithQueryParams(baseUrl,params){var query=Object.entries(params).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return\"\".concat(key,\"=\").concat(encodeURIComponent(value));}).join(\"&\");return\"\".concat(baseUrl,\"?\").concat(query);};var getTwitterOAuthUrl=function getTwitterOAuthUrl(redirectUri){return getURLWithQueryParams(TWITTER_AUTH_URL,{response_type:\"code\",client_id:CLIENT_ID,redirect_uri:redirectUri,scope:TWITTER_SCOPE,state:TWITTER_STATE,code_challenge:TWITTER_CODE_CHALLENGE,code_challenge_method:\"plain\"});};// window.location.href=getTwitterOAuthUrl(\"http://localhost:3000/login/oauth2/code/twitter\");\nwindow.location.href=authUrl;}return/*#__PURE__*/_jsx(\"button\",{onClick:handleClick});}return/*#__PURE__*/ (// <TestOauth/>\n// <TwitterLogin\n//       authCallback={authHandler}\n//       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\n//       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\n//       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\n//       buttonTheme={\"dark\"}\n//     \t/>\n_jsx(BtnToTwitterLogin,{}));};export default Oauth2;","map":{"version":3,"names":["React","useEffect","Oauth2","require","Client","auth","CONSUMER_KEY","process","env","REACT_APP_CONSUMER_KEY","CONSUMER_SECRET","REACT_APP_CONSUMER_SECRET","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","ACCESS_TOKEN","REACT_APP_ACCESS_TOKEN","ACCESS_TOKEN_SECRET","REACT_APP_ACCESS_TOKEN_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","BEARER_TOKEN","REACT_APP_BEARER_TOKEN","authClient","OAuth2User","client_id","client_secret","callback","scopes","client","STATE","authUrl","generateAuthURL","state","code_challenge","TWITTER_STATE","TWITTER_CODE_CHALLENGE","TWITTER_AUTH_URL","TWITTER_SCOPE","join","console","log","BtnToTwitterLogin","handleClick","e","getURLWithQueryParams","baseUrl","params","query","Object","entries","map","key","value","encodeURIComponent","getTwitterOAuthUrl","redirectUri","response_type","redirect_uri","scope","code_challenge_method","window","location","href"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/auth/Oauth2.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\nimport { Client } from \"twitter-api-sdk\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\nimport { createHmac } from \"crypto\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Oauth2=()=>{\r\n  const { Client, auth } = require(\"twitter-api-sdk\");\r\n  \r\n  const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;\r\n\tconst ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  const authClient = new auth.OAuth2User({\r\n    client_id: CLIENT_ID,\r\n    client_secret: CLIENT_SECRET,\r\n    callback: \"http://localhost:3000/login/oauth2/code/twitter\",\r\n    scopes: [\"tweet.read\", \"users.read\", \"tweet.write\"],\r\n  });\r\n\r\n  const client = new Client(authClient);\r\n  const STATE = \"my-state\";\r\n\r\n  //Get authorization\r\n  const authUrl = authClient.generateAuthURL({\r\n    state: STATE,\r\n    code_challenge: \"challenge\",\r\n  });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const TWITTER_STATE = \"twitter-increaser-state\";\r\n  const TWITTER_STATE = \"state\";\r\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\r\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\r\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\"].join(\" \");\r\n  // const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\r\n\r\n  \r\n  useEffect(() => {\r\n  console.log(authUrl);\r\n  \r\n  //   const getURLWithQueryParams = (\r\n  //   baseUrl: string,\r\n  //   params: Record<string, any>\r\n  // ) => {\r\n  //   const query = Object.entries(params)\r\n  //     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n  //     .join(\"&\")\r\n\r\n  //   return `${baseUrl}?${query}`\r\n  // }\r\n  // const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  // getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n  //   response_type: \"code\",\r\n  //   client_id: CLIENT_ID,\r\n  //   redirect_uri: redirectUri,\r\n  //   scope: TWITTER_SCOPE,\r\n  //   state: TWITTER_STATE,\r\n  //   code_challenge: TWITTER_CODE_CHALLENGE,\r\n  //   code_challenge_method: \"plain\",\r\n  // })\r\n  //   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\r\n  //   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\r\n    \r\n\t}, []);\r\n  \r\n  \r\n  \r\n  \r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n  // const [user, setUser] = useState<any>([]);\r\n  \r\n  // useEffect(() => {\r\n\t// \taxios\r\n\t// \t\t.get(\"/oauth2\")\r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tsetUser(res.data);\r\n\t// \t\t\tconsole.log(res.data);\r\n\t// \t\t})\r\n\t// \t\t.catch((err) => {\r\n\t// \t\t\tconsole.log(err.config);\r\n\t// \t\t\tconsole.log(err.response.data);\r\n\t// \t\t});\r\n\t// }, []);\r\n\r\n\r\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\r\n\r\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  // Consuming a Stream\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function OauthTwitter() {\r\n  //     const stream = client.tweets.sampleStream({\r\n  //       \"tweet.fields\": [\"author_id\"],\r\n  //     });\r\n  //     for await (const tweet of stream) {\r\n  //       console.log(tweet.data?.author_id);\r\n  //     }\r\n      \r\n  //     return(null);\r\n  //   }\r\n  //   return(<div><OauthTwitter/></div>)\r\n  // }\r\n\r\n\r\n  // Getting a Tweet\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function GettingATweet() {\r\n  //     const tweet = await client.tweets.findTweetById(\"20\");\r\n  //     // console.log(tweet.data.text);\r\n  //     console.log(tweet);\r\n  //   }\r\n      \r\n  //     return(null);\r\n  // }\r\n\r\n\r\n  // oauth2-bearer.ts \r\n  // if(BEARER_TOKEN){\r\n  //   async function Oauth2Bearer() {\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  //   }\r\n  // }\r\n\r\n  // if(BEARER_TOKEN){\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  // }\r\n\r\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  // function TestOauth(){\r\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\r\n  //     authCallback={authHandler}\r\n  //     consumerKey={CONSUMER_KEY}\r\n  //     consumerSecret={CONSUMER_SECRET}\r\n  //   />)}\r\n  //   else{\r\n  //     return(<div></div>)\r\n  //   }\r\n  // }\r\n  // return (<p>1<GettingATweet/></p>)\r\n\r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n\r\n  function BtnToTwitterLogin(){\r\n\t\tfunction handleClick(e: any){\r\n\tconst getURLWithQueryParams = (\r\n    baseUrl: string,\r\n    params: Record<string, any>\r\n  ) => {\r\n    const query = Object.entries(params)\r\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n      .join(\"&\")\r\n\r\n    return `${baseUrl}?${query}`\r\n  }\r\n  const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n    response_type: \"code\",\r\n    client_id: CLIENT_ID,\r\n    redirect_uri: redirectUri,\r\n    scope: TWITTER_SCOPE,\r\n    state: TWITTER_STATE,\r\n    code_challenge: TWITTER_CODE_CHALLENGE,\r\n    code_challenge_method: \"plain\",\r\n  })\r\n\r\n  // window.location.href=getTwitterOAuthUrl(\"http://localhost:3000/login/oauth2/code/twitter\");\r\n  window.location.href=authUrl;\r\n    \r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<button onClick={handleClick}>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\r\n\r\n  return (\r\n    // <TestOauth/>\r\n    // <TwitterLogin\r\n    //       authCallback={authHandler}\r\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\r\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\r\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\r\n    //       buttonTheme={\"dark\"}\r\n    //     \t/>\r\n    <BtnToTwitterLogin/>\r\n  );\r\n}\r\n\r\nexport default Oauth2;"],"mappings":"iJACA,MAAOA,MAAK,EAAIC,SAAS,KAAkB,OAAO,CAAC,2CAOnD,GAAMC,OAAM,CAAC,QAAPA,OAAM,EAAK,CACf,aAAyBC,OAAO,CAAC,iBAAiB,CAAC,CAA3CC,MAAM,UAANA,MAAM,CAAEC,IAAI,UAAJA,IAAI,CAEpB,GAAMC,aAAY,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACrD,GAAMC,gBAAe,CAACH,OAAO,CAACC,GAAG,CAACG,yBAAyB,CAC3D,GAAMC,UAAS,CAACL,OAAO,CAACC,GAAG,CAACK,mBAAmB,CAChD,GAAMC,cAAa,CAACP,OAAO,CAACC,GAAG,CAACO,uBAAuB,CACvD,GAAMC,aAAY,CAACT,OAAO,CAACC,GAAG,CAACS,sBAAsB,CACrD,GAAMC,oBAAmB,CAACX,OAAO,CAACC,GAAG,CAACW,6BAA6B,CACnE,GAAMC,aAAY,CAACb,OAAO,CAACC,GAAG,CAACa,sBAAsB,CACrD,GAAMC,aAAY,CAACf,OAAO,CAACC,GAAG,CAACe,sBAAsB,CAEpD,GAAMC,WAAU,CAAG,GAAInB,KAAI,CAACoB,UAAU,CAAC,CACrCC,SAAS,CAAEd,SAAS,CACpBe,aAAa,CAAEb,aAAa,CAC5Bc,QAAQ,CAAE,iDAAiD,CAC3DC,MAAM,CAAE,CAAC,YAAY,CAAE,YAAY,CAAE,aAAa,CACpD,CAAC,CAAC,CAEF,GAAMC,OAAM,CAAG,GAAI1B,OAAM,CAACoB,UAAU,CAAC,CACrC,GAAMO,MAAK,CAAG,UAAU,CAExB;AACA,GAAMC,QAAO,CAAGR,UAAU,CAACS,eAAe,CAAC,CACzCC,KAAK,CAAEH,KAAK,CACZI,cAAc,CAAE,WAClB,CAAC,CAAC,CASF;AACA,GAAMC,cAAa,CAAG,OAAO,CAC7B,GAAMC,uBAAsB,CAAG,WAAW,CAC1C,GAAMC,iBAAgB,CAAG,wCAAwC,CACjE,GAAMC,cAAa,CAAG,CAAC,YAAY,CAAE,YAAY,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAC5D;AAGAvC,SAAS,CAAC,UAAM,CAChBwC,OAAO,CAACC,GAAG,CAACV,OAAO,CAAC,CAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,CAAC,CAAE,EAAE,CAAC,CAKL;AACA;AACA;AAEA;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA,QAASW,kBAAiB,EAAE,CAC5B,QAASC,YAAW,CAACC,CAAM,CAAC,CAC7B,GAAMC,sBAAqB,CAAG,QAAxBA,sBAAqB,CACxBC,OAAe,CACfC,MAA2B,CACxB,CACH,GAAMC,MAAK,CAAGC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CACjCI,GAAG,CAAC,gDAAEC,GAAG,UAAEC,KAAK,0BAASD,GAAG,aAAIE,kBAAkB,CAACD,KAAK,CAAC,GAAE,CAAC,CAC5Dd,IAAI,CAAC,GAAG,CAAC,CAEZ,gBAAUO,OAAO,aAAIE,KAAK,EAC5B,CAAC,CACD,GAAMO,mBAAkB,CAAG,QAArBA,mBAAkB,CAAIC,WAAmB,QAC/CX,sBAAqB,CAACR,gBAAgB,CAAE,CACtCoB,aAAa,CAAE,MAAM,CACrBhC,SAAS,CAAEd,SAAS,CACpB+C,YAAY,CAAEF,WAAW,CACzBG,KAAK,CAAErB,aAAa,CACpBL,KAAK,CAAEE,aAAa,CACpBD,cAAc,CAAEE,sBAAsB,CACtCwB,qBAAqB,CAAE,OACzB,CAAC,CAAC,GAEF;AACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAChC,OAAO,CAE5B,CACA,mBACC,eAAQ,OAAO,CAAEY,WAAY,EACpB,CAEX,CAGC,oBACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAC,iBAAiB,IAAE,EAExB,CAAC,CAED,cAAe1C,OAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}