{"ast":null,"code":"\"use strict\";\n\nvar _inherits = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _asyncGeneratorDelegate = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\nvar _asyncIterator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PreviousableTwitterPaginator = exports.TwitterPaginator = void 0;\n/** TwitterPaginator: able to get consume data from initial request, then fetch next data sequentially. */\nvar TwitterPaginator = /*#__PURE__*/function (_Symbol$iterator, _Symbol$asyncIterator) {\n  // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n  function TwitterPaginator(_ref) {\n    var realData = _ref.realData,\n      rateLimit = _ref.rateLimit,\n      instance = _ref.instance,\n      queryParams = _ref.queryParams,\n      sharedParams = _ref.sharedParams;\n    _classCallCheck(this, TwitterPaginator);\n    this._maxResultsWhenFetchLast = 100;\n    this._realData = realData;\n    this._rateLimit = rateLimit;\n    this._instance = instance;\n    this._queryParams = queryParams;\n    this._sharedParams = sharedParams;\n  }\n  _createClass(TwitterPaginator, [{\n    key: \"_isRateLimitOk\",\n    get: function get() {\n      if (!this._rateLimit) {\n        return true;\n      }\n      var resetDate = this._rateLimit.reset * 1000;\n      if (resetDate < Date.now()) {\n        return true;\n      }\n      return this._rateLimit.remaining > 0;\n    }\n  }, {\n    key: \"makeRequest\",\n    value: function makeRequest(queryParams) {\n      return this._instance.get(this.getEndpoint(), queryParams, {\n        fullResponse: true,\n        params: this._sharedParams\n      });\n    }\n  }, {\n    key: \"makeNewInstanceFromResult\",\n    value: function makeNewInstanceFromResult(result, queryParams) {\n      // Construct a subclass\n      return new this.constructor({\n        realData: result.data,\n        rateLimit: result.rateLimit,\n        instance: this._instance,\n        queryParams: queryParams,\n        sharedParams: this._sharedParams\n      });\n    }\n  }, {\n    key: \"getEndpoint\",\n    value: function getEndpoint() {\n      return this._endpoint;\n    }\n  }, {\n    key: \"injectQueryParams\",\n    value: function injectQueryParams(maxResults) {\n      return _objectSpread(_objectSpread({}, maxResults ? {\n        max_results: maxResults\n      } : {}), this._queryParams);\n    }\n    /* ---------------------- */\n    /* Real paginator methods */\n    /* ---------------------- */\n    /**\n     * Next page.\n     */\n  }, {\n    key: \"next\",\n    value: function () {\n      var _next = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                queryParams = this.getNextQueryParams(maxResults);\n                _context.next = 3;\n                return this.makeRequest(queryParams);\n              case 3:\n                result = _context.sent;\n                return _context.abrupt(\"return\", this.makeNewInstanceFromResult(result, queryParams));\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function next(_x) {\n        return _next.apply(this, arguments);\n      }\n      return next;\n    }()\n    /**\n     * Next page, but store it in current instance.\n     */\n  }, {\n    key: \"fetchNext\",\n    value: function () {\n      var _fetchNext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                queryParams = this.getNextQueryParams(maxResults);\n                _context2.next = 3;\n                return this.makeRequest(queryParams);\n              case 3:\n                result = _context2.sent;\n                _context2.next = 6;\n                return this.refreshInstanceFromResult(result, true);\n              case 6:\n                return _context2.abrupt(\"return\", this);\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function fetchNext(_x2) {\n        return _fetchNext.apply(this, arguments);\n      }\n      return fetchNext;\n    }()\n    /**\n     * Fetch up to {count} items after current page,\n     * as long as rate limit is not hit and Twitter has some results\n     */\n  }, {\n    key: \"fetchLast\",\n    value: function () {\n      var _fetchLast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var count,\n          queryParams,\n          resultCount,\n          response,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                count = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : Infinity;\n                queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n                resultCount = 0; // Break at rate limit limit\n              case 3:\n                if (!(resultCount < count && this._isRateLimitOk)) {\n                  _context3.next = 15;\n                  break;\n                }\n                _context3.next = 6;\n                return this.makeRequest(queryParams);\n              case 6:\n                response = _context3.sent;\n                _context3.next = 9;\n                return this.refreshInstanceFromResult(response, true);\n              case 9:\n                resultCount += this.getPageLengthFromRequest(response);\n                if (!this.isFetchLastOver(response)) {\n                  _context3.next = 12;\n                  break;\n                }\n                return _context3.abrupt(\"break\", 15);\n              case 12:\n                queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n                _context3.next = 3;\n                break;\n              case 15:\n                return _context3.abrupt(\"return\", this);\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function fetchLast() {\n        return _fetchLast.apply(this, arguments);\n      }\n      return fetchLast;\n    }()\n  }, {\n    key: \"rateLimit\",\n    get: function get() {\n      var _a;\n      return _objectSpread({}, (_a = this._rateLimit) !== null && _a !== void 0 ? _a : {});\n    }\n    /** Get raw data returned by Twitter API. */\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._realData;\n    }\n  }, {\n    key: \"done\",\n    get: function get() {\n      return !this.canFetchNextPage(this._realData);\n    }\n    /**\n     * Iterate over currently fetched items.\n     */\n  }, {\n    key: _Symbol$iterator,\n    value:\n    /*#__PURE__*/\n    _regeneratorRuntime().mark(function value() {\n      return _regeneratorRuntime().wrap(function value$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.delegateYield(this.getItemArray(), \"t0\", 1);\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, value, this);\n    })\n    /**\n     * Iterate over items \"undefinitely\" (until rate limit is hit / they're no more items available)\n     * This will **mutate the current instance** and fill data, metas, etc. inside this instance.\n     *\n     * If you need to handle concurrent requests, or you need to rely on immutability, please use `.fetchAndIterate()` instead.\n     */\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var paginator, canFetchNextPage, next, items;\n        return _regeneratorRuntime().wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(_this.getItemArray()), _awaitAsyncGenerator), \"t0\", 1);\n              case 1:\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                paginator = _this;\n                canFetchNextPage = _this.canFetchNextPage(_this._realData);\n              case 3:\n                if (!(canFetchNextPage && _this._isRateLimitOk && paginator.getItemArray().length > 0)) {\n                  _context5.next = 14;\n                  break;\n                }\n                _context5.next = 6;\n                return _awaitAsyncGenerator(paginator.next(_this._maxResultsWhenFetchLast));\n              case 6:\n                next = _context5.sent;\n                // Store data into current instance [needed to access includes and meta]\n                _this.refreshInstanceFromResult({\n                  data: next._realData,\n                  headers: {},\n                  rateLimit: next._rateLimit\n                }, true);\n                canFetchNextPage = _this.canFetchNextPage(next._realData);\n                items = next.getItemArray();\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(items), _awaitAsyncGenerator), \"t1\", 11);\n              case 11:\n                paginator = next;\n                _context5.next = 3;\n                break;\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    }\n    /**\n     * Iterate over items \"undefinitely\" without modifying the current instance (until rate limit is hit / they're no more items available)\n     *\n     * This will **NOT** mutate the current instance, meaning that current instance will not inherit from `includes` and `meta` (v2 API only).\n     * Use `Symbol.asyncIterator` (`for-await of`) to directly access items with current instance mutation.\n     */\n  }, {\n    key: \"fetchAndIterate\",\n    value: function fetchAndIterate() {\n      var _this2 = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var _iterator, _step, _item, paginator, canFetchNextPage, next, _iterator2, _step2, item;\n        return _regeneratorRuntime().wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(_this2.getItemArray());\n                _context6.prev = 1;\n                _iterator.s();\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context6.next = 9;\n                  break;\n                }\n                _item = _step.value;\n                _context6.next = 7;\n                return [_item, _this2];\n              case 7:\n                _context6.next = 3;\n                break;\n              case 9:\n                _context6.next = 14;\n                break;\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](1);\n                _iterator.e(_context6.t0);\n              case 14:\n                _context6.prev = 14;\n                _iterator.f();\n                return _context6.finish(14);\n              case 17:\n                // eslint-disable-next-line @typescript-eslint/no-this-alias\n                paginator = _this2;\n                canFetchNextPage = _this2.canFetchNextPage(_this2._realData);\n              case 19:\n                if (!(canFetchNextPage && _this2._isRateLimitOk && paginator.getItemArray().length > 0)) {\n                  _context6.next = 46;\n                  break;\n                }\n                _context6.next = 22;\n                return _awaitAsyncGenerator(paginator.next(_this2._maxResultsWhenFetchLast));\n              case 22:\n                next = _context6.sent;\n                // Store data into current instance [needed to access includes and meta]\n                _this2.refreshInstanceFromResult({\n                  data: next._realData,\n                  headers: {},\n                  rateLimit: next._rateLimit\n                }, true);\n                canFetchNextPage = _this2.canFetchNextPage(next._realData);\n                _iterator2 = _createForOfIteratorHelper(next.getItemArray());\n                _context6.prev = 26;\n                _iterator2.s();\n              case 28:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context6.next = 34;\n                  break;\n                }\n                item = _step2.value;\n                _context6.next = 32;\n                return [item, next];\n              case 32:\n                _context6.next = 28;\n                break;\n              case 34:\n                _context6.next = 39;\n                break;\n              case 36:\n                _context6.prev = 36;\n                _context6.t1 = _context6[\"catch\"](26);\n                _iterator2.e(_context6.t1);\n              case 39:\n                _context6.prev = 39;\n                _iterator2.f();\n                return _context6.finish(39);\n              case 42:\n                _this2._rateLimit = next._rateLimit;\n                paginator = next;\n                _context6.next = 19;\n                break;\n              case 46:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, null, [[1, 11, 14, 17], [26, 36, 39, 42]]);\n      }))();\n    }\n  }]);\n  return TwitterPaginator;\n}(Symbol.iterator, Symbol.asyncIterator);\nexports.TwitterPaginator = TwitterPaginator;\n/** PreviousableTwitterPaginator: a TwitterPaginator able to get consume data from both side, next and previous. */\nvar PreviousableTwitterPaginator = /*#__PURE__*/function (_TwitterPaginator) {\n  _inherits(PreviousableTwitterPaginator, _TwitterPaginator);\n  var _super = _createSuper(PreviousableTwitterPaginator);\n  function PreviousableTwitterPaginator() {\n    _classCallCheck(this, PreviousableTwitterPaginator);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PreviousableTwitterPaginator, [{\n    key: \"previous\",\n    value:\n    /**\n     * Previous page (new tweets)\n     */\n    function () {\n      var _previous = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                queryParams = this.getPreviousQueryParams(maxResults);\n                _context7.next = 3;\n                return this.makeRequest(queryParams);\n              case 3:\n                result = _context7.sent;\n                return _context7.abrupt(\"return\", this.makeNewInstanceFromResult(result, queryParams));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function previous(_x3) {\n        return _previous.apply(this, arguments);\n      }\n      return previous;\n    }()\n    /**\n     * Previous page, but in current instance.\n     */\n  }, {\n    key: \"fetchPrevious\",\n    value: function () {\n      var _fetchPrevious = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(maxResults) {\n        var queryParams, result;\n        return _regeneratorRuntime().wrap(function _callee7$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                queryParams = this.getPreviousQueryParams(maxResults);\n                _context8.next = 3;\n                return this.makeRequest(queryParams);\n              case 3:\n                result = _context8.sent;\n                _context8.next = 6;\n                return this.refreshInstanceFromResult(result, false);\n              case 6:\n                return _context8.abrupt(\"return\", this);\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function fetchPrevious(_x4) {\n        return _fetchPrevious.apply(this, arguments);\n      }\n      return fetchPrevious;\n    }()\n  }]);\n  return PreviousableTwitterPaginator;\n}(TwitterPaginator);\nexports.PreviousableTwitterPaginator = PreviousableTwitterPaginator;\nexports.default = TwitterPaginator;","map":{"version":3,"names":["Object","defineProperty","exports","value","PreviousableTwitterPaginator","TwitterPaginator","realData","rateLimit","instance","queryParams","sharedParams","_maxResultsWhenFetchLast","_realData","_rateLimit","_instance","_queryParams","_sharedParams","resetDate","reset","Date","now","remaining","get","getEndpoint","fullResponse","params","result","constructor","data","_endpoint","maxResults","max_results","getNextQueryParams","makeRequest","makeNewInstanceFromResult","refreshInstanceFromResult","count","Infinity","resultCount","_isRateLimitOk","response","getPageLengthFromRequest","isFetchLastOver","_a","canFetchNextPage","getItemArray","paginator","length","next","headers","items","item","Symbol","iterator","asyncIterator","getPreviousQueryParams","default"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/paginators/TwitterPaginator.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PreviousableTwitterPaginator = exports.TwitterPaginator = void 0;\n/** TwitterPaginator: able to get consume data from initial request, then fetch next data sequentially. */\nclass TwitterPaginator {\n    // noinspection TypeScriptAbstractClassConstructorCanBeMadeProtected\n    constructor({ realData, rateLimit, instance, queryParams, sharedParams }) {\n        this._maxResultsWhenFetchLast = 100;\n        this._realData = realData;\n        this._rateLimit = rateLimit;\n        this._instance = instance;\n        this._queryParams = queryParams;\n        this._sharedParams = sharedParams;\n    }\n    get _isRateLimitOk() {\n        if (!this._rateLimit) {\n            return true;\n        }\n        const resetDate = this._rateLimit.reset * 1000;\n        if (resetDate < Date.now()) {\n            return true;\n        }\n        return this._rateLimit.remaining > 0;\n    }\n    makeRequest(queryParams) {\n        return this._instance.get(this.getEndpoint(), queryParams, { fullResponse: true, params: this._sharedParams });\n    }\n    makeNewInstanceFromResult(result, queryParams) {\n        // Construct a subclass\n        return new this.constructor({\n            realData: result.data,\n            rateLimit: result.rateLimit,\n            instance: this._instance,\n            queryParams,\n            sharedParams: this._sharedParams,\n        });\n    }\n    getEndpoint() {\n        return this._endpoint;\n    }\n    injectQueryParams(maxResults) {\n        return {\n            ...(maxResults ? { max_results: maxResults } : {}),\n            ...this._queryParams,\n        };\n    }\n    /* ---------------------- */\n    /* Real paginator methods */\n    /* ---------------------- */\n    /**\n     * Next page.\n     */\n    async next(maxResults) {\n        const queryParams = this.getNextQueryParams(maxResults);\n        const result = await this.makeRequest(queryParams);\n        return this.makeNewInstanceFromResult(result, queryParams);\n    }\n    /**\n     * Next page, but store it in current instance.\n     */\n    async fetchNext(maxResults) {\n        const queryParams = this.getNextQueryParams(maxResults);\n        const result = await this.makeRequest(queryParams);\n        // Await in case of async sub-methods\n        await this.refreshInstanceFromResult(result, true);\n        return this;\n    }\n    /**\n     * Fetch up to {count} items after current page,\n     * as long as rate limit is not hit and Twitter has some results\n     */\n    async fetchLast(count = Infinity) {\n        let queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n        let resultCount = 0;\n        // Break at rate limit limit\n        while (resultCount < count && this._isRateLimitOk) {\n            const response = await this.makeRequest(queryParams);\n            await this.refreshInstanceFromResult(response, true);\n            resultCount += this.getPageLengthFromRequest(response);\n            if (this.isFetchLastOver(response)) {\n                break;\n            }\n            queryParams = this.getNextQueryParams(this._maxResultsWhenFetchLast);\n        }\n        return this;\n    }\n    get rateLimit() {\n        var _a;\n        return { ...(_a = this._rateLimit) !== null && _a !== void 0 ? _a : {} };\n    }\n    /** Get raw data returned by Twitter API. */\n    get data() {\n        return this._realData;\n    }\n    get done() {\n        return !this.canFetchNextPage(this._realData);\n    }\n    /**\n     * Iterate over currently fetched items.\n     */\n    *[Symbol.iterator]() {\n        yield* this.getItemArray();\n    }\n    /**\n     * Iterate over items \"undefinitely\" (until rate limit is hit / they're no more items available)\n     * This will **mutate the current instance** and fill data, metas, etc. inside this instance.\n     *\n     * If you need to handle concurrent requests, or you need to rely on immutability, please use `.fetchAndIterate()` instead.\n     */\n    async *[Symbol.asyncIterator]() {\n        yield* this.getItemArray();\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let paginator = this;\n        let canFetchNextPage = this.canFetchNextPage(this._realData);\n        while (canFetchNextPage && this._isRateLimitOk && paginator.getItemArray().length > 0) {\n            const next = await paginator.next(this._maxResultsWhenFetchLast);\n            // Store data into current instance [needed to access includes and meta]\n            this.refreshInstanceFromResult({ data: next._realData, headers: {}, rateLimit: next._rateLimit }, true);\n            canFetchNextPage = this.canFetchNextPage(next._realData);\n            const items = next.getItemArray();\n            yield* items;\n            paginator = next;\n        }\n    }\n    /**\n     * Iterate over items \"undefinitely\" without modifying the current instance (until rate limit is hit / they're no more items available)\n     *\n     * This will **NOT** mutate the current instance, meaning that current instance will not inherit from `includes` and `meta` (v2 API only).\n     * Use `Symbol.asyncIterator` (`for-await of`) to directly access items with current instance mutation.\n     */\n    async *fetchAndIterate() {\n        for (const item of this.getItemArray()) {\n            yield [item, this];\n        }\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let paginator = this;\n        let canFetchNextPage = this.canFetchNextPage(this._realData);\n        while (canFetchNextPage && this._isRateLimitOk && paginator.getItemArray().length > 0) {\n            const next = await paginator.next(this._maxResultsWhenFetchLast);\n            // Store data into current instance [needed to access includes and meta]\n            this.refreshInstanceFromResult({ data: next._realData, headers: {}, rateLimit: next._rateLimit }, true);\n            canFetchNextPage = this.canFetchNextPage(next._realData);\n            for (const item of next.getItemArray()) {\n                yield [item, next];\n            }\n            this._rateLimit = next._rateLimit;\n            paginator = next;\n        }\n    }\n}\nexports.TwitterPaginator = TwitterPaginator;\n/** PreviousableTwitterPaginator: a TwitterPaginator able to get consume data from both side, next and previous. */\nclass PreviousableTwitterPaginator extends TwitterPaginator {\n    /**\n     * Previous page (new tweets)\n     */\n    async previous(maxResults) {\n        const queryParams = this.getPreviousQueryParams(maxResults);\n        const result = await this.makeRequest(queryParams);\n        return this.makeNewInstanceFromResult(result, queryParams);\n    }\n    /**\n     * Previous page, but in current instance.\n     */\n    async fetchPrevious(maxResults) {\n        const queryParams = this.getPreviousQueryParams(maxResults);\n        const result = await this.makeRequest(queryParams);\n        await this.refreshInstanceFromResult(result, false);\n        return this;\n    }\n}\nexports.PreviousableTwitterPaginator = PreviousableTwitterPaginator;\nexports.default = TwitterPaginator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}