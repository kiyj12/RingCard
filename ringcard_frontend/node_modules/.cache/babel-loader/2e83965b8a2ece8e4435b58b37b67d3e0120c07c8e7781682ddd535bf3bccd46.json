{"ast":null,"code":"import _slicedToArray from\"C:/Users/yuleg/Dev/Ringca/ORIN33copy/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from\"axios\";import React,{useState,useEffect}from\"react\";// import { useHistory } from \"react-router-dom\";\nimport{useParams}from\"react-router-dom\";import AnswerFormQuestionNote from\"../../components/AnswerFormQuestionNote\";import Header from\"../../components/Header/Header\";import\"../../styles/layout/layout.css\";import\"../../styles/question-page.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function QuestionUnanswered(){// const history = useHistory();\n// useEffect(() => {\n//   const listenBackEvent = () => {\n//     // 뒤로가기 할 때 수행할 동작을 적는다\n//   };\n//   const unlistenHistoryEvent = history.listen(({ action }) => {\n//     if (action === \"POP\") {\n//       listenBackEvent();\n//     }\n//   });\n//   return unlistenHistoryEvent;\n// }, [\n// // effect에서 사용하는 state를 추가\n// ]);\nvar params=useParams();var paramsQuestionId=params.questionId;var _useState=useState(),_useState2=_slicedToArray(_useState,2),userName=_useState2[0],setUserName=_useState2[1];// const [questionList, setQuestionList] = useState<any[]>([]);\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),question=_useState4[0],setQuestion=_useState4[1];useEffect(function(){axios.get(\"/question/\"+paramsQuestionId+\"/unanswered/user\").then(function(res){console.log(res.data);// setQuestionList(res.data.questions);\nsetUserName(res.data.userName);setQuestion(res.data.question);}).catch(function(err){console.log(err);});},[paramsQuestionId]);return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{userName:userName}),/*#__PURE__*/_jsx(\"div\",{className:\"contents-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"questionPage-the-question-container\",children:/*#__PURE__*/_jsx(AnswerFormQuestionNote,{question:question})})})]});}export default QuestionUnanswered;","map":{"version":3,"names":["axios","React","useState","useEffect","useParams","AnswerFormQuestionNote","Header","QuestionUnanswered","params","paramsQuestionId","questionId","userName","setUserName","question","setQuestion","get","then","res","console","log","data","catch","err"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33copy/ringcard/ringcard_frontend/src/pages/question/QuestionUnanswered.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useState, useEffect, Component } from \"react\";\r\n// import { useHistory } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AnswerFormQuestionNote from \"../../components/AnswerFormQuestionNote\";\r\nimport Header from \"../../components/Header/Header\";\r\nimport QuestionList from \"../../components/QuestionNoteList\";\r\nimport \"../../styles/layout/layout.css\";\r\nimport \"../../styles/question-page.css\";\r\n\r\nfunction QuestionUnanswered() {\r\n\t// const history = useHistory();\r\n\t// useEffect(() => {\r\n\t//   const listenBackEvent = () => {\r\n\t//     // 뒤로가기 할 때 수행할 동작을 적는다\r\n\t//   };\r\n\r\n\t//   const unlistenHistoryEvent = history.listen(({ action }) => {\r\n\t//     if (action === \"POP\") {\r\n\t//       listenBackEvent();\r\n\t//     }\r\n\t//   });\r\n\r\n\t//   return unlistenHistoryEvent;\r\n\t// }, [\r\n\t// // effect에서 사용하는 state를 추가\r\n\t// ]);\r\n\r\n\tconst params = useParams();\r\n\tconst paramsQuestionId = params.questionId;\r\n\r\n\tconst [userName, setUserName] = useState<String>();\r\n\t// const [questionList, setQuestionList] = useState<any[]>([]);\r\n\tconst [question, setQuestion] = useState<any>([]);\r\n\r\n\tuseEffect(() => {\r\n\t\taxios\r\n\t\t\t.get(\"/question/\" + paramsQuestionId + \"/unanswered/user\")\r\n\t\t\t.then((res) => {\r\n\t\t\t\tconsole.log(res.data);\r\n\t\t\t\t// setQuestionList(res.data.questions);\r\n\t\t\t\tsetUserName(res.data.userName);\r\n\t\t\t\tsetQuestion(res.data.question);\r\n\t\t\t})\r\n\t\t\t.catch((err) => {\r\n\t\t\t\tconsole.log(err);\r\n\t\t\t});\r\n\t}, [paramsQuestionId]);\r\n\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<Header userName={userName} />\r\n\r\n\t\t\t<div className=\"contents-container\">\r\n\t\t\t\t<div className=\"questionPage-the-question-container\">\r\n\t\t\t\t\t<AnswerFormQuestionNote question={question} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{/* 퀘스쳔리스트 삭제^^ */}\r\n\t\t\t\t{/* <div className=\"QuestionPage-hr-box\">\r\n\t\t\t\t\t<hr className=\"QuestionPage-hr\" />\r\n\r\n\t\t\t\t\t<div className=\"QuestionPage-hr-text\">미응답 질문들</div>\r\n\t\t\t\t\t<hr className=\"QuestionPage-hr\" />\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"questionPage-container-body\">\r\n\t\t\t\t\t<div className=\"QuestionPage-down-background-img\">\r\n\t\t\t\t\t\t<QuestionList questionList={questionList} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div> */}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default QuestionUnanswered;\r\n"],"mappings":"qJAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,MAAOC,MAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAC7D;AACA,OAASC,SAAS,KAAQ,kBAAkB,CAC5C,MAAOC,uBAAsB,KAAM,yCAAyC,CAC5E,MAAOC,OAAM,KAAM,gCAAgC,CAEnD,MAAO,gCAAgC,CACvC,MAAO,gCAAgC,CAAC,wFAExC,QAASC,mBAAkB,EAAG,CAC7B;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA,GAAMC,OAAM,CAAGJ,SAAS,EAAE,CAC1B,GAAMK,iBAAgB,CAAGD,MAAM,CAACE,UAAU,CAE1C,cAAgCR,QAAQ,EAAU,wCAA3CS,QAAQ,eAAEC,WAAW,eAC5B;AACA,eAAgCV,QAAQ,CAAM,EAAE,CAAC,yCAA1CW,QAAQ,eAAEC,WAAW,eAE5BX,SAAS,CAAC,UAAM,CACfH,KAAK,CACHe,GAAG,CAAC,YAAY,CAAGN,gBAAgB,CAAG,kBAAkB,CAAC,CACzDO,IAAI,CAAC,SAACC,GAAG,CAAK,CACdC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,IAAI,CAAC,CACrB;AACAR,WAAW,CAACK,GAAG,CAACG,IAAI,CAACT,QAAQ,CAAC,CAC9BG,WAAW,CAACG,GAAG,CAACG,IAAI,CAACP,QAAQ,CAAC,CAC/B,CAAC,CAAC,CACDQ,KAAK,CAAC,SAACC,GAAG,CAAK,CACfJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC,CACjB,CAAC,CAAC,CACJ,CAAC,CAAE,CAACb,gBAAgB,CAAC,CAAC,CAEtB,mBACC,aAAK,SAAS,CAAC,WAAW,wBACzB,KAAC,MAAM,EAAC,QAAQ,CAAEE,QAAS,EAAG,cAE9B,YAAK,SAAS,CAAC,oBAAoB,uBAClC,YAAK,SAAS,CAAC,qCAAqC,uBACnD,KAAC,sBAAsB,EAAC,QAAQ,CAAEE,QAAS,EAAG,EACzC,EAaD,GACD,CAER,CAEA,cAAeN,mBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}