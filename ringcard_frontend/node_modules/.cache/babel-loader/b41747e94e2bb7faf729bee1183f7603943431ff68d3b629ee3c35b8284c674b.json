{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_read_1.default(this);\n  }\n  async search(queryOrOptions) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n    const realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n    const queryParams = {\n      ...realOptions,\n      query\n    };\n    const initialRq = await this.get('tweets/search/recent', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchRecentV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   *\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n   */\n  async searchAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      ...options,\n      query\n    };\n    const initialRq = await this.get('tweets/search/all', queryParams, {\n      fullResponse: true\n    });\n    return new paginators_1.TweetSearchAllV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a variety of information about a single Tweet specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/:id', options, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about tweets specified by list of IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n  tweets(tweetIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets', {\n      ids: tweetIds,\n      ...options\n    });\n  }\n  /**\n   * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n   * OAuth2 Bearer auth only.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n   */\n  tweetCountRecent(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/recent', {\n      query,\n      ...options\n    });\n  }\n  /**\n   * This endpoint is only available to those users who have been approved for the Academic Research product track.\n   * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n   * since the first Tweet was created March 26, 2006.\n   * OAuth2 Bearer auth only.\n   * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n   */\n  tweetCountAll(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('tweets/counts/all', {\n      query,\n      ...options\n    });\n  }\n  async tweetRetweetedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const initialRq = await this.get('tweets/:id/retweeted_by', parameters, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n    if (!asPaginator) {\n      return initialRq.data;\n    }\n    return new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n  async tweetLikedBy(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const initialRq = await this.get('tweets/:id/liking_users', parameters, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n    if (!asPaginator) {\n      return initialRq.data;\n    }\n    return new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n   * This endpoint returns up to the last 3200 Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n   *\n   * OAuth 2 scopes: `tweet.read` `users.read`\n   */\n  async homeTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const meUser = await this.getCurrentUserV2Object();\n    const initialRq = await this.get('users/:id/timelines/reverse_chronological', options, {\n      fullResponse: true,\n      params: {\n        id: meUser.data.id\n      }\n    });\n    return new paginators_1.TweetHomeTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: meUser.data.id\n      }\n    });\n  }\n  /**\n   * Returns Tweets composed by a single user, specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, the most recent 3,200 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n   */\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/tweets', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns Tweets mentioning a single user specified by the requested user ID.\n   * By default, the most recent ten Tweets are returned per request.\n   * Using pagination, up to the most recent 800 Tweets can be retrieved.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n   */\n  async userMentionTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('users/:id/mentions', options, {\n      fullResponse: true,\n      params: {\n        id: userId\n      }\n    });\n    return new paginators_1.TweetUserMentionTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n   *\n   * OAuth2 scopes: `users.read` `tweet.read`\n   */\n  async quotes(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const initialRq = await this.get('tweets/:id/quote_tweets', options, {\n      fullResponse: true,\n      params: {\n        id: tweetId\n      }\n    });\n    return new paginators_1.QuotedTweetsTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: tweetId\n      }\n    });\n  }\n  /* Bookmarks */\n  /**\n   * Allows you to get information about a authenticated userâ€™s 800 most recent bookmarked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n   */\n  async bookmarks() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const user = await this.getCurrentUserV2Object();\n    const initialRq = await this.get('users/:id/bookmarks', options, {\n      fullResponse: true,\n      params: {\n        id: user.data.id\n      }\n    });\n    return new paginators_1.TweetBookmarksTimelineV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: options,\n      sharedParams: {\n        id: user.data.id\n      }\n    });\n  }\n  /* Users */\n  /**\n   * Returns information about an authorized user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n  me() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('users/me', options);\n  }\n  /**\n   * Returns a variety of information about a single user specified by the requested ID.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n   */\n  user(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/:id', options, {\n      params: {\n        id: userId\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by the requested IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n   */\n  users(userIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n    return this.get('users', {\n      ...options,\n      ids\n    });\n  }\n  /**\n   * Returns a variety of information about a single user specified by their username.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n   */\n  userByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('users/by/username/:username', options, {\n      params: {\n        username\n      }\n    });\n  }\n  /**\n   * Returns a variety of information about one or more users specified by their usernames.\n   * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n   *\n   * OAuth2 scope: `users.read`, `tweet.read`\n   */\n  usersByUsernames(usernames) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n    return this.get('users/by', {\n      ...options,\n      usernames\n    });\n  }\n  async followers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n    if (!asPaginator) {\n      return this.get('users/:id/followers', parameters, {\n        params\n      });\n    }\n    const initialRq = await this.get('users/:id/followers', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n  async following(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      asPaginator,\n      ...parameters\n    } = options;\n    const params = {\n      id: userId\n    };\n    if (!asPaginator) {\n      return this.get('users/:id/following', parameters, {\n        params\n      });\n    }\n    const initialRq = await this.get('users/:id/following', parameters, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserFollowingV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: parameters,\n      sharedParams: params\n    });\n  }\n  /**\n   * Allows you to get information about a userâ€™s liked Tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n   */\n  async userLikedTweets(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/liked_tweets', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.TweetV2UserLikedTweetsPaginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are blocked by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n   */\n  async userBlockingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/blocking', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are muted by the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n   */\n  async userMutingUsers(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/muting', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /* Lists */\n  /**\n   * Returns the details of a specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n   */\n  list(id) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('lists/:id', options, {\n      params: {\n        id\n      }\n    });\n  }\n  /**\n   * Returns all Lists owned by the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n   */\n  async listsOwned(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/owned_lists', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserOwnedListsV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns all Lists a specified user is a member of.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n   */\n  async listMemberships(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/list_memberships', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserListMembershipsV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns all Lists a specified user follows.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n   */\n  async listFollowed(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: userId\n    };\n    const initialRq = await this.get('users/:id/followed_lists', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.UserListFollowedV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of Tweets from the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n   */\n  async listTweets(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/tweets', options, {\n      fullResponse: true,\n      params\n    });\n    return new paginators_1.TweetV2ListTweetsPaginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are members of the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n   */\n  async listMembers(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/members', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserListMembersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /**\n   * Returns a list of users who are followers of the specified List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n   */\n  async listFollowers(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const params = {\n      id: listId\n    };\n    const initialRq = await this.get('lists/:id/followers', options, {\n      fullResponse: true,\n      params\n    });\n    return new user_paginator_v2_1.UserListFollowersV2Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams: {\n        ...options\n      },\n      sharedParams: params\n    });\n  }\n  /* Spaces */\n  /**\n   * Get a single space by ID.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n  space(spaceId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/:id', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n  /**\n   * Get spaces using their IDs.\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n  spaces(spaceIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces', {\n      ids: spaceIds,\n      ...options\n    });\n  }\n  /**\n   * Get spaces using their creator user ID(s). (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n   *\n   * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n   */\n  spacesByCreators(creatorIds) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/by/creator_ids', {\n      user_ids: creatorIds,\n      ...options\n    });\n  }\n  /**\n   * Search through spaces using multiple params. (no pagination available)\n   * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n   */\n  searchSpaces(options) {\n    return this.get('spaces/search', options);\n  }\n  /**\n  * Returns a list of user who purchased a ticket to the requested Space.\n  * You must authenticate the request using the Access Token of the creator of the requested Space.\n  *\n  * **OAuth 2.0 Access Token required**\n  *\n  * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n  *\n  * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n  */\n  spaceBuyers(spaceId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('spaces/:id/buyers', options, {\n      params: {\n        id: spaceId\n      }\n    });\n  }\n  searchStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/search/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /**\n   * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n   */\n  streamRules() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('tweets/search/stream/rules', options);\n  }\n  updateStreamRules(options) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('tweets/search/stream/rules', options, {\n      query\n    });\n  }\n  sampleStream() {\n    let {\n      autoConnect,\n      ...options\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.getStream('tweets/sample/stream', options, {\n      payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n      autoConnect\n    });\n  }\n  /* Batch compliance */\n  /**\n   * Returns a list of recent compliance jobs.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n   */\n  complianceJobs(options) {\n    return this.get('compliance/jobs', options);\n  }\n  /**\n   * Get a single compliance job with the specified ID.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n   */\n  complianceJob(jobId) {\n    return this.get('compliance/jobs/:id', undefined, {\n      params: {\n        id: jobId\n      }\n    });\n  }\n  /**\n   * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n   * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n   *\n   * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n  async sendComplianceJob(jobParams) {\n    const job = await this.post('compliance/jobs', {\n      type: jobParams.type,\n      name: jobParams.name\n    });\n    // Send the IDs\n    const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n    // Upload the IDs\n    await this.put(job.data.upload_url, rawIdsBody, {\n      forceBodyMode: 'raw',\n      enableAuth: false,\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      prefix: ''\n    });\n    return job;\n  }\n  /**\n   * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n   * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n   * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n   */\n  async complianceJobResult(job) {\n    let runningJob = job;\n    while (runningJob.status !== 'complete') {\n      if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n        throw new Error('Job failed to be completed.');\n      }\n      await new Promise(resolve => setTimeout(resolve, 3500));\n      runningJob = (await this.complianceJob(job.id)).data;\n    }\n    // Download and parse result\n    const result = await this.get(job.download_url, undefined, {\n      enableAuth: false,\n      prefix: ''\n    });\n    return result.trim().split('\\n').filter(line => line).map(line => JSON.parse(line));\n  }\n}\nexports.default = TwitterApiv2ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","paginators_1","client_v2_labs_read_1","user_paginator_v2_1","helpers_1","TwitterApiv2ReadOnly","default","constructor","arguments","_prefix","API_V2_PREFIX","labs","_labs","search","queryOrOptions","options","query","undefined","realOptions","queryParams","initialRq","get","fullResponse","TweetSearchRecentV2Paginator","realData","data","rateLimit","instance","searchAll","TweetSearchAllV2Paginator","singleTweet","tweetId","params","id","tweets","tweetIds","ids","tweetCountRecent","tweetCountAll","tweetRetweetedBy","asPaginator","parameters","TweetRetweetersUsersV2Paginator","sharedParams","tweetLikedBy","TweetLikingUsersV2Paginator","homeTimeline","meUser","getCurrentUserV2Object","TweetHomeTimelineV2Paginator","userTimeline","userId","TweetUserTimelineV2Paginator","userMentionTimeline","TweetUserMentionTimelineV2Paginator","quotes","QuotedTweetsTimelineV2Paginator","bookmarks","user","TweetBookmarksTimelineV2Paginator","me","users","userIds","Array","isArray","join","userByUsername","username","usersByUsernames","usernames","followers","UserFollowersV2Paginator","following","UserFollowingV2Paginator","userLikedTweets","TweetV2UserLikedTweetsPaginator","userBlockingUsers","UserBlockingUsersV2Paginator","userMutingUsers","UserMutingUsersV2Paginator","list","listsOwned","UserOwnedListsV2Paginator","listMemberships","UserListMembershipsV2Paginator","listFollowed","UserListFollowedV2Paginator","listTweets","listId","TweetV2ListTweetsPaginator","listMembers","UserListMembersV2Paginator","listFollowers","UserListFollowersV2Paginator","space","spaceId","spaces","spaceIds","spacesByCreators","creatorIds","user_ids","searchSpaces","spaceBuyers","searchStream","autoConnect","getStream","payloadIsError","isTweetStreamV2ErrorPayload","streamRules","updateStreamRules","post","sampleStream","complianceJobs","complianceJob","jobId","sendComplianceJob","jobParams","job","type","name","rawIdsBody","Buffer","from","put","upload_url","forceBodyMode","enableAuth","headers","prefix","complianceJobResult","runningJob","status","Error","Promise","resolve","setTimeout","result","download_url","trim","split","filter","line","map","JSON","parse"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v2/client.v2.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_read_1.default(this);\n    }\n    async search(queryOrOptions, options = {}) {\n        const query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n        const realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n        const queryParams = { ...realOptions, query };\n        const initialRq = await this.get('tweets/search/recent', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchRecentV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n    async searchAll(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/all', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchAllV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('tweets/:id', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    tweets(tweetIds, options = {}) {\n        return this.get('tweets', { ids: tweetIds, ...options });\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n    tweetCountRecent(query, options = {}) {\n        return this.get('tweets/counts/recent', { query, ...options });\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n    tweetCountAll(query, options = {}) {\n        return this.get('tweets/counts/all', { query, ...options });\n    }\n    async tweetRetweetedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/retweeted_by', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    async tweetLikedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/liking_users', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /**\n     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n     * This endpoint returns up to the last 3200 Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n     *\n     * OAuth 2 scopes: `tweet.read` `users.read`\n     */\n    async homeTimeline(options = {}) {\n        const meUser = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/timelines/reverse_chronological', options, {\n            fullResponse: true,\n            params: { id: meUser.data.id },\n        });\n        return new paginators_1.TweetHomeTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: meUser.data.id },\n        });\n    }\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n    async userTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/tweets', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n    async userMentionTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/mentions', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserMentionTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n     *\n     * OAuth2 scopes: `users.read` `tweet.read`\n     */\n    async quotes(tweetId, options = {}) {\n        const initialRq = await this.get('tweets/:id/quote_tweets', options, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        return new paginators_1.QuotedTweetsTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Allows you to get information about a authenticated userâ€™s 800 most recent bookmarked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n     */\n    async bookmarks(options = {}) {\n        const user = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/bookmarks', options, {\n            fullResponse: true,\n            params: { id: user.data.id },\n        });\n        return new paginators_1.TweetBookmarksTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: user.data.id },\n        });\n    }\n    /* Users */\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    me(options = {}) {\n        return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n    user(userId, options = {}) {\n        return this.get('users/:id', options, { params: { id: userId } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n    users(userIds, options = {}) {\n        const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n        return this.get('users', { ...options, ids });\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n    userByUsername(username, options = {}) {\n        return this.get('users/by/username/:username', options, { params: { username } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    usersByUsernames(usernames, options = {}) {\n        usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n        return this.get('users/by', { ...options, usernames });\n    }\n    async followers(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/followers', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/followers', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    async following(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/following', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/following', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowingV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    /**\n     * Allows you to get information about a userâ€™s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n    async userLikedTweets(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/liked_tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2UserLikedTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n    async userBlockingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/blocking', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n    async userMutingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/muting', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Lists */\n    /**\n     * Returns the details of a specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n     */\n    list(id, options = {}) {\n        return this.get('lists/:id', options, { params: { id } });\n    }\n    /**\n     * Returns all Lists owned by the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n     */\n    async listsOwned(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/owned_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserOwnedListsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user is a member of.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n     */\n    async listMemberships(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/list_memberships', options, { fullResponse: true, params });\n        return new paginators_1.UserListMembershipsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user follows.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n     */\n    async listFollowed(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/followed_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserListFollowedV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of Tweets from the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n     */\n    async listTweets(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2ListTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are members of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n     */\n    async listMembers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/members', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListMembersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are followers of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n     */\n    async listFollowers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/followers', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    space(spaceId, options = {}) {\n        return this.get('spaces/:id', options, { params: { id: spaceId } });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spaces(spaceIds, options = {}) {\n        return this.get('spaces', { ids: spaceIds, ...options });\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spacesByCreators(creatorIds, options = {}) {\n        return this.get('spaces/by/creator_ids', { user_ids: creatorIds, ...options });\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n    searchSpaces(options) {\n        return this.get('spaces/search', options);\n    }\n    /**\n    * Returns a list of user who purchased a ticket to the requested Space.\n    * You must authenticate the request using the Access Token of the creator of the requested Space.\n    *\n    * **OAuth 2.0 Access Token required**\n    *\n    * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n    *\n    * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n    */\n    spaceBuyers(spaceId, options = {}) {\n        return this.get('spaces/:id/buyers', options, { params: { id: spaceId } });\n    }\n    searchStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/search/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n    streamRules(options = {}) {\n        return this.get('tweets/search/stream/rules', options);\n    }\n    updateStreamRules(options, query = {}) {\n        return this.post('tweets/search/stream/rules', options, { query });\n    }\n    sampleStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/sample/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n    complianceJobs(options) {\n        return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n    complianceJob(jobId) {\n        return this.get('compliance/jobs/:id', undefined, { params: { id: jobId } });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async sendComplianceJob(jobParams) {\n        const job = await this.post('compliance/jobs', { type: jobParams.type, name: jobParams.name });\n        // Send the IDs\n        const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n        // Upload the IDs\n        await this.put(job.data.upload_url, rawIdsBody, {\n            forceBodyMode: 'raw',\n            enableAuth: false,\n            headers: { 'Content-Type': 'text/plain' },\n            prefix: '',\n        });\n        return job;\n    }\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async complianceJobResult(job) {\n        let runningJob = job;\n        while (runningJob.status !== 'complete') {\n            if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n                throw new Error('Job failed to be completed.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 3500));\n            runningJob = (await this.complianceJob(job.id)).data;\n        }\n        // Download and parse result\n        const result = await this.get(job.download_url, undefined, {\n            enableAuth: false,\n            prefix: '',\n        });\n        return result\n            .trim()\n            .split('\\n')\n            .filter(line => line)\n            .map(line => JSON.parse(line));\n    }\n}\nexports.default = TwitterApiv2ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}