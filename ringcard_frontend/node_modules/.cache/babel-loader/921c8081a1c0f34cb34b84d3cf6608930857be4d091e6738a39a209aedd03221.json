{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientRequestMaker = void 0;\nconst types_1 = require(\"../types\");\nconst TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\nconst helpers_1 = require(\"../plugins/helpers\");\nconst helpers_2 = require(\"../helpers\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\nconst request_handler_helper_1 = __importDefault(require(\"./request-handler.helper\"));\nconst request_param_helper_1 = __importDefault(require(\"./request-param.helper\"));\nconst oauth2_helper_1 = require(\"./oauth2.helper\");\nclass ClientRequestMaker {\n  constructor(settings) {\n    this.rateLimits = {};\n    this.clientSettings = {};\n    if (settings) {\n      this.clientSettings = settings;\n    }\n  }\n  /** @deprecated - Switch to `@twitter-api-v2/plugin-rate-limit` */\n  getRateLimits() {\n    return this.rateLimits;\n  }\n  saveRateLimit(originalUrl, rateLimit) {\n    this.rateLimits[originalUrl] = rateLimit;\n  }\n  /** Send a new request and returns a wrapped `Promise<TwitterResponse<T>`. */\n  async send(requestParams) {\n    var _a, _b, _c, _d, _e;\n    // Pre-request config hooks\n    if ((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length) {\n      const possibleResponse = await this.applyPreRequestConfigHooks(requestParams);\n      if (possibleResponse) {\n        return possibleResponse;\n      }\n    }\n    const args = this.getHttpRequestArgs(requestParams);\n    const options = {\n      method: args.method,\n      headers: args.headers,\n      timeout: requestParams.timeout,\n      agent: this.clientSettings.httpAgent\n    };\n    const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n    if (args.body) {\n      request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n    }\n    // Pre-request hooks\n    if ((_b = this.clientSettings.plugins) === null || _b === void 0 ? void 0 : _b.length) {\n      await this.applyPreRequestHooks(requestParams, args, options);\n    }\n    let request = new request_handler_helper_1.default({\n      url: args.url,\n      options,\n      body: args.body,\n      rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n      requestEventDebugHandler: requestParams.requestEventDebugHandler,\n      compression: (_d = (_c = requestParams.compression) !== null && _c !== void 0 ? _c : this.clientSettings.compression) !== null && _d !== void 0 ? _d : true,\n      forceParseMode: requestParams.forceParseMode\n    }).makeRequest();\n    if ((0, helpers_1.hasRequestErrorPlugins)(this)) {\n      request = this.applyResponseErrorHooks(requestParams, args, options, request);\n    }\n    const response = await request;\n    // Post-request hooks\n    if ((_e = this.clientSettings.plugins) === null || _e === void 0 ? void 0 : _e.length) {\n      const responseOverride = await this.applyPostRequestHooks(requestParams, args, options, response);\n      if (responseOverride) {\n        return responseOverride.value;\n      }\n    }\n    return response;\n  }\n  sendStream(requestParams) {\n    var _a, _b;\n    // Pre-request hooks\n    if (this.clientSettings.plugins) {\n      this.applyPreStreamRequestConfigHooks(requestParams);\n    }\n    const args = this.getHttpRequestArgs(requestParams);\n    const options = {\n      method: args.method,\n      headers: args.headers,\n      agent: this.clientSettings.httpAgent\n    };\n    const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n    const enableAutoConnect = requestParams.autoConnect !== false;\n    if (args.body) {\n      request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n    }\n    const requestData = {\n      url: args.url,\n      options,\n      body: args.body,\n      rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n      payloadIsError: requestParams.payloadIsError,\n      compression: (_b = (_a = requestParams.compression) !== null && _a !== void 0 ? _a : this.clientSettings.compression) !== null && _b !== void 0 ? _b : true\n    };\n    const stream = new TweetStream_1.default(requestData);\n    if (!enableAutoConnect) {\n      return stream;\n    }\n    return stream.connect();\n  }\n  /* Token helpers */\n  initializeToken(token) {\n    if (typeof token === 'string') {\n      this.bearerToken = token;\n    } else if (typeof token === 'object' && 'appKey' in token) {\n      this.consumerToken = token.appKey;\n      this.consumerSecret = token.appSecret;\n      if (token.accessToken && token.accessSecret) {\n        this.accessToken = token.accessToken;\n        this.accessSecret = token.accessSecret;\n      }\n      this._oauth = this.buildOAuth();\n    } else if (typeof token === 'object' && 'username' in token) {\n      const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n      this.basicToken = Buffer.from(key).toString('base64');\n    } else if (typeof token === 'object' && 'clientId' in token) {\n      this.clientId = token.clientId;\n      this.clientSecret = token.clientSecret;\n    }\n  }\n  getActiveTokens() {\n    if (this.bearerToken) {\n      return {\n        type: 'oauth2',\n        bearerToken: this.bearerToken\n      };\n    } else if (this.basicToken) {\n      return {\n        type: 'basic',\n        token: this.basicToken\n      };\n    } else if (this.consumerSecret && this._oauth) {\n      return {\n        type: 'oauth-1.0a',\n        appKey: this.consumerToken,\n        appSecret: this.consumerSecret,\n        accessToken: this.accessToken,\n        accessSecret: this.accessSecret\n      };\n    } else if (this.clientId) {\n      return {\n        type: 'oauth2-user',\n        clientId: this.clientId\n      };\n    }\n    return {\n      type: 'none'\n    };\n  }\n  buildOAuth() {\n    if (!this.consumerSecret || !this.consumerToken) throw new Error('Invalid consumer tokens');\n    return new oauth1_helper_1.default({\n      consumerKeys: {\n        key: this.consumerToken,\n        secret: this.consumerSecret\n      }\n    });\n  }\n  getOAuthAccessTokens() {\n    if (!this.accessSecret || !this.accessToken) return;\n    return {\n      key: this.accessToken,\n      secret: this.accessSecret\n    };\n  }\n  /* Plugin helpers */\n  getPlugins() {\n    var _a;\n    return (_a = this.clientSettings.plugins) !== null && _a !== void 0 ? _a : [];\n  }\n  hasPlugins() {\n    var _a;\n    return !!((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length);\n  }\n  async applyPluginMethod(method, args) {\n    var _a;\n    let returnValue;\n    for (const plugin of this.getPlugins()) {\n      const value = await ((_a = plugin[method]) === null || _a === void 0 ? void 0 : _a.call(plugin, args));\n      if (value && value instanceof types_1.TwitterApiPluginResponseOverride) {\n        returnValue = value;\n      }\n    }\n    return returnValue;\n  }\n  /* Request helpers */\n  writeAuthHeaders(_ref) {\n    let {\n      headers,\n      bodyInSignature,\n      url,\n      method,\n      query,\n      body\n    } = _ref;\n    headers = {\n      ...headers\n    };\n    if (this.bearerToken) {\n      headers.Authorization = 'Bearer ' + this.bearerToken;\n    } else if (this.basicToken) {\n      // Basic auth, to request a bearer token\n      headers.Authorization = 'Basic ' + this.basicToken;\n    } else if (this.clientId && this.clientSecret) {\n      // Basic auth with clientId + clientSecret\n      headers.Authorization = 'Basic ' + oauth2_helper_1.OAuth2Helper.getAuthHeader(this.clientId, this.clientSecret);\n    } else if (this.consumerSecret && this._oauth) {\n      // Merge query and body\n      const data = bodyInSignature ? request_param_helper_1.default.mergeQueryAndBodyForOAuth(query, body) : query;\n      const auth = this._oauth.authorize({\n        url: url.toString(),\n        method,\n        data\n      }, this.getOAuthAccessTokens());\n      headers = {\n        ...headers,\n        ...this._oauth.toHeader(auth)\n      };\n    }\n    return headers;\n  }\n  getUrlObjectFromUrlString(url) {\n    // Add protocol to URL if needed\n    if (!url.startsWith('http')) {\n      url = 'https://' + url;\n    }\n    // Convert URL to object that will receive all URL modifications\n    return new URL(url);\n  }\n  getHttpRequestArgs(_ref2) {\n    let {\n      url: stringUrl,\n      method,\n      query: rawQuery = {},\n      body: rawBody = {},\n      headers,\n      forceBodyMode,\n      enableAuth,\n      params\n    } = _ref2;\n    let body = undefined;\n    method = method.toUpperCase();\n    headers = headers !== null && headers !== void 0 ? headers : {};\n    // Add user agent header (Twitter recommends it)\n    if (!headers['x-user-agent']) {\n      headers['x-user-agent'] = 'Node.twitter-api-v2';\n    }\n    const url = this.getUrlObjectFromUrlString(stringUrl);\n    // URL without query string to save as endpoint name\n    const rawUrl = url.origin + url.pathname;\n    // Apply URL parameters\n    if (params) {\n      request_param_helper_1.default.applyRequestParametersToUrl(url, params);\n    }\n    // Build a URL without anything in QS, and QSP in query\n    const query = request_param_helper_1.default.formatQueryToString(rawQuery);\n    request_param_helper_1.default.moveUrlQueryParamsIntoObject(url, query);\n    // Delete undefined parameters\n    if (!(rawBody instanceof Buffer)) {\n      (0, helpers_2.trimUndefinedProperties)(rawBody);\n    }\n    // OAuth signature should not include parameters when using multipart.\n    const bodyType = forceBodyMode !== null && forceBodyMode !== void 0 ? forceBodyMode : request_param_helper_1.default.autoDetectBodyType(url);\n    // If undefined or true, enable auth by headers\n    if (enableAuth !== false) {\n      // OAuth needs body signature only if body is URL encoded.\n      const bodyInSignature = ClientRequestMaker.BODY_METHODS.has(method) && bodyType === 'url';\n      headers = this.writeAuthHeaders({\n        headers,\n        bodyInSignature,\n        method,\n        query,\n        url,\n        body: rawBody\n      });\n    }\n    if (ClientRequestMaker.BODY_METHODS.has(method)) {\n      body = request_param_helper_1.default.constructBodyParams(rawBody, headers, bodyType) || undefined;\n    }\n    request_param_helper_1.default.addQueryParamsToUrl(url, query);\n    return {\n      rawUrl,\n      url,\n      method,\n      headers,\n      body\n    };\n  }\n  /* Plugin helpers */\n  async applyPreRequestConfigHooks(requestParams) {\n    var _a;\n    const url = this.getUrlObjectFromUrlString(requestParams.url);\n    for (const plugin of this.getPlugins()) {\n      const result = await ((_a = plugin.onBeforeRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n        client: this,\n        url,\n        params: requestParams\n      }));\n      if (result) {\n        return result;\n      }\n    }\n  }\n  applyPreStreamRequestConfigHooks(requestParams) {\n    var _a;\n    const url = this.getUrlObjectFromUrlString(requestParams.url);\n    for (const plugin of this.getPlugins()) {\n      (_a = plugin.onBeforeStreamRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n        client: this,\n        url,\n        params: requestParams\n      });\n    }\n  }\n  async applyPreRequestHooks(requestParams, computedParams, requestOptions) {\n    await this.applyPluginMethod('onBeforeRequest', {\n      client: this,\n      url: this.getUrlObjectFromUrlString(requestParams.url),\n      params: requestParams,\n      computedParams,\n      requestOptions\n    });\n  }\n  async applyPostRequestHooks(requestParams, computedParams, requestOptions, response) {\n    return await this.applyPluginMethod('onAfterRequest', {\n      client: this,\n      url: this.getUrlObjectFromUrlString(requestParams.url),\n      params: requestParams,\n      computedParams,\n      requestOptions,\n      response\n    });\n  }\n  applyResponseErrorHooks(requestParams, computedParams, requestOptions, promise) {\n    return promise.catch(helpers_1.applyResponseHooks.bind(this, requestParams, computedParams, requestOptions));\n  }\n}\nexports.ClientRequestMaker = ClientRequestMaker;\nClientRequestMaker.BODY_METHODS = new Set(['POST', 'PUT', 'PATCH']);","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ClientRequestMaker","types_1","require","TweetStream_1","helpers_1","helpers_2","oauth1_helper_1","request_handler_helper_1","request_param_helper_1","oauth2_helper_1","constructor","settings","rateLimits","clientSettings","getRateLimits","saveRateLimit","originalUrl","rateLimit","send","requestParams","_a","_b","_c","_d","_e","plugins","length","possibleResponse","applyPreRequestConfigHooks","args","getHttpRequestArgs","options","method","headers","timeout","agent","httpAgent","enableRateLimitSave","body","default","setBodyLengthHeader","applyPreRequestHooks","request","url","rateLimitSaver","bind","rawUrl","undefined","requestEventDebugHandler","compression","forceParseMode","makeRequest","hasRequestErrorPlugins","applyResponseErrorHooks","response","responseOverride","applyPostRequestHooks","sendStream","applyPreStreamRequestConfigHooks","enableAutoConnect","autoConnect","requestData","payloadIsError","stream","connect","initializeToken","token","bearerToken","consumerToken","appKey","consumerSecret","appSecret","accessToken","accessSecret","_oauth","buildOAuth","key","encodeURIComponent","username","password","basicToken","Buffer","from","toString","clientId","clientSecret","getActiveTokens","type","Error","consumerKeys","secret","getOAuthAccessTokens","getPlugins","hasPlugins","applyPluginMethod","returnValue","plugin","call","TwitterApiPluginResponseOverride","writeAuthHeaders","bodyInSignature","query","Authorization","OAuth2Helper","getAuthHeader","data","mergeQueryAndBodyForOAuth","auth","authorize","toHeader","getUrlObjectFromUrlString","startsWith","URL","stringUrl","rawQuery","rawBody","forceBodyMode","enableAuth","params","toUpperCase","origin","pathname","applyRequestParametersToUrl","formatQueryToString","moveUrlQueryParamsIntoObject","trimUndefinedProperties","bodyType","autoDetectBodyType","BODY_METHODS","has","constructBodyParams","addQueryParamsToUrl","result","onBeforeRequestConfig","client","onBeforeStreamRequestConfig","computedParams","requestOptions","promise","catch","applyResponseHooks","Set"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/client-mixins/request-maker.mixin.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ClientRequestMaker = void 0;\nconst types_1 = require(\"../types\");\nconst TweetStream_1 = __importDefault(require(\"../stream/TweetStream\"));\nconst helpers_1 = require(\"../plugins/helpers\");\nconst helpers_2 = require(\"../helpers\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\nconst request_handler_helper_1 = __importDefault(require(\"./request-handler.helper\"));\nconst request_param_helper_1 = __importDefault(require(\"./request-param.helper\"));\nconst oauth2_helper_1 = require(\"./oauth2.helper\");\nclass ClientRequestMaker {\n    constructor(settings) {\n        this.rateLimits = {};\n        this.clientSettings = {};\n        if (settings) {\n            this.clientSettings = settings;\n        }\n    }\n    /** @deprecated - Switch to `@twitter-api-v2/plugin-rate-limit` */\n    getRateLimits() {\n        return this.rateLimits;\n    }\n    saveRateLimit(originalUrl, rateLimit) {\n        this.rateLimits[originalUrl] = rateLimit;\n    }\n    /** Send a new request and returns a wrapped `Promise<TwitterResponse<T>`. */\n    async send(requestParams) {\n        var _a, _b, _c, _d, _e;\n        // Pre-request config hooks\n        if ((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length) {\n            const possibleResponse = await this.applyPreRequestConfigHooks(requestParams);\n            if (possibleResponse) {\n                return possibleResponse;\n            }\n        }\n        const args = this.getHttpRequestArgs(requestParams);\n        const options = {\n            method: args.method,\n            headers: args.headers,\n            timeout: requestParams.timeout,\n            agent: this.clientSettings.httpAgent,\n        };\n        const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n        if (args.body) {\n            request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n        }\n        // Pre-request hooks\n        if ((_b = this.clientSettings.plugins) === null || _b === void 0 ? void 0 : _b.length) {\n            await this.applyPreRequestHooks(requestParams, args, options);\n        }\n        let request = new request_handler_helper_1.default({\n            url: args.url,\n            options,\n            body: args.body,\n            rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n            requestEventDebugHandler: requestParams.requestEventDebugHandler,\n            compression: (_d = (_c = requestParams.compression) !== null && _c !== void 0 ? _c : this.clientSettings.compression) !== null && _d !== void 0 ? _d : true,\n            forceParseMode: requestParams.forceParseMode,\n        })\n            .makeRequest();\n        if ((0, helpers_1.hasRequestErrorPlugins)(this)) {\n            request = this.applyResponseErrorHooks(requestParams, args, options, request);\n        }\n        const response = await request;\n        // Post-request hooks\n        if ((_e = this.clientSettings.plugins) === null || _e === void 0 ? void 0 : _e.length) {\n            const responseOverride = await this.applyPostRequestHooks(requestParams, args, options, response);\n            if (responseOverride) {\n                return responseOverride.value;\n            }\n        }\n        return response;\n    }\n    sendStream(requestParams) {\n        var _a, _b;\n        // Pre-request hooks\n        if (this.clientSettings.plugins) {\n            this.applyPreStreamRequestConfigHooks(requestParams);\n        }\n        const args = this.getHttpRequestArgs(requestParams);\n        const options = {\n            method: args.method,\n            headers: args.headers,\n            agent: this.clientSettings.httpAgent,\n        };\n        const enableRateLimitSave = requestParams.enableRateLimitSave !== false;\n        const enableAutoConnect = requestParams.autoConnect !== false;\n        if (args.body) {\n            request_param_helper_1.default.setBodyLengthHeader(options, args.body);\n        }\n        const requestData = {\n            url: args.url,\n            options,\n            body: args.body,\n            rateLimitSaver: enableRateLimitSave ? this.saveRateLimit.bind(this, args.rawUrl) : undefined,\n            payloadIsError: requestParams.payloadIsError,\n            compression: (_b = (_a = requestParams.compression) !== null && _a !== void 0 ? _a : this.clientSettings.compression) !== null && _b !== void 0 ? _b : true,\n        };\n        const stream = new TweetStream_1.default(requestData);\n        if (!enableAutoConnect) {\n            return stream;\n        }\n        return stream.connect();\n    }\n    /* Token helpers */\n    initializeToken(token) {\n        if (typeof token === 'string') {\n            this.bearerToken = token;\n        }\n        else if (typeof token === 'object' && 'appKey' in token) {\n            this.consumerToken = token.appKey;\n            this.consumerSecret = token.appSecret;\n            if (token.accessToken && token.accessSecret) {\n                this.accessToken = token.accessToken;\n                this.accessSecret = token.accessSecret;\n            }\n            this._oauth = this.buildOAuth();\n        }\n        else if (typeof token === 'object' && 'username' in token) {\n            const key = encodeURIComponent(token.username) + ':' + encodeURIComponent(token.password);\n            this.basicToken = Buffer.from(key).toString('base64');\n        }\n        else if (typeof token === 'object' && 'clientId' in token) {\n            this.clientId = token.clientId;\n            this.clientSecret = token.clientSecret;\n        }\n    }\n    getActiveTokens() {\n        if (this.bearerToken) {\n            return {\n                type: 'oauth2',\n                bearerToken: this.bearerToken,\n            };\n        }\n        else if (this.basicToken) {\n            return {\n                type: 'basic',\n                token: this.basicToken,\n            };\n        }\n        else if (this.consumerSecret && this._oauth) {\n            return {\n                type: 'oauth-1.0a',\n                appKey: this.consumerToken,\n                appSecret: this.consumerSecret,\n                accessToken: this.accessToken,\n                accessSecret: this.accessSecret,\n            };\n        }\n        else if (this.clientId) {\n            return {\n                type: 'oauth2-user',\n                clientId: this.clientId,\n            };\n        }\n        return { type: 'none' };\n    }\n    buildOAuth() {\n        if (!this.consumerSecret || !this.consumerToken)\n            throw new Error('Invalid consumer tokens');\n        return new oauth1_helper_1.default({\n            consumerKeys: { key: this.consumerToken, secret: this.consumerSecret },\n        });\n    }\n    getOAuthAccessTokens() {\n        if (!this.accessSecret || !this.accessToken)\n            return;\n        return {\n            key: this.accessToken,\n            secret: this.accessSecret,\n        };\n    }\n    /* Plugin helpers */\n    getPlugins() {\n        var _a;\n        return (_a = this.clientSettings.plugins) !== null && _a !== void 0 ? _a : [];\n    }\n    hasPlugins() {\n        var _a;\n        return !!((_a = this.clientSettings.plugins) === null || _a === void 0 ? void 0 : _a.length);\n    }\n    async applyPluginMethod(method, args) {\n        var _a;\n        let returnValue;\n        for (const plugin of this.getPlugins()) {\n            const value = await ((_a = plugin[method]) === null || _a === void 0 ? void 0 : _a.call(plugin, args));\n            if (value && value instanceof types_1.TwitterApiPluginResponseOverride) {\n                returnValue = value;\n            }\n        }\n        return returnValue;\n    }\n    /* Request helpers */\n    writeAuthHeaders({ headers, bodyInSignature, url, method, query, body }) {\n        headers = { ...headers };\n        if (this.bearerToken) {\n            headers.Authorization = 'Bearer ' + this.bearerToken;\n        }\n        else if (this.basicToken) {\n            // Basic auth, to request a bearer token\n            headers.Authorization = 'Basic ' + this.basicToken;\n        }\n        else if (this.clientId && this.clientSecret) {\n            // Basic auth with clientId + clientSecret\n            headers.Authorization = 'Basic ' + oauth2_helper_1.OAuth2Helper.getAuthHeader(this.clientId, this.clientSecret);\n        }\n        else if (this.consumerSecret && this._oauth) {\n            // Merge query and body\n            const data = bodyInSignature ? request_param_helper_1.default.mergeQueryAndBodyForOAuth(query, body) : query;\n            const auth = this._oauth.authorize({\n                url: url.toString(),\n                method,\n                data,\n            }, this.getOAuthAccessTokens());\n            headers = { ...headers, ...this._oauth.toHeader(auth) };\n        }\n        return headers;\n    }\n    getUrlObjectFromUrlString(url) {\n        // Add protocol to URL if needed\n        if (!url.startsWith('http')) {\n            url = 'https://' + url;\n        }\n        // Convert URL to object that will receive all URL modifications\n        return new URL(url);\n    }\n    getHttpRequestArgs({ url: stringUrl, method, query: rawQuery = {}, body: rawBody = {}, headers, forceBodyMode, enableAuth, params, }) {\n        let body = undefined;\n        method = method.toUpperCase();\n        headers = headers !== null && headers !== void 0 ? headers : {};\n        // Add user agent header (Twitter recommends it)\n        if (!headers['x-user-agent']) {\n            headers['x-user-agent'] = 'Node.twitter-api-v2';\n        }\n        const url = this.getUrlObjectFromUrlString(stringUrl);\n        // URL without query string to save as endpoint name\n        const rawUrl = url.origin + url.pathname;\n        // Apply URL parameters\n        if (params) {\n            request_param_helper_1.default.applyRequestParametersToUrl(url, params);\n        }\n        // Build a URL without anything in QS, and QSP in query\n        const query = request_param_helper_1.default.formatQueryToString(rawQuery);\n        request_param_helper_1.default.moveUrlQueryParamsIntoObject(url, query);\n        // Delete undefined parameters\n        if (!(rawBody instanceof Buffer)) {\n            (0, helpers_2.trimUndefinedProperties)(rawBody);\n        }\n        // OAuth signature should not include parameters when using multipart.\n        const bodyType = forceBodyMode !== null && forceBodyMode !== void 0 ? forceBodyMode : request_param_helper_1.default.autoDetectBodyType(url);\n        // If undefined or true, enable auth by headers\n        if (enableAuth !== false) {\n            // OAuth needs body signature only if body is URL encoded.\n            const bodyInSignature = ClientRequestMaker.BODY_METHODS.has(method) && bodyType === 'url';\n            headers = this.writeAuthHeaders({ headers, bodyInSignature, method, query, url, body: rawBody });\n        }\n        if (ClientRequestMaker.BODY_METHODS.has(method)) {\n            body = request_param_helper_1.default.constructBodyParams(rawBody, headers, bodyType) || undefined;\n        }\n        request_param_helper_1.default.addQueryParamsToUrl(url, query);\n        return {\n            rawUrl,\n            url,\n            method,\n            headers,\n            body,\n        };\n    }\n    /* Plugin helpers */\n    async applyPreRequestConfigHooks(requestParams) {\n        var _a;\n        const url = this.getUrlObjectFromUrlString(requestParams.url);\n        for (const plugin of this.getPlugins()) {\n            const result = await ((_a = plugin.onBeforeRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n                client: this,\n                url,\n                params: requestParams,\n            }));\n            if (result) {\n                return result;\n            }\n        }\n    }\n    applyPreStreamRequestConfigHooks(requestParams) {\n        var _a;\n        const url = this.getUrlObjectFromUrlString(requestParams.url);\n        for (const plugin of this.getPlugins()) {\n            (_a = plugin.onBeforeStreamRequestConfig) === null || _a === void 0 ? void 0 : _a.call(plugin, {\n                client: this,\n                url,\n                params: requestParams,\n            });\n        }\n    }\n    async applyPreRequestHooks(requestParams, computedParams, requestOptions) {\n        await this.applyPluginMethod('onBeforeRequest', {\n            client: this,\n            url: this.getUrlObjectFromUrlString(requestParams.url),\n            params: requestParams,\n            computedParams,\n            requestOptions,\n        });\n    }\n    async applyPostRequestHooks(requestParams, computedParams, requestOptions, response) {\n        return await this.applyPluginMethod('onAfterRequest', {\n            client: this,\n            url: this.getUrlObjectFromUrlString(requestParams.url),\n            params: requestParams,\n            computedParams,\n            requestOptions,\n            response,\n        });\n    }\n    applyResponseErrorHooks(requestParams, computedParams, requestOptions, promise) {\n        return promise.catch(helpers_1.applyResponseHooks.bind(this, requestParams, computedParams, requestOptions));\n    }\n}\nexports.ClientRequestMaker = ClientRequestMaker;\nClientRequestMaker.BODY_METHODS = new Set(['POST', 'PUT', 'PATCH']);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}