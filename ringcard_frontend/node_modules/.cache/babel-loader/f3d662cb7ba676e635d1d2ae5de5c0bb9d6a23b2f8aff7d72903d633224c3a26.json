{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst globals_1 = require(\"../globals\");\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nconst types_1 = require(\"../types\");\nconst fs = __importStar(require(\"fs\"));\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\nconst helpers_1 = require(\"../helpers\");\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /**\n   * Get a client with only read rights.\n   */\n  get readOnly() {\n    return this;\n  }\n  /* Tweet API */\n  /**\n   * Post a new tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n  tweet(status) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      status,\n      tweet_mode: 'extended',\n      ...payload\n    };\n    return this.post('statuses/update.json', queryParams);\n  }\n  /**\n   * Quote an existing tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n  async quote(status, quotingStatusId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n    return this.tweet(status, {\n      ...payload,\n      attachment_url: url\n    });\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n  async tweetThread(tweets) {\n    const postedTweets = [];\n    for (const tweet of tweets) {\n      // Retrieve the last sent tweet\n      const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n      // Build the tweet query params\n      const queryParams = {\n        ...(typeof tweet === 'string' ? {\n          status: tweet\n        } : tweet)\n      };\n      // Reply to an existing tweet if needed\n      const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n      const status = queryParams.status;\n      if (inReplyToId) {\n        postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n      } else {\n        postedTweets.push(await this.tweet(status, queryParams));\n      }\n    }\n    return postedTweets;\n  }\n  /**\n   * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n   */\n  reply(status, in_reply_to_status_id) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.tweet(status, {\n      auto_populate_reply_metadata: true,\n      in_reply_to_status_id,\n      ...payload\n    });\n  }\n  /**\n   * Delete an existing tweet belonging to you.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n   */\n  deleteTweet(tweetId) {\n    return this.post('statuses/destroy/:id.json', {\n      tweet_mode: 'extended'\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* User API */\n  /**\n   * Report the specified user as a spam account to Twitter.\n   * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n   */\n  reportUserAsSpam(options) {\n    return this.post('users/report_spam.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Turn on/off Retweets and device notifications from the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n   */\n  updateFriendship(options) {\n    return this.post('friendships/update.json', options);\n  }\n  /**\n   * Follow the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create\n   */\n  createFriendship(options) {\n    return this.post('friendships/create.json', options);\n  }\n  /**\n   * Unfollow the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy\n   */\n  destroyFriendship(options) {\n    return this.post('friendships/destroy.json', options);\n  }\n  /* Account API */\n  /**\n   * Update current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n  updateAccountSettings(options) {\n    return this.post('account/settings.json', options);\n  }\n  /**\n   * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n   */\n  updateAccountProfile(options) {\n    return this.post('account/update_profile.json', options);\n  }\n  /**\n   * Uploads a profile banner on behalf of the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n   */\n  async updateAccountProfileBanner(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      banner: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n      ...options\n    };\n    return this.post('account/update_profile_banner.json', queryParams, {\n      forceBodyMode: 'form-data'\n    });\n  }\n  /**\n   * Updates the authenticating user's profile image.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n   */\n  async updateAccountProfileImage(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      image: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n      ...options\n    };\n    return this.post('account/update_profile_image.json', queryParams, {\n      forceBodyMode: 'form-data'\n    });\n  }\n  /**\n   * Removes the uploaded profile banner for the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n   */\n  removeAccountProfileBanner() {\n    return this.post('account/remove_profile_banner.json');\n  }\n  /* Lists */\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n   */\n  createList(options) {\n    return this.post('lists/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n   */\n  updateList(options) {\n    return this.post('lists/update.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n   */\n  removeList(options) {\n    return this.post('lists/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n   * it will target `lists/members/create_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n   */\n  addListMembers(options) {\n    const hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n   * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n   * it will target `lists/members/destroy_all.json`.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n   */\n  removeListMembers(options) {\n    const hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n    const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n    return this.post(endpoint, options);\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n   */\n  subscribeToList(options) {\n    return this.post('lists/subscribers/create.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n   */\n  unsubscribeOfList(options) {\n    return this.post('lists/subscribers/destroy.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /* Media upload API */\n  /**\n   * This endpoint can be used to provide additional information about the uploaded media_id.\n   * This feature is currently only supported for images and GIFs.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n   */\n  createMediaMetadata(mediaId, metadata) {\n    return this.post('media/metadata/create.json', {\n      media_id: mediaId,\n      ...metadata\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n   * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n   *\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n   */\n  createMediaSubtitles(mediaId, subtitles) {\n    return this.post('media/subtitles/create.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n   */\n  deleteMediaSubtitles(mediaId) {\n    for (var _len = arguments.length, languages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      languages[_key - 1] = arguments[_key];\n    }\n    return this.post('media/subtitles/delete.json', {\n      media_id: mediaId,\n      media_category: 'TweetVideo',\n      subtitle_info: {\n        subtitles: languages.map(lang => ({\n          language_code: lang\n        }))\n      }\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n      forceBodyMode: 'json'\n    });\n  }\n  /**\n   * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n   *\n   * @param file If `string`, filename is supposed.\n   * A `Buffer` is a raw file.\n   * `fs.promises.FileHandle` or `number` are file pointers.\n   *\n   * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n   * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n   * If type is not part of the enum, it will be used as mime type.\n   *\n   * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n   *\n   * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n   *\n   * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n   *\n   * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n   *\n   * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n   * You must specify it if you send a media to use in DMs.\n   */\n  async uploadMedia(file) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a;\n    const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : 1024 * 1024;\n    const {\n      fileHandle,\n      mediaCategory,\n      fileSize,\n      mimeType\n    } = await this.getUploadMediaRequirements(file, options);\n    // Get the file handle (if not buffer)\n    try {\n      // Finally! We can send INIT message.\n      const mediaData = await this.post(UPLOAD_ENDPOINT, {\n        command: 'INIT',\n        total_bytes: fileSize,\n        media_type: mimeType,\n        media_category: mediaCategory,\n        additional_owners: options.additionalOwners,\n        shared: options.shared ? true : undefined\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      });\n      // Upload the media chunk by chunk\n      await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n      // Finalize media\n      const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n        command: 'FINALIZE',\n        media_id: mediaData.media_id_string\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      });\n      if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n        // Must wait if video is still computed\n        await this.awaitForMediaProcessingCompletion(fullMediaData);\n      }\n      // Video is ready, return media_id\n      return fullMediaData.media_id_string;\n    } finally {\n      // Close file if any\n      if (typeof file === 'number') {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fs.close(file, () => {});\n      } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n        fileHandle.close();\n      }\n    }\n  }\n  async awaitForMediaProcessingCompletion(fullMediaData) {\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n      const {\n        processing_info\n      } = fullMediaData;\n      if (!processing_info || processing_info.state === 'succeeded') {\n        // Ok, completed!\n        return;\n      }\n      if (processing_info.state === 'failed') {\n        if (processing_info.error) {\n          const {\n            name,\n            message\n          } = processing_info.error;\n          throw new Error(`Failed to process media: ${name} - ${message}.`);\n        }\n        throw new Error('Failed to process the media.');\n      }\n      if (processing_info.check_after_secs) {\n        // Await for given seconds\n        await (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n      } else {\n        // No info; Await for 5 seconds\n        await (0, media_helpers_v1_1.sleepSecs)(5);\n      }\n    }\n  }\n  async getUploadMediaRequirements(file) {\n    let {\n      mimeType,\n      type,\n      target,\n      longVideo\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // Get the file handle (if not buffer)\n    let fileHandle;\n    try {\n      fileHandle = await (0, media_helpers_v1_1.getFileHandle)(file);\n      // Get the mimetype\n      const realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType);\n      // Get the media category\n      let mediaCategory;\n      // If explicit longmp4 OR explicit MIME type and not DM target\n      if (realMimeType === types_1.EUploadMimeType.Mp4 && (!mimeType && !type && target !== 'dm' || longVideo)) {\n        mediaCategory = 'amplify_video';\n      } else {\n        mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n      }\n      return {\n        fileHandle,\n        mediaCategory,\n        fileSize: await (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle),\n        mimeType: realMimeType\n      };\n    } catch (e) {\n      // Close file if any\n      if (typeof file === 'number') {\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fs.close(file, () => {});\n      } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n        fileHandle.close();\n      }\n      throw e;\n    }\n  }\n  async mediaChunkedUpload(fileHandle, chunkLength, mediaId) {\n    let maxConcurrentUploads = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 3;\n    // Send chunk by chunk\n    let chunkIndex = 0;\n    if (maxConcurrentUploads < 1) {\n      throw new RangeError('Bad maxConcurrentUploads parameter.');\n    }\n    // Creating a buffer for doing file stuff (if we don't have one)\n    const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength);\n    // Sliced/filled buffer returned for each part\n    let readBuffer;\n    // Needed to know when we should stop reading the file\n    let nread;\n    // Needed to use the buffer object (file handles always \"remembers\" file position)\n    let offset = 0;\n    [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n    offset += nread;\n    // Handle max concurrent uploads\n    const currentUploads = new Set();\n    // Read buffer until file is completely read\n    while (nread) {\n      const mediaBufferPart = readBuffer.slice(0, nread);\n      // Sent part if part has something inside\n      if (mediaBufferPart.length) {\n        const request = this.post(UPLOAD_ENDPOINT, {\n          command: 'APPEND',\n          media_id: mediaId,\n          segment_index: chunkIndex,\n          media: mediaBufferPart\n        }, {\n          prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n        });\n        currentUploads.add(request);\n        request.then(() => {\n          currentUploads.delete(request);\n        });\n        chunkIndex++;\n      }\n      if (currentUploads.size >= maxConcurrentUploads) {\n        // Await for first promise to be finished\n        await Promise.race(currentUploads);\n      }\n      [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n      offset += nread;\n    }\n    await Promise.all([...currentUploads]);\n  }\n}\nexports.default = TwitterApiv1ReadWrite;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","globals_1","require","client_v1_read_1","types_1","fs","media_helpers_v1_1","helpers_1","UPLOAD_ENDPOINT","TwitterApiv1ReadWrite","default","constructor","arguments","_prefix","API_V1_1_PREFIX","readOnly","tweet","status","payload","queryParams","tweet_mode","post","quote","quotingStatusId","url","attachment_url","tweetThread","tweets","postedTweets","lastTweet","length","inReplyToId","id_str","in_reply_to_status_id","push","reply","auto_populate_reply_metadata","deleteTweet","tweetId","params","id","reportUserAsSpam","options","updateFriendship","createFriendship","destroyFriendship","updateAccountSettings","updateAccountProfile","updateAccountProfileBanner","file","banner","readFileIntoBuffer","forceBodyMode","updateAccountProfileImage","image","removeAccountProfileBanner","createList","updateList","removeList","addListMembers","hasMultiple","user_id","hasMultipleItems","screen_name","endpoint","removeListMembers","subscribeToList","unsubscribeOfList","createMediaMetadata","mediaId","metadata","media_id","prefix","API_V1_1_UPLOAD_PREFIX","createMediaSubtitles","subtitles","media_category","subtitle_info","deleteMediaSubtitles","languages","map","lang","language_code","uploadMedia","_a","chunkLength","fileHandle","mediaCategory","fileSize","mimeType","getUploadMediaRequirements","mediaData","command","total_bytes","media_type","additional_owners","additionalOwners","shared","mediaChunkedUpload","media_id_string","maxConcurrentUploads","fullMediaData","processing_info","state","awaitForMediaProcessingCompletion","close","Buffer","mediaInfo","error","name","message","Error","check_after_secs","sleepSecs","type","target","longVideo","getFileHandle","realMimeType","getMimeType","EUploadMimeType","Mp4","getMediaCategoryByMime","getFileSizeFromFileHandle","e","chunkIndex","RangeError","buffer","alloc","readBuffer","nread","offset","readNextPartOf","currentUploads","Set","mediaBufferPart","slice","request","segment_index","media","add","then","delete","size","Promise","race","all"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v1/client.v1.write.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nconst types_1 = require(\"../types\");\nconst fs = __importStar(require(\"fs\"));\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\nconst helpers_1 = require(\"../helpers\");\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /* Tweet API */\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    tweet(status, payload = {}) {\n        const queryParams = {\n            status,\n            tweet_mode: 'extended',\n            ...payload,\n        };\n        return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Quote an existing tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async quote(status, quotingStatusId, payload = {}) {\n        const url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n        return this.tweet(status, { ...payload, attachment_url: url });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async tweetThread(tweets) {\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ status: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n            const status = queryParams.status;\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    reply(status, in_reply_to_status_id, payload = {}) {\n        return this.tweet(status, {\n            auto_populate_reply_metadata: true,\n            in_reply_to_status_id,\n            ...payload,\n        });\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n    deleteTweet(tweetId) {\n        return this.post('statuses/destroy/:id.json', { tweet_mode: 'extended' }, { params: { id: tweetId } });\n    }\n    /* User API */\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n    reportUserAsSpam(options) {\n        return this.post('users/report_spam.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n    updateFriendship(options) {\n        return this.post('friendships/update.json', options);\n    }\n    /**\n     * Follow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create\n     */\n    createFriendship(options) {\n        return this.post('friendships/create.json', options);\n    }\n    /**\n     * Unfollow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy\n     */\n    destroyFriendship(options) {\n        return this.post('friendships/destroy.json', options);\n    }\n    /* Account API */\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    updateAccountSettings(options) {\n        return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n    updateAccountProfile(options) {\n        return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n    async updateAccountProfileBanner(file, options = {}) {\n        const queryParams = {\n            banner: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_banner.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n    async updateAccountProfileImage(file, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            image: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_image.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n    removeAccountProfileBanner() {\n        return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n    createList(options) {\n        return this.post('lists/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n    updateList(options) {\n        return this.post('lists/update.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n    removeList(options) {\n        return this.post('lists/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n    addListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n    removeListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n    subscribeToList(options) {\n        return this.post('lists/subscribers/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n    unsubscribeOfList(options) {\n        return this.post('lists/subscribers/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /* Media upload API */\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n    createMediaMetadata(mediaId, metadata) {\n        return this.post('media/metadata/create.json', { media_id: mediaId, ...metadata }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n    createMediaSubtitles(mediaId, subtitles) {\n        return this.post('media/subtitles/create.json', { media_id: mediaId, media_category: 'TweetVideo', subtitle_info: { subtitles } }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n    deleteMediaSubtitles(mediaId, ...languages) {\n        return this.post('media/subtitles/delete.json', {\n            media_id: mediaId,\n            media_category: 'TweetVideo',\n            subtitle_info: { subtitles: languages.map(lang => ({ language_code: lang })) },\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n    async uploadMedia(file, options = {}) {\n        var _a;\n        const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : (1024 * 1024);\n        const { fileHandle, mediaCategory, fileSize, mimeType } = await this.getUploadMediaRequirements(file, options);\n        // Get the file handle (if not buffer)\n        try {\n            // Finally! We can send INIT message.\n            const mediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'INIT',\n                total_bytes: fileSize,\n                media_type: mimeType,\n                media_category: mediaCategory,\n                additional_owners: options.additionalOwners,\n                shared: options.shared ? true : undefined,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            // Upload the media chunk by chunk\n            await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n            // Finalize media\n            const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'FINALIZE',\n                media_id: mediaData.media_id_string,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n                // Must wait if video is still computed\n                await this.awaitForMediaProcessingCompletion(fullMediaData);\n            }\n            // Video is ready, return media_id\n            return fullMediaData.media_id_string;\n        }\n        finally {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n        }\n    }\n    async awaitForMediaProcessingCompletion(fullMediaData) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n            const { processing_info } = fullMediaData;\n            if (!processing_info || processing_info.state === 'succeeded') {\n                // Ok, completed!\n                return;\n            }\n            if (processing_info.state === 'failed') {\n                if (processing_info.error) {\n                    const { name, message } = processing_info.error;\n                    throw new Error(`Failed to process media: ${name} - ${message}.`);\n                }\n                throw new Error('Failed to process the media.');\n            }\n            if (processing_info.check_after_secs) {\n                // Await for given seconds\n                await (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n            }\n            else {\n                // No info; Await for 5 seconds\n                await (0, media_helpers_v1_1.sleepSecs)(5);\n            }\n        }\n    }\n    async getUploadMediaRequirements(file, { mimeType, type, target, longVideo } = {}) {\n        // Get the file handle (if not buffer)\n        let fileHandle;\n        try {\n            fileHandle = await (0, media_helpers_v1_1.getFileHandle)(file);\n            // Get the mimetype\n            const realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType);\n            // Get the media category\n            let mediaCategory;\n            // If explicit longmp4 OR explicit MIME type and not DM target\n            if (realMimeType === types_1.EUploadMimeType.Mp4 && ((!mimeType && !type && target !== 'dm') || longVideo)) {\n                mediaCategory = 'amplify_video';\n            }\n            else {\n                mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n            }\n            return {\n                fileHandle,\n                mediaCategory,\n                fileSize: await (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle),\n                mimeType: realMimeType,\n            };\n        }\n        catch (e) {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n            throw e;\n        }\n    }\n    async mediaChunkedUpload(fileHandle, chunkLength, mediaId, maxConcurrentUploads = 3) {\n        // Send chunk by chunk\n        let chunkIndex = 0;\n        if (maxConcurrentUploads < 1) {\n            throw new RangeError('Bad maxConcurrentUploads parameter.');\n        }\n        // Creating a buffer for doing file stuff (if we don't have one)\n        const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength);\n        // Sliced/filled buffer returned for each part\n        let readBuffer;\n        // Needed to know when we should stop reading the file\n        let nread;\n        // Needed to use the buffer object (file handles always \"remembers\" file position)\n        let offset = 0;\n        [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n        offset += nread;\n        // Handle max concurrent uploads\n        const currentUploads = new Set();\n        // Read buffer until file is completely read\n        while (nread) {\n            const mediaBufferPart = readBuffer.slice(0, nread);\n            // Sent part if part has something inside\n            if (mediaBufferPart.length) {\n                const request = this.post(UPLOAD_ENDPOINT, {\n                    command: 'APPEND',\n                    media_id: mediaId,\n                    segment_index: chunkIndex,\n                    media: mediaBufferPart,\n                }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n                currentUploads.add(request);\n                request.then(() => {\n                    currentUploads.delete(request);\n                });\n                chunkIndex++;\n            }\n            if (currentUploads.size >= maxConcurrentUploads) {\n                // Await for first promise to be finished\n                await Promise.race(currentUploads);\n            }\n            [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n            offset += nread;\n        }\n        await Promise.all([...currentUploads]);\n    }\n}\nexports.default = TwitterApiv1ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}