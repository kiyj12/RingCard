{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _get = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/get.js\").default;\nvar _getPrototypeOf = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/getPrototypeOf.js\").default;\nvar _inherits = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _wrapAsyncGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _awaitAsyncGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _asyncGeneratorDelegate = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncGeneratorDelegate.js\").default;\nvar _asyncIterator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStream = void 0;\nvar events_1 = require(\"events\");\nvar request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nvar types_1 = require(\"../types\");\nvar TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nvar TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nvar basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nvar basicReconnectRetry = function basicReconnectRetry(tryOccurence) {\n  return tryOccurence > basicRetriesAttempt.length ? 901000 : basicRetriesAttempt[tryOccurence - 1] * 1000;\n};\nvar TweetStream = /*#__PURE__*/function (_events_1$EventEmitte, _Symbol$asyncIterator) {\n  _inherits(TweetStream, _events_1$EventEmitte);\n  var _super = _createSuper(TweetStream);\n  function TweetStream(requestData, connection) {\n    var _this2;\n    _classCallCheck(this, TweetStream);\n    _this2 = _super.call(this);\n    _this2.requestData = requestData;\n    _this2.autoReconnect = false;\n    _this2.autoReconnectRetries = 5;\n    // 2 minutes without any Twitter signal\n    _this2.keepAliveTimeoutMs = 1000 * 120;\n    _this2.nextRetryTimeout = basicReconnectRetry;\n    _this2.parser = new TweetStreamParser_1.default();\n    _this2.connectionProcessRunning = false;\n    _this2.onKeepAliveTimeout = _this2.onKeepAliveTimeout.bind(_assertThisInitialized(_this2));\n    _this2.initEventsFromParser();\n    if (connection) {\n      _this2.req = connection.req;\n      _this2.res = connection.res;\n      _this2.originalResponse = connection.originalResponse;\n      _this2.initEventsFromRequest();\n    }\n    return _this2;\n  }\n  _createClass(TweetStream, [{\n    key: \"on\",\n    value: function on(event, handler) {\n      return _get(_getPrototypeOf(TweetStream.prototype), \"on\", this).call(this, event, handler);\n    }\n  }, {\n    key: \"initEventsFromRequest\",\n    value: function initEventsFromRequest() {\n      var _this3 = this;\n      if (!this.req || !this.res) {\n        throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n      }\n      var errorHandler = function errorHandler(err) {\n        _this3.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n        _this3.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.ConnectionError,\n          error: err,\n          message: 'Connection lost or closed by Twitter.'\n        });\n        _this3.onConnectionError();\n      };\n      this.req.on('error', errorHandler);\n      this.res.on('error', errorHandler);\n      // Usually, connection should not be closed by Twitter!\n      this.res.on('close', function () {\n        return errorHandler(new Error('Connection closed by Twitter.'));\n      });\n      this.res.on('data', function (chunk) {\n        _this3.resetKeepAliveTimeout();\n        if (chunk.toString() === '\\r\\n') {\n          return _this3.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n        }\n        _this3.parser.push(chunk.toString());\n      });\n      // Starts the keep alive timeout\n      this.resetKeepAliveTimeout();\n    }\n  }, {\n    key: \"initEventsFromParser\",\n    value: function initEventsFromParser() {\n      var _this4 = this;\n      var payloadIsError = this.requestData.payloadIsError;\n      this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, function (eventData) {\n        if (payloadIsError && payloadIsError(eventData)) {\n          _this4.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n          _this4.emit(types_1.ETwitterStreamEvent.Error, {\n            type: types_1.ETwitterStreamEvent.DataError,\n            error: eventData,\n            message: 'Twitter sent a payload that is detected as an error payload.'\n          });\n        } else {\n          _this4.emit(types_1.ETwitterStreamEvent.Data, eventData);\n        }\n      });\n      this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, function (error) {\n        _this4.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n        _this4.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.TweetParseError,\n          error: error,\n          message: 'Failed to parse stream data.'\n        });\n      });\n    }\n  }, {\n    key: \"resetKeepAliveTimeout\",\n    value: function resetKeepAliveTimeout() {\n      this.unbindKeepAliveTimeout();\n      if (this.keepAliveTimeoutMs !== Infinity) {\n        this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n      }\n    }\n  }, {\n    key: \"onKeepAliveTimeout\",\n    value: function onKeepAliveTimeout() {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n      this.onConnectionError();\n    }\n  }, {\n    key: \"unbindTimeouts\",\n    value: function unbindTimeouts() {\n      this.unbindRetryTimeout();\n      this.unbindKeepAliveTimeout();\n    }\n  }, {\n    key: \"unbindKeepAliveTimeout\",\n    value: function unbindKeepAliveTimeout() {\n      if (this.keepAliveTimeout) {\n        clearTimeout(this.keepAliveTimeout);\n        this.keepAliveTimeout = undefined;\n      }\n    }\n  }, {\n    key: \"unbindRetryTimeout\",\n    value: function unbindRetryTimeout() {\n      if (this.retryTimeout) {\n        clearTimeout(this.retryTimeout);\n        this.retryTimeout = undefined;\n      }\n    }\n  }, {\n    key: \"closeWithoutEmit\",\n    value: function closeWithoutEmit() {\n      this.unbindTimeouts();\n      if (this.res) {\n        this.res.removeAllListeners();\n        // Close response silentely\n        this.res.destroy();\n      }\n      if (this.req) {\n        this.req.removeAllListeners();\n        // Close connection silentely\n        this.req.destroy();\n      }\n    }\n    /** Terminate connection to Twitter. */\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeAllListeners();\n      this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n  }, {\n    key: \"clone\",\n    value: function () {\n      var _clone = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var newRequest, newStream, listenerNames, _iterator, _step, listener, callbacks, _iterator2, _step2, callback;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                newRequest = new request_handler_helper_1.default(this.requestData);\n                _context.next = 3;\n                return newRequest.makeRequestAsStream();\n              case 3:\n                newStream = _context.sent;\n                // Clone attached listeners\n                listenerNames = this.eventNames();\n                _iterator = _createForOfIteratorHelper(listenerNames);\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    listener = _step.value;\n                    callbacks = this.listeners(listener);\n                    _iterator2 = _createForOfIteratorHelper(callbacks);\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        callback = _step2.value;\n                        newStream.on(listener, callback);\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n                return _context.abrupt(\"return\", newStream);\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function clone() {\n        return _clone.apply(this, arguments);\n      }\n      return clone;\n    }() /** Start initial stream connection, setup options on current instance and returns itself. */\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var options,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n                if (typeof options.autoReconnect !== 'undefined') {\n                  this.autoReconnect = options.autoReconnect;\n                }\n                if (typeof options.autoReconnectRetries !== 'undefined') {\n                  this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited' ? Infinity : options.autoReconnectRetries;\n                }\n                if (typeof options.keepAliveTimeout !== 'undefined') {\n                  this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable' ? Infinity : options.keepAliveTimeout;\n                }\n                if (typeof options.nextRetryTimeout !== 'undefined') {\n                  this.nextRetryTimeout = options.nextRetryTimeout;\n                }\n                // Make the connection\n                this.unbindTimeouts();\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this.reconnect();\n              case 9:\n                _context2.next = 20;\n                break;\n              case 11:\n                _context2.prev = 11;\n                _context2.t0 = _context2[\"catch\"](6);\n                this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                  type: types_1.ETwitterStreamEvent.ConnectError,\n                  error: _context2.t0,\n                  message: 'Connect error - Initial connection just failed.'\n                });\n                // Only make a reconnection attempt if autoReconnect is true!\n                // Otherwise, let error be propagated\n                if (!this.autoReconnect) {\n                  _context2.next = 19;\n                  break;\n                }\n                this.makeAutoReconnectRetry(0, _context2.t0);\n                _context2.next = 20;\n                break;\n              case 19:\n                throw _context2.t0;\n              case 20:\n                return _context2.abrupt(\"return\", this);\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[6, 11]]);\n      }));\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }() /** Make a new request to (re)connect to Twitter. */\n  }, {\n    key: \"reconnect\",\n    value: function () {\n      var _reconnect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var initialConnection, _yield$request_handle, req, res, originalResponse;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.connectionProcessRunning) {\n                  _context3.next = 2;\n                  break;\n                }\n                throw new Error('Connection process is already running.');\n              case 2:\n                this.connectionProcessRunning = true;\n                _context3.prev = 3;\n                initialConnection = true;\n                if (this.req) {\n                  initialConnection = false;\n                  this.closeWithoutEmit();\n                }\n                _context3.next = 8;\n                return new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n              case 8:\n                _yield$request_handle = _context3.sent;\n                req = _yield$request_handle.req;\n                res = _yield$request_handle.res;\n                originalResponse = _yield$request_handle.originalResponse;\n                this.req = req;\n                this.res = res;\n                this.originalResponse = originalResponse;\n                this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n                this.parser.reset();\n                this.initEventsFromRequest();\n              case 18:\n                _context3.prev = 18;\n                this.connectionProcessRunning = false;\n                return _context3.finish(18);\n              case 21:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[3,, 18, 21]]);\n      }));\n      function reconnect() {\n        return _reconnect.apply(this, arguments);\n      }\n      return reconnect;\n    }()\n  }, {\n    key: \"onConnectionError\",\n    value: function () {\n      var _onConnectionError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var retryOccurence,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                retryOccurence = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : 0;\n                this.unbindTimeouts();\n                // Close the request if necessary\n                this.closeWithoutEmit();\n                // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n                if (this.autoReconnect) {\n                  _context4.next = 6;\n                  break;\n                }\n                this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n                return _context4.abrupt(\"return\");\n              case 6:\n                if (!(retryOccurence >= this.autoReconnectRetries)) {\n                  _context4.next = 10;\n                  break;\n                }\n                this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n                this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n                return _context4.abrupt(\"return\");\n              case 10:\n                _context4.prev = 10;\n                this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n                _context4.next = 14;\n                return this.reconnect();\n              case 14:\n                _context4.next = 21;\n                break;\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4[\"catch\"](10);\n                this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                  type: types_1.ETwitterStreamEvent.ReconnectError,\n                  error: _context4.t0,\n                  message: \"Reconnect error - \".concat(retryOccurence + 1, \" attempts made yet.\")\n                });\n                this.makeAutoReconnectRetry(retryOccurence, _context4.t0);\n              case 21:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[10, 16]]);\n      }));\n      function onConnectionError() {\n        return _onConnectionError.apply(this, arguments);\n      }\n      return onConnectionError;\n    }()\n  }, {\n    key: \"makeAutoReconnectRetry\",\n    value: function makeAutoReconnectRetry(retryOccurence, error) {\n      var _this5 = this;\n      var nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n      this.retryTimeout = setTimeout(function () {\n        _this5.onConnectionError(retryOccurence + 1);\n      }, nextRetry);\n    }\n  }, {\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var eventCombiner, _yield$_awaitAsyncGen, type, payload;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                eventCombiner = new TweetStreamEventCombiner_1.default(_this);\n                _context5.prev = 1;\n              case 2:\n                if (!true) {\n                  _context5.next = 16;\n                  break;\n                }\n                if (!(!_this.req || _this.req.aborted)) {\n                  _context5.next = 5;\n                  break;\n                }\n                throw new Error('Connection closed');\n              case 5:\n                if (!eventCombiner.hasStack()) {\n                  _context5.next = 7;\n                  break;\n                }\n                return _context5.delegateYield(_asyncGeneratorDelegate(_asyncIterator(eventCombiner.popStack()), _awaitAsyncGenerator), \"t0\", 7);\n              case 7:\n                _context5.next = 9;\n                return _awaitAsyncGenerator(eventCombiner.nextEvent());\n              case 9:\n                _yield$_awaitAsyncGen = _context5.sent;\n                type = _yield$_awaitAsyncGen.type;\n                payload = _yield$_awaitAsyncGen.payload;\n                if (!(type === 'error')) {\n                  _context5.next = 14;\n                  break;\n                }\n                throw payload;\n              case 14:\n                _context5.next = 2;\n                break;\n              case 16:\n                _context5.prev = 16;\n                eventCombiner.destroy();\n                return _context5.finish(16);\n              case 19:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, null, [[1,, 16, 19]]);\n      }))();\n    }\n  }]);\n  return TweetStream;\n}(events_1.EventEmitter, Symbol.asyncIterator);\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","TweetStream","events_1","require","request_handler_helper_1","types_1","TweetStreamEventCombiner_1","TweetStreamParser_1","basicRetriesAttempt","basicReconnectRetry","tryOccurence","length","requestData","connection","autoReconnect","autoReconnectRetries","keepAliveTimeoutMs","nextRetryTimeout","parser","default","connectionProcessRunning","onKeepAliveTimeout","bind","initEventsFromParser","req","res","originalResponse","initEventsFromRequest","event","handler","Error","errorHandler","err","emit","ETwitterStreamEvent","ConnectionError","type","error","message","onConnectionError","on","chunk","resetKeepAliveTimeout","toString","DataKeepAlive","push","payloadIsError","EStreamParserEvent","ParsedData","eventData","DataError","Data","ParseError","TweetParseError","unbindKeepAliveTimeout","Infinity","keepAliveTimeout","setTimeout","ConnectionLost","unbindRetryTimeout","clearTimeout","retryTimeout","unbindTimeouts","removeAllListeners","destroy","ConnectionClosed","closeWithoutEmit","close","newRequest","makeRequestAsStream","newStream","listenerNames","eventNames","listener","callbacks","listeners","callback","options","reconnect","ConnectError","makeAutoReconnectRetry","initialConnection","makeRequestAndResolveWhenReady","Connected","Reconnected","reset","retryOccurence","ReconnectLimitExceeded","ReconnectAttempt","ReconnectError","nextRetry","eventCombiner","aborted","hasStack","popStack","nextEvent","payload","EventEmitter","Symbol","asyncIterator"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/stream/TweetStream.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStream = void 0;\nconst events_1 = require(\"events\");\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nconst types_1 = require(\"../types\");\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length\n    ? 901000\n    : basicRetriesAttempt[tryOccurence - 1] * 1000;\nclass TweetStream extends events_1.EventEmitter {\n    constructor(requestData, connection) {\n        super();\n        this.requestData = requestData;\n        this.autoReconnect = false;\n        this.autoReconnectRetries = 5;\n        // 2 minutes without any Twitter signal\n        this.keepAliveTimeoutMs = 1000 * 120;\n        this.nextRetryTimeout = basicReconnectRetry;\n        this.parser = new TweetStreamParser_1.default();\n        this.connectionProcessRunning = false;\n        this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n        this.initEventsFromParser();\n        if (connection) {\n            this.req = connection.req;\n            this.res = connection.res;\n            this.originalResponse = connection.originalResponse;\n            this.initEventsFromRequest();\n        }\n    }\n    on(event, handler) {\n        return super.on(event, handler);\n    }\n    initEventsFromRequest() {\n        if (!this.req || !this.res) {\n            throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n        }\n        const errorHandler = (err) => {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectionError,\n                error: err,\n                message: 'Connection lost or closed by Twitter.',\n            });\n            this.onConnectionError();\n        };\n        this.req.on('error', errorHandler);\n        this.res.on('error', errorHandler);\n        // Usually, connection should not be closed by Twitter!\n        this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n        this.res.on('data', (chunk) => {\n            this.resetKeepAliveTimeout();\n            if (chunk.toString() === '\\r\\n') {\n                return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n            }\n            this.parser.push(chunk.toString());\n        });\n        // Starts the keep alive timeout\n        this.resetKeepAliveTimeout();\n    }\n    initEventsFromParser() {\n        const payloadIsError = this.requestData.payloadIsError;\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, (eventData) => {\n            if (payloadIsError && payloadIsError(eventData)) {\n                this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                    type: types_1.ETwitterStreamEvent.DataError,\n                    error: eventData,\n                    message: 'Twitter sent a payload that is detected as an error payload.',\n                });\n            }\n            else {\n                this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n            }\n        });\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, (error) => {\n            this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.TweetParseError,\n                error,\n                message: 'Failed to parse stream data.',\n            });\n        });\n    }\n    resetKeepAliveTimeout() {\n        this.unbindKeepAliveTimeout();\n        if (this.keepAliveTimeoutMs !== Infinity) {\n            this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n        }\n    }\n    onKeepAliveTimeout() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n        this.onConnectionError();\n    }\n    unbindTimeouts() {\n        this.unbindRetryTimeout();\n        this.unbindKeepAliveTimeout();\n    }\n    unbindKeepAliveTimeout() {\n        if (this.keepAliveTimeout) {\n            clearTimeout(this.keepAliveTimeout);\n            this.keepAliveTimeout = undefined;\n        }\n    }\n    unbindRetryTimeout() {\n        if (this.retryTimeout) {\n            clearTimeout(this.retryTimeout);\n            this.retryTimeout = undefined;\n        }\n    }\n    closeWithoutEmit() {\n        this.unbindTimeouts();\n        if (this.res) {\n            this.res.removeAllListeners();\n            // Close response silentely\n            this.res.destroy();\n        }\n        if (this.req) {\n            this.req.removeAllListeners();\n            // Close connection silentely\n            this.req.destroy();\n        }\n    }\n    /** Terminate connection to Twitter. */\n    close() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n        this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n    destroy() {\n        this.removeAllListeners();\n        this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n    async clone() {\n        const newRequest = new request_handler_helper_1.default(this.requestData);\n        const newStream = await newRequest.makeRequestAsStream();\n        // Clone attached listeners\n        const listenerNames = this.eventNames();\n        for (const listener of listenerNames) {\n            const callbacks = this.listeners(listener);\n            for (const callback of callbacks) {\n                newStream.on(listener, callback);\n            }\n        }\n        return newStream;\n    }\n    /** Start initial stream connection, setup options on current instance and returns itself. */\n    async connect(options = {}) {\n        if (typeof options.autoReconnect !== 'undefined') {\n            this.autoReconnect = options.autoReconnect;\n        }\n        if (typeof options.autoReconnectRetries !== 'undefined') {\n            this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited'\n                ? Infinity\n                : options.autoReconnectRetries;\n        }\n        if (typeof options.keepAliveTimeout !== 'undefined') {\n            this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable'\n                ? Infinity\n                : options.keepAliveTimeout;\n        }\n        if (typeof options.nextRetryTimeout !== 'undefined') {\n            this.nextRetryTimeout = options.nextRetryTimeout;\n        }\n        // Make the connection\n        this.unbindTimeouts();\n        try {\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectError,\n                error: e,\n                message: 'Connect error - Initial connection just failed.',\n            });\n            // Only make a reconnection attempt if autoReconnect is true!\n            // Otherwise, let error be propagated\n            if (this.autoReconnect) {\n                this.makeAutoReconnectRetry(0, e);\n            }\n            else {\n                throw e;\n            }\n        }\n        return this;\n    }\n    /** Make a new request to (re)connect to Twitter. */\n    async reconnect() {\n        if (this.connectionProcessRunning) {\n            throw new Error('Connection process is already running.');\n        }\n        this.connectionProcessRunning = true;\n        try {\n            let initialConnection = true;\n            if (this.req) {\n                initialConnection = false;\n                this.closeWithoutEmit();\n            }\n            const { req, res, originalResponse } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n            this.req = req;\n            this.res = res;\n            this.originalResponse = originalResponse;\n            this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n            this.parser.reset();\n            this.initEventsFromRequest();\n        }\n        finally {\n            this.connectionProcessRunning = false;\n        }\n    }\n    async onConnectionError(retryOccurence = 0) {\n        this.unbindTimeouts();\n        // Close the request if necessary\n        this.closeWithoutEmit();\n        // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n        if (!this.autoReconnect) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        if (retryOccurence >= this.autoReconnectRetries) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        // If all other conditions fails, do a reconnect attempt\n        try {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ReconnectError,\n                error: e,\n                message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`,\n            });\n            this.makeAutoReconnectRetry(retryOccurence, e);\n        }\n    }\n    makeAutoReconnectRetry(retryOccurence, error) {\n        const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n        this.retryTimeout = setTimeout(() => {\n            this.onConnectionError(retryOccurence + 1);\n        }, nextRetry);\n    }\n    async *[Symbol.asyncIterator]() {\n        const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n        try {\n            while (true) {\n                if (!this.req || this.req.aborted) {\n                    throw new Error('Connection closed');\n                }\n                if (eventCombiner.hasStack()) {\n                    yield* eventCombiner.popStack();\n                }\n                const { type, payload } = await eventCombiner.nextEvent();\n                if (type === 'error') {\n                    throw payload;\n                }\n            }\n        }\n        finally {\n            eventCombiner.destroy();\n        }\n    }\n}\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}