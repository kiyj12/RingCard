{"ast":null,"code":"import _regeneratorRuntime from\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import React from\"react\";import{useNavigate}from\"react-router-dom\";import{TwitterApi}from'twitter-api-v2';import{jsx as _jsx}from\"react/jsx-runtime\";var Oauth=function Oauth(){var CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;var CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;var CLIENT_ID=process.env.REACT_APP_CLIENT_ID;var CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;var CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;var navigate=useNavigate();// 일단 oauth1.0a로 해보자.\n// const client = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\n// OAuth 1.0a (User context)\nvar userClient=new TwitterApi({// appKey: 'consumerAppKey',\nappKey:'S0FVySANFNnlISMw5D1vSE8P0',// appSecret: 'consumerAppSecret',\nappSecret:'KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X',// Following access tokens are not required if you are\n// at part 1 of user-auth process (ask for a request token)\n// or if you want a app-only client (see below)\n// accessToken: 'accessOAuthToken',\naccessToken:'1516353113430851586-Qhjz3YpRRL1yFqSa5PYcyjf5gmJhU1',// accessSecret: 'accessOAuthSecret',\naccessSecret:'accdPvdajDmTYtMybqbj9mOMnTIvbE9SnOuJY8h9uRQjRxlnessOAuthSecret'});function Oauth1a(){return _Oauth1a.apply(this,arguments);}function _Oauth1a(){_Oauth1a=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){var clientA,authLink,a,oauth_token,oauth_token_secret,client;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(CONSUMER_KEY&&CONSUMER_SECRET)){_context.next=9;break;}clientA=new TwitterApi({appKey:CONSUMER_KEY,appSecret:CONSUMER_SECRET});_context.next=4;return clientA.generateAuthLink(CALLBACK_URL);case 4:authLink=_context.sent;// By default, oauth/authenticate are used for auth links, you can change with linkMode\n// property in second parameter to 'authorize' to use oauth/authorize\n// const authLink = await client.generateAuthLink(CALLBACK_URL, { linkMode: 'authorize' });\n// Use URL generated\na=authLink.url;oauth_token=authLink.oauth_token;oauth_token_secret=authLink.oauth_token_secret;// console.log(a);\n// Obtain the persistent tokens\n// Create a client from temporary tokens\nclient=new TwitterApi({appKey:CONSUMER_KEY,appSecret:CONSUMER_SECRET,accessToken:oauth_token,// oauth token from previous step (link generation)\naccessSecret:oauth_token_secret// oauth token secret from previous step (link generation)\n});// Give the PIN to client.login()\n// const { client: loggedClient, accessToken, accessSecret } = await client.login(GIVEN_USER_PIN);\n// loggedClient is an authenticated client in behalf of some user\n// Store accessToken & accessSecret somewhere\ncase 9:case\"end\":return _context.stop();}}},_callee);}));return _Oauth1a.apply(this,arguments);}function ButtonToUserInfoEdit(){function handleClick(e){Oauth1a();}return/*#__PURE__*/_jsx(\"button\",{className:\"user-btn userInfo-btn\",onClick:handleClick,children:/*#__PURE__*/_jsx(\"div\",{className:\"user-btn-text\",children:\"\\uD504\\uB85C\\uD544 \\uBCC0\\uACBD\\uD558\\uAE30\"})});}//   // OAuth2 (app-only or user context)\n//   // Create a client with an already known bearer token\n//   const appOnlyClient = new TwitterApi('bearerToken');\n//   // OR - you can also create a app-only client from your consumer keys -\n//   const appOnlyClientFromConsumer = await userClient.appLogin();\n//   // Oauth2\n// \t// if로 undefined 처리)\n// \tif (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL){\n// \t\tconst client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n// \t\t// Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\n// \t\tconst { url, codeVerifier, state } = client.generateOAuth2AuthLink(CALLBACK_URL, { scope: ['tweet.read', 'users.read', 'offline.access'] });\n// \t\t// Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\n//     // const a = url;\n//     // console.log(a);\n// \t\t// client.generateAuthLink();\n// \t\tnavigate(url);\n//     // console.log(url);\n// \t\t// console.log(url);\n//   app.get('/callback', (req:any, res:any) => {\n//   // Extract state and code from query string\n//   const { state, code } = req.query;\n//   // Get the saved codeVerifier from session\n//   const { codeVerifier, state: sessionState } = req.session;\n//   if (!codeVerifier || !state || !sessionState || !code) {\n//     return res.status(400).send('You denied the app or your session expired!');\n//   }\n//   if (state !== sessionState) {\n//     return res.status(400).send('Stored tokens didnt match!');\n//   }\n//   // Obtain access token\n//   const client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n//   client.loginWithOAuth2({ code, codeVerifier, redirectUri: CALLBACK_URL })\n//     .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {\n//       // {loggedClient} is an authenticated client in behalf of some user\n//       // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.\n//       // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)\n//       // Example request\n//       const { data: userObject } = await loggedClient.v2.me();\n//     })\n//     .catch(() => res.status(403).send('Invalid verifier or access tokens!'));\n// });\n// }\nreturn/*#__PURE__*/_jsx(ButtonToUserInfoEdit,{});};export default Oauth;","map":{"version":3,"names":["React","useNavigate","TwitterApi","Oauth","CONSUMER_KEY","process","env","REACT_APP_CONSUMER_KEY","CONSUMER_SECRET","REACT_APP_CONSUMER_SECRET","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","navigate","userClient","appKey","appSecret","accessToken","accessSecret","Oauth1a","clientA","generateAuthLink","authLink","a","url","oauth_token","oauth_token_secret","client","ButtonToUserInfoEdit","handleClick","e"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/src/pages/auth/Oauth.tsx"],"sourcesContent":["import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { TwitterApi } from 'twitter-api-v2';\n\nconst Oauth= ()=>{\n\n  const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\n  const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\n\tconst navigate = useNavigate();\n\n\n  // 일단 oauth1.0a로 해보자.\n  // const client = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\n\n  // OAuth 1.0a (User context)\n  const userClient = new TwitterApi({\n    // appKey: 'consumerAppKey',\n    appKey: 'S0FVySANFNnlISMw5D1vSE8P0',\n    // appSecret: 'consumerAppSecret',\n    appSecret: 'KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X',\n    // Following access tokens are not required if you are\n    // at part 1 of user-auth process (ask for a request token)\n    // or if you want a app-only client (see below)\n    // accessToken: 'accessOAuthToken',\n    accessToken: '1516353113430851586-Qhjz3YpRRL1yFqSa5PYcyjf5gmJhU1',\n    // accessSecret: 'accessOAuthSecret',\n    accessSecret: 'accdPvdajDmTYtMybqbj9mOMnTIvbE9SnOuJY8h9uRQjRxlnessOAuthSecret',\n  });\n  async function Oauth1a(){\n    if(CONSUMER_KEY && CONSUMER_SECRET){\n      const clientA = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\n\n      const authLink = await clientA.generateAuthLink(CALLBACK_URL);\n\n    // By default, oauth/authenticate are used for auth links, you can change with linkMode\n    // property in second parameter to 'authorize' to use oauth/authorize\n    // const authLink = await client.generateAuthLink(CALLBACK_URL, { linkMode: 'authorize' });\n\n    // Use URL generated\n    const a = authLink.url;\n    const oauth_token = authLink.oauth_token;\n    const oauth_token_secret = authLink.oauth_token_secret;\n    // console.log(a);\n\n    // Obtain the persistent tokens\n  // Create a client from temporary tokens\n    const client = new TwitterApi({\n    appKey: CONSUMER_KEY,\n    appSecret: CONSUMER_SECRET,\n    accessToken: oauth_token, // oauth token from previous step (link generation)\n    accessSecret: oauth_token_secret, // oauth token secret from previous step (link generation)\n  });\n\n// Give the PIN to client.login()\n// const { client: loggedClient, accessToken, accessSecret } = await client.login(GIVEN_USER_PIN);\n// loggedClient is an authenticated client in behalf of some user\n// Store accessToken & accessSecret somewhere\n    }\n  }\n\n  function ButtonToUserInfoEdit() {\n\t\tfunction handleClick(e: any) {\n      Oauth1a();\n    }\n\t\treturn (\n\t\t\t<button className=\"user-btn userInfo-btn\" onClick={handleClick}>\n\t\t\t\t<div className=\"user-btn-text\">프로필 변경하기</div>\n\t\t\t</button>\n\t\t);\n\t}\n\n\n\n//   // OAuth2 (app-only or user context)\n//   // Create a client with an already known bearer token\n//   const appOnlyClient = new TwitterApi('bearerToken');\n//   // OR - you can also create a app-only client from your consumer keys -\n//   const appOnlyClientFromConsumer = await userClient.appLogin();\n\n//   // Oauth2\n// \t// if로 undefined 처리)\n// \tif (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL){\n// \t\tconst client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n\n// \t\t// Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\n// \t\tconst { url, codeVerifier, state } = client.generateOAuth2AuthLink(CALLBACK_URL, { scope: ['tweet.read', 'users.read', 'offline.access'] });\n\n// \t\t// Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\n    \n//     // const a = url;\n//     // console.log(a);\n// \t\t// client.generateAuthLink();\n// \t\tnavigate(url);\n//     // console.log(url);\n// \t\t// console.log(url);\n\n//   app.get('/callback', (req:any, res:any) => {\n//   // Extract state and code from query string\n//   const { state, code } = req.query;\n//   // Get the saved codeVerifier from session\n//   const { codeVerifier, state: sessionState } = req.session;\n\n//   if (!codeVerifier || !state || !sessionState || !code) {\n//     return res.status(400).send('You denied the app or your session expired!');\n//   }\n//   if (state !== sessionState) {\n//     return res.status(400).send('Stored tokens didnt match!');\n//   }\n\n//   // Obtain access token\n//   const client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n\n//   client.loginWithOAuth2({ code, codeVerifier, redirectUri: CALLBACK_URL })\n//     .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {\n//       // {loggedClient} is an authenticated client in behalf of some user\n//       // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.\n//       // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)\n\n//       // Example request\n//       const { data: userObject } = await loggedClient.v2.me();\n//     })\n//     .catch(() => res.status(403).send('Invalid verifier or access tokens!'));\n// });\n\t// }\n\n  return(<ButtonToUserInfoEdit />);\n\n}\n\nexport default Oauth;"],"mappings":"sRAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,UAAU,KAAQ,gBAAgB,CAAC,2CAE5C,GAAMC,MAAK,CAAE,QAAPA,MAAK,EAAM,CAEf,GAAMC,aAAY,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACrD,GAAMC,gBAAe,CAACH,OAAO,CAACC,GAAG,CAACG,yBAAyB,CAC3D,GAAMC,UAAS,CAACL,OAAO,CAACC,GAAG,CAACK,mBAAmB,CAChD,GAAMC,cAAa,CAACP,OAAO,CAACC,GAAG,CAACO,uBAAuB,CACvD,GAAMC,aAAY,CAACT,OAAO,CAACC,GAAG,CAACS,sBAAsB,CACrD,GAAMC,SAAQ,CAAGf,WAAW,EAAE,CAG7B;AACA;AAEA;AACA,GAAMgB,WAAU,CAAG,GAAIf,WAAU,CAAC,CAChC;AACAgB,MAAM,CAAE,2BAA2B,CACnC;AACAC,SAAS,CAAE,oDAAoD,CAC/D;AACA;AACA;AACA;AACAC,WAAW,CAAE,oDAAoD,CACjE;AACAC,YAAY,CAAE,gEAChB,CAAC,CAAC,CAAC,QACYC,QAAO,iIAAtB,uMACKlB,YAAY,EAAII,eAAe,0BAC1Be,OAAO,CAAG,GAAIrB,WAAU,CAAC,CAAEgB,MAAM,CAAEd,YAAY,CAAEe,SAAS,CAAEX,eAAgB,CAAC,CAAC,uBAE7De,QAAO,CAACC,gBAAgB,CAACV,YAAY,CAAC,QAAvDW,QAAQ,eAEhB;AACA;AACA;AAEA;AACMC,CAAC,CAAGD,QAAQ,CAACE,GAAG,CAChBC,WAAW,CAAGH,QAAQ,CAACG,WAAW,CAClCC,kBAAkB,CAAGJ,QAAQ,CAACI,kBAAkB,CACtD;AAEA;AACF;AACQC,MAAM,CAAG,GAAI5B,WAAU,CAAC,CAC9BgB,MAAM,CAAEd,YAAY,CACpBe,SAAS,CAAEX,eAAe,CAC1BY,WAAW,CAAEQ,WAAW,CAAE;AAC1BP,YAAY,CAAEQ,kBAAoB;AACpC,CAAC,CAAC,CAEJ;AACA;AACA;AACA;AAAA,sDAEG,0CAED,QAASE,qBAAoB,EAAG,CAChC,QAASC,YAAW,CAACC,CAAM,CAAE,CACzBX,OAAO,EAAE,CACX,CACF,mBACC,eAAQ,SAAS,CAAC,uBAAuB,CAAC,OAAO,CAAEU,WAAY,uBAC9D,YAAK,SAAS,CAAC,eAAe,yDAAe,EACrC,CAEX,CAID;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACC;AAEC,mBAAO,KAAC,oBAAoB,IAAG,CAEjC,CAAC,CAED,cAAe7B,MAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}