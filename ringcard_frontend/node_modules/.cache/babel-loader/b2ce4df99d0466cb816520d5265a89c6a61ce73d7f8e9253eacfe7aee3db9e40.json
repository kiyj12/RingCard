{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst _1 = __importDefault(require(\".\"));\nconst client_base_1 = __importDefault(require(\"../client.base\"));\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\nconst request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\nclass TwitterApiReadOnly extends client_base_1.default {\n  /* Direct access to subclients */\n  get v1() {\n    if (this._v1) return this._v1;\n    return this._v1 = new client_v1_read_1.default(this);\n  }\n  get v2() {\n    if (this._v2) return this._v2;\n    return this._v2 = new client_v2_read_1.default(this);\n  }\n  /**\n   * Fetch and cache current user.\n   * This method can only be called with a OAuth 1.0a user authentication.\n   *\n   * You can use this method to test if authentication was successful.\n   * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n   */\n  async currentUser() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return await this.getCurrentUserObject(forceFetch);\n  }\n  /**\n   * Fetch and cache current user.\n   * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n   *\n   * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n   * To get a customized `UserV2Result`, use `.v2.me()`\n   *\n   * You can use this method to test if authentication was successful.\n   * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n  async currentUserV2() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return await this.getCurrentUserV2Object(forceFetch);\n  }\n  /* Shortcuts to endpoints */\n  search(what, options) {\n    return this.v2.search(what, options);\n  }\n  /* Authentication */\n  /**\n   * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with consumer keys\n   * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n   *\n   * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n   * // redirect end-user to tokenRequest.url\n   *\n   * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n   * ```\n   */\n  async generateAuthLink() {\n    let oauth_callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'oob';\n    let {\n      authAccessType,\n      linkMode = 'authenticate',\n      forceLogin,\n      screenName\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', {\n      oauth_callback,\n      x_auth_access_type: authAccessType\n    });\n    let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n    if (forceLogin !== undefined) {\n      url += `&force_login=${encodeURIComponent(forceLogin)}`;\n    }\n    if (screenName !== undefined) {\n      url += `&screen_name=${encodeURIComponent(screenName)}`;\n    }\n    if (this._requestMaker.hasPlugins()) {\n      this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n        client: this._requestMaker,\n        url,\n        oauthResult\n      });\n    }\n    return {\n      url,\n      ...oauthResult\n    };\n  }\n  /**\n   * Obtain access to user-based OAuth 1.0 auth.\n   *\n   * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n   * instanciate the new TwitterApi instance.\n   *\n   * ```ts\n   * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n   * const requestClient = new TwitterApi({\n   *  appKey: 'consumer_key',\n   *  appSecret: 'consumer_secret',\n   *  accessToken: 'oauth_token',\n   *  accessSecret: 'oauth_token_secret'\n   * });\n   *\n   * // Use oauth_verifier obtained from callback request\n   * const { client: userClient } = await requestClient.login('oauth_verifier');\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n  async login(oauth_verifier) {\n    const tokens = this.getActiveTokens();\n    if (tokens.type !== 'oauth-1.0a') throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n    const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', {\n      oauth_token: tokens.accessToken,\n      oauth_verifier\n    });\n    const client = new _1.default({\n      appKey: tokens.appKey,\n      appSecret: tokens.appSecret,\n      accessToken: oauth_result.oauth_token,\n      accessSecret: oauth_result.oauth_token_secret\n    }, this._requestMaker.clientSettings);\n    return {\n      accessToken: oauth_result.oauth_token,\n      accessSecret: oauth_result.oauth_token_secret,\n      userId: oauth_result.user_id,\n      screenName: oauth_result.screen_name,\n      client\n    };\n  }\n  /**\n   * Enable application-only authentication.\n   *\n   * To make the request, instanciate TwitterApi with consumer and secret.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n   * const appClient = await requestClient.appLogin();\n   *\n   * // Use {appClient} to make requests\n   * ```\n   */\n  async appLogin() {\n    const tokens = this.getActiveTokens();\n    if (tokens.type !== 'oauth-1.0a') throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n    // Create a client with Basic authentication\n    const basicClient = new _1.default({\n      username: tokens.appKey,\n      password: tokens.appSecret\n    });\n    const res = await basicClient.post('https://api.twitter.com/oauth2/token', {\n      grant_type: 'client_credentials'\n    });\n    // New object with Bearer token\n    return new _1.default(res.access_token, this._requestMaker.clientSettings);\n  }\n  /* OAuth 2 user authentication */\n  /**\n   * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n   *\n   * - **You can only use v2 API endpoints with this authentication method.**\n   * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n   *\n   * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n   *\n   * ```ts\n   * // Instanciate TwitterApi with client ID\n   * const client = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * // Generate a link to callback URL that will gives a token with tweet+user read access\n   * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n   *\n   * // Extract props from generate link\n   * const { url, state, codeVerifier } = link;\n   *\n   * // redirect end-user to url\n   * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n   * ```\n   */\n  generateOAuth2AuthLink(redirectUri) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _a, _b;\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n    const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n    const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n    const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n    const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n    const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n    const url = new URL('https://twitter.com/i/oauth2/authorize');\n    const query = {\n      response_type: 'code',\n      client_id: this._requestMaker.clientId,\n      redirect_uri: redirectUri,\n      state,\n      code_challenge: codeChallenge,\n      code_challenge_method: 's256',\n      scope\n    };\n    request_param_helper_1.default.addQueryParamsToUrl(url, query);\n    const result = {\n      url: url.toString(),\n      state,\n      codeVerifier,\n      codeChallenge\n    };\n    if (this._requestMaker.hasPlugins()) {\n      this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n        client: this._requestMaker,\n        result,\n        redirectUri\n      });\n    }\n    return result;\n  }\n  /**\n   * Obtain access to user-based OAuth 2.0 auth.\n   *\n   * After user is redirect from your callback, use obtained code to\n   * instanciate the new TwitterApi instance.\n   *\n   * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n   *\n   * ```ts\n   * // Use the saved codeVerifier associated to state (present in query string of callback)\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n   *  code: 'codeFromQueryString',\n   *  // the same URL given to generateOAuth2AuthLink\n   *  redirectUri,\n   *  // the verifier returned by generateOAuth2AuthLink\n   *  codeVerifier,\n   * });\n   *\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * // {refreshToken} is defined if 'offline.access' is in scope.\n   * ```\n   */\n  async loginWithOAuth2(_ref) {\n    let {\n      code,\n      codeVerifier,\n      redirectUri\n    } = _ref;\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n    const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n      code,\n      code_verifier: codeVerifier,\n      redirect_uri: redirectUri,\n      grant_type: 'authorization_code',\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret\n    });\n    return this.parseOAuth2AccessTokenResult(accessTokenResult);\n  }\n  /**\n   * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n   *\n   * ```ts\n   * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n   *\n   * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n   * // {userClient} is a valid {TwitterApi} object you can use for future requests\n   * ```\n   */\n  async refreshOAuth2Token(refreshToken) {\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n    const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n      refresh_token: refreshToken,\n      grant_type: 'refresh_token',\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret\n    });\n    return this.parseOAuth2AccessTokenResult(accessTokenResult);\n  }\n  /**\n   * Revoke a single user-based OAuth 2.0 token.\n   *\n   * You must specify its source, access token (directly after login)\n   * or refresh token (if you've called `.refreshOAuth2Token` before).\n   */\n  async revokeOAuth2Token(token) {\n    let tokenType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'access_token';\n    if (!this._requestMaker.clientId) {\n      throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n    }\n    return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n      client_id: this._requestMaker.clientId,\n      client_secret: this._requestMaker.clientSecret,\n      token,\n      token_type_hint: tokenType\n    });\n  }\n  parseOAuth2AccessTokenResult(result) {\n    const client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n    const scope = result.scope.split(' ').filter(e => e);\n    return {\n      client,\n      expiresIn: result.expires_in,\n      accessToken: result.access_token,\n      scope,\n      refreshToken: result.refresh_token\n    };\n  }\n}\nexports.default = TwitterApiReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_1","require","client_base_1","client_v1_read_1","client_v2_read_1","oauth2_helper_1","request_param_helper_1","TwitterApiReadOnly","default","v1","_v1","v2","_v2","currentUser","forceFetch","getCurrentUserObject","currentUserV2","getCurrentUserV2Object","search","what","options","generateAuthLink","oauth_callback","authAccessType","linkMode","forceLogin","screenName","oauthResult","post","x_auth_access_type","url","encodeURIComponent","oauth_token","undefined","_requestMaker","hasPlugins","applyPluginMethod","client","login","oauth_verifier","tokens","getActiveTokens","type","Error","oauth_result","accessToken","appKey","appSecret","accessSecret","oauth_token_secret","clientSettings","userId","user_id","screen_name","appLogin","basicClient","username","password","res","grant_type","access_token","generateOAuth2AuthLink","redirectUri","_a","_b","clientId","state","OAuth2Helper","generateRandomString","codeVerifier","getCodeVerifier","codeChallenge","getCodeChallengeFromVerifier","rawScope","scope","Array","isArray","join","URL","query","response_type","client_id","redirect_uri","code_challenge","code_challenge_method","addQueryParamsToUrl","result","toString","loginWithOAuth2","code","accessTokenResult","code_verifier","client_secret","clientSecret","parseOAuth2AccessTokenResult","refreshOAuth2Token","refreshToken","refresh_token","revokeOAuth2Token","token","tokenType","token_type_hint","split","filter","e","expiresIn","expires_in"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/client/readonly.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = __importDefault(require(\".\"));\nconst client_base_1 = __importDefault(require(\"../client.base\"));\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\nconst request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\nclass TwitterApiReadOnly extends client_base_1.default {\n    /* Direct access to subclients */\n    get v1() {\n        if (this._v1)\n            return this._v1;\n        return this._v1 = new client_v1_read_1.default(this);\n    }\n    get v2() {\n        if (this._v2)\n            return this._v2;\n        return this._v2 = new client_v2_read_1.default(this);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentication.\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n    async currentUser(forceFetch = false) {\n        return await this.getCurrentUserObject(forceFetch);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n     *\n     * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    async currentUserV2(forceFetch = false) {\n        return await this.getCurrentUserV2Object(forceFetch);\n    }\n    /* Shortcuts to endpoints */\n    search(what, options) {\n        return this.v2.search(what, options);\n    }\n    /* Authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n    async generateAuthLink(oauth_callback = 'oob', { authAccessType, linkMode = 'authenticate', forceLogin, screenName, } = {}) {\n        const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', { oauth_callback, x_auth_access_type: authAccessType });\n        let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n        if (forceLogin !== undefined) {\n            url += `&force_login=${encodeURIComponent(forceLogin)}`;\n        }\n        if (screenName !== undefined) {\n            url += `&screen_name=${encodeURIComponent(screenName)}`;\n        }\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n                client: this._requestMaker,\n                url,\n                oauthResult,\n            });\n        }\n        return {\n            url,\n            ...oauthResult,\n        };\n    }\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async login(oauth_verifier) {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n        const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', { oauth_token: tokens.accessToken, oauth_verifier });\n        const client = new _1.default({\n            appKey: tokens.appKey,\n            appSecret: tokens.appSecret,\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n        }, this._requestMaker.clientSettings);\n        return {\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n            userId: oauth_result.user_id,\n            screenName: oauth_result.screen_name,\n            client,\n        };\n    }\n    /**\n     * Enable application-only authentication.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n    async appLogin() {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n        // Create a client with Basic authentication\n        const basicClient = new _1.default({ username: tokens.appKey, password: tokens.appSecret });\n        const res = await basicClient.post('https://api.twitter.com/oauth2/token', { grant_type: 'client_credentials' });\n        // New object with Bearer token\n        return new _1.default(res.access_token, this._requestMaker.clientSettings);\n    }\n    /* OAuth 2 user authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * - **You can only use v2 API endpoints with this authentication method.**\n     * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n     *\n     * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n    generateOAuth2AuthLink(redirectUri, options = {}) {\n        var _a, _b;\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n        const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n        const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n        const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n        const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n        const url = new URL('https://twitter.com/i/oauth2/authorize');\n        const query = {\n            response_type: 'code',\n            client_id: this._requestMaker.clientId,\n            redirect_uri: redirectUri,\n            state,\n            code_challenge: codeChallenge,\n            code_challenge_method: 's256',\n            scope,\n        };\n        request_param_helper_1.default.addQueryParamsToUrl(url, query);\n        const result = {\n            url: url.toString(),\n            state,\n            codeVerifier,\n            codeChallenge,\n        };\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n                client: this._requestMaker,\n                result,\n                redirectUri,\n            });\n        }\n        return result;\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n    async loginWithOAuth2({ code, codeVerifier, redirectUri }) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            code,\n            code_verifier: codeVerifier,\n            redirect_uri: redirectUri,\n            grant_type: 'authorization_code',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async refreshOAuth2Token(refreshToken) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n    async revokeOAuth2Token(token, tokenType = 'access_token') {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n            token,\n            token_type_hint: tokenType,\n        });\n    }\n    parseOAuth2AccessTokenResult(result) {\n        const client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n        const scope = result.scope.split(' ').filter(e => e);\n        return {\n            client,\n            expiresIn: result.expires_in,\n            accessToken: result.access_token,\n            scope,\n            refreshToken: result.refresh_token,\n        };\n    }\n}\nexports.default = TwitterApiReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}