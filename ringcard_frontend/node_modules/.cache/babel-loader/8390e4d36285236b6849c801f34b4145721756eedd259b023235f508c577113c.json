{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _excluded = [\"asPaginator\"],\n  _excluded2 = [\"asPaginator\"],\n  _excluded3 = [\"asPaginator\"],\n  _excluded4 = [\"asPaginator\"],\n  _excluded5 = [\"autoConnect\"],\n  _excluded6 = [\"autoConnect\"];\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nvar globals_1 = require(\"../globals\");\nvar paginators_1 = require(\"../paginators\");\nvar client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nvar user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nvar helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nvar TwitterApiv2ReadOnly = /*#__PURE__*/function (_client_subclient_1$d) {\n  _inherits(TwitterApiv2ReadOnly, _client_subclient_1$d);\n  var _super = _createSuper(TwitterApiv2ReadOnly);\n  function TwitterApiv2ReadOnly() {\n    var _this;\n    _classCallCheck(this, TwitterApiv2ReadOnly);\n    _this = _super.apply(this, arguments);\n    _this._prefix = globals_1.API_V2_PREFIX;\n    return _this;\n  }\n  /* Sub-clients */\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n  _createClass(TwitterApiv2ReadOnly, [{\n    key: \"labs\",\n    get: function get() {\n      if (this._labs) return this._labs;\n      return this._labs = new client_v2_labs_read_1.default(this);\n    }\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(queryOrOptions) {\n        var options,\n          query,\n          realOptions,\n          queryParams,\n          initialRq,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n                realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n                queryParams = _objectSpread(_objectSpread({}, realOptions), {}, {\n                  query: query\n                });\n                _context.next = 6;\n                return this.get('tweets/search/recent', queryParams, {\n                  fullResponse: true\n                });\n              case 6:\n                initialRq = _context.sent;\n                return _context.abrupt(\"return\", new paginators_1.TweetSearchRecentV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function search(_x) {\n        return _search.apply(this, arguments);\n      }\n      return search;\n    }()\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n  }, {\n    key: \"searchAll\",\n    value: function () {\n      var _searchAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query) {\n        var options,\n          queryParams,\n          initialRq,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                queryParams = _objectSpread(_objectSpread({}, options), {}, {\n                  query: query\n                });\n                _context2.next = 4;\n                return this.get('tweets/search/all', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context2.sent;\n                return _context2.abrupt(\"return\", new paginators_1.TweetSearchAllV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function searchAll(_x2) {\n        return _searchAll.apply(this, arguments);\n      }\n      return searchAll;\n    }()\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n  }, {\n    key: \"singleTweet\",\n    value: function singleTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/:id', options, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n  }, {\n    key: \"tweets\",\n    value: function tweets(tweetIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets', _objectSpread({\n        ids: tweetIds\n      }, options));\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n  }, {\n    key: \"tweetCountRecent\",\n    value: function tweetCountRecent(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/counts/recent', _objectSpread({\n        query: query\n      }, options));\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n  }, {\n    key: \"tweetCountAll\",\n    value: function tweetCountAll(query) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('tweets/counts/all', _objectSpread({\n        query: query\n      }, options));\n    }\n  }, {\n    key: \"tweetRetweetedBy\",\n    value: function () {\n      var _tweetRetweetedBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tweetId) {\n        var options,\n          asPaginator,\n          parameters,\n          initialRq,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, _excluded);\n                _context3.next = 4;\n                return this.get('tweets/:id/retweeted_by', parameters, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n              case 4:\n                initialRq = _context3.sent;\n                if (asPaginator) {\n                  _context3.next = 7;\n                  break;\n                }\n                return _context3.abrupt(\"return\", initialRq.data);\n              case 7:\n                return _context3.abrupt(\"return\", new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function tweetRetweetedBy(_x3) {\n        return _tweetRetweetedBy.apply(this, arguments);\n      }\n      return tweetRetweetedBy;\n    }()\n  }, {\n    key: \"tweetLikedBy\",\n    value: function () {\n      var _tweetLikedBy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(tweetId) {\n        var options,\n          asPaginator,\n          parameters,\n          initialRq,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, _excluded2);\n                _context4.next = 4;\n                return this.get('tweets/:id/liking_users', parameters, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n              case 4:\n                initialRq = _context4.sent;\n                if (asPaginator) {\n                  _context4.next = 7;\n                  break;\n                }\n                return _context4.abrupt(\"return\", initialRq.data);\n              case 7:\n                return _context4.abrupt(\"return\", new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function tweetLikedBy(_x4) {\n        return _tweetLikedBy.apply(this, arguments);\n      }\n      return tweetLikedBy;\n    }()\n    /**\n     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n     * This endpoint returns up to the last 3200 Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n     *\n     * OAuth 2 scopes: `tweet.read` `users.read`\n     */\n  }, {\n    key: \"homeTimeline\",\n    value: function () {\n      var _homeTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var options,\n          meUser,\n          initialRq,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n                _context5.next = 3;\n                return this.getCurrentUserV2Object();\n              case 3:\n                meUser = _context5.sent;\n                _context5.next = 6;\n                return this.get('users/:id/timelines/reverse_chronological', options, {\n                  fullResponse: true,\n                  params: {\n                    id: meUser.data.id\n                  }\n                });\n              case 6:\n                initialRq = _context5.sent;\n                return _context5.abrupt(\"return\", new paginators_1.TweetHomeTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: meUser.data.id\n                  }\n                }));\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function homeTimeline() {\n        return _homeTimeline.apply(this, arguments);\n      }\n      return homeTimeline;\n    }()\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n  }, {\n    key: \"userTimeline\",\n    value: function () {\n      var _userTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(userId) {\n        var options,\n          initialRq,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                _context6.next = 3;\n                return this.get('users/:id/tweets', options, {\n                  fullResponse: true,\n                  params: {\n                    id: userId\n                  }\n                });\n              case 3:\n                initialRq = _context6.sent;\n                return _context6.abrupt(\"return\", new paginators_1.TweetUserTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: userId\n                  }\n                }));\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function userTimeline(_x5) {\n        return _userTimeline.apply(this, arguments);\n      }\n      return userTimeline;\n    }()\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n  }, {\n    key: \"userMentionTimeline\",\n    value: function () {\n      var _userMentionTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(userId) {\n        var options,\n          initialRq,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n                _context7.next = 3;\n                return this.get('users/:id/mentions', options, {\n                  fullResponse: true,\n                  params: {\n                    id: userId\n                  }\n                });\n              case 3:\n                initialRq = _context7.sent;\n                return _context7.abrupt(\"return\", new paginators_1.TweetUserMentionTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: userId\n                  }\n                }));\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function userMentionTimeline(_x6) {\n        return _userMentionTimeline.apply(this, arguments);\n      }\n      return userMentionTimeline;\n    }()\n    /**\n     * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n     *\n     * OAuth2 scopes: `users.read` `tweet.read`\n     */\n  }, {\n    key: \"quotes\",\n    value: function () {\n      var _quotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(tweetId) {\n        var options,\n          initialRq,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                _context8.next = 3;\n                return this.get('tweets/:id/quote_tweets', options, {\n                  fullResponse: true,\n                  params: {\n                    id: tweetId\n                  }\n                });\n              case 3:\n                initialRq = _context8.sent;\n                return _context8.abrupt(\"return\", new paginators_1.QuotedTweetsTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: tweetId\n                  }\n                }));\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function quotes(_x7) {\n        return _quotes.apply(this, arguments);\n      }\n      return quotes;\n    }()\n    /* Bookmarks */\n    /**\n     * Allows you to get information about a authenticated user’s 800 most recent bookmarked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n     */\n  }, {\n    key: \"bookmarks\",\n    value: function () {\n      var _bookmarks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var options,\n          user,\n          initialRq,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                _context9.next = 3;\n                return this.getCurrentUserV2Object();\n              case 3:\n                user = _context9.sent;\n                _context9.next = 6;\n                return this.get('users/:id/bookmarks', options, {\n                  fullResponse: true,\n                  params: {\n                    id: user.data.id\n                  }\n                });\n              case 6:\n                initialRq = _context9.sent;\n                return _context9.abrupt(\"return\", new paginators_1.TweetBookmarksTimelineV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: options,\n                  sharedParams: {\n                    id: user.data.id\n                  }\n                }));\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function bookmarks() {\n        return _bookmarks.apply(this, arguments);\n      }\n      return bookmarks;\n    }()\n    /* Users */\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n  }, {\n    key: \"me\",\n    value: function me() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n  }, {\n    key: \"user\",\n    value: function user(userId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('users/:id', options, {\n        params: {\n          id: userId\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n  }, {\n    key: \"users\",\n    value: function users(userIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n      return this.get('users', _objectSpread(_objectSpread({}, options), {}, {\n        ids: ids\n      }));\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n  }, {\n    key: \"userByUsername\",\n    value: function userByUsername(username) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('users/by/username/:username', options, {\n        params: {\n          username: username\n        }\n      });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n  }, {\n    key: \"usersByUsernames\",\n    value: function usersByUsernames(usernames) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n      return this.get('users/by', _objectSpread(_objectSpread({}, options), {}, {\n        usernames: usernames\n      }));\n    }\n  }, {\n    key: \"followers\",\n    value: function () {\n      var _followers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(userId) {\n        var options,\n          asPaginator,\n          parameters,\n          params,\n          initialRq,\n          _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, _excluded3);\n                params = {\n                  id: userId\n                };\n                if (asPaginator) {\n                  _context10.next = 5;\n                  break;\n                }\n                return _context10.abrupt(\"return\", this.get('users/:id/followers', parameters, {\n                  params: params\n                }));\n              case 5:\n                _context10.next = 7;\n                return this.get('users/:id/followers', parameters, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 7:\n                initialRq = _context10.sent;\n                return _context10.abrupt(\"return\", new user_paginator_v2_1.UserFollowersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: params\n                }));\n              case 9:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function followers(_x8) {\n        return _followers.apply(this, arguments);\n      }\n      return followers;\n    }()\n  }, {\n    key: \"following\",\n    value: function () {\n      var _following = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(userId) {\n        var options,\n          asPaginator,\n          parameters,\n          params,\n          initialRq,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};\n                asPaginator = options.asPaginator, parameters = _objectWithoutProperties(options, _excluded4);\n                params = {\n                  id: userId\n                };\n                if (asPaginator) {\n                  _context11.next = 5;\n                  break;\n                }\n                return _context11.abrupt(\"return\", this.get('users/:id/following', parameters, {\n                  params: params\n                }));\n              case 5:\n                _context11.next = 7;\n                return this.get('users/:id/following', parameters, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 7:\n                initialRq = _context11.sent;\n                return _context11.abrupt(\"return\", new user_paginator_v2_1.UserFollowingV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: parameters,\n                  sharedParams: params\n                }));\n              case 9:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function following(_x9) {\n        return _following.apply(this, arguments);\n      }\n      return following;\n    }()\n    /**\n     * Allows you to get information about a user’s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n  }, {\n    key: \"userLikedTweets\",\n    value: function () {\n      var _userLikedTweets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(userId) {\n        var options,\n          params,\n          initialRq,\n          _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {};\n                params = {\n                  id: userId\n                };\n                _context12.next = 4;\n                return this.get('users/:id/liked_tweets', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context12.sent;\n                return _context12.abrupt(\"return\", new paginators_1.TweetV2UserLikedTweetsPaginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function userLikedTweets(_x10) {\n        return _userLikedTweets.apply(this, arguments);\n      }\n      return userLikedTweets;\n    }()\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n  }, {\n    key: \"userBlockingUsers\",\n    value: function () {\n      var _userBlockingUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(userId) {\n        var options,\n          params,\n          initialRq,\n          _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};\n                params = {\n                  id: userId\n                };\n                _context13.next = 4;\n                return this.get('users/:id/blocking', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context13.sent;\n                return _context13.abrupt(\"return\", new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function userBlockingUsers(_x11) {\n        return _userBlockingUsers.apply(this, arguments);\n      }\n      return userBlockingUsers;\n    }()\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n  }, {\n    key: \"userMutingUsers\",\n    value: function () {\n      var _userMutingUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(userId) {\n        var options,\n          params,\n          initialRq,\n          _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};\n                params = {\n                  id: userId\n                };\n                _context14.next = 4;\n                return this.get('users/:id/muting', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context14.sent;\n                return _context14.abrupt(\"return\", new user_paginator_v2_1.UserMutingUsersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function userMutingUsers(_x12) {\n        return _userMutingUsers.apply(this, arguments);\n      }\n      return userMutingUsers;\n    }()\n    /* Lists */\n    /**\n     * Returns the details of a specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n     */\n  }, {\n    key: \"list\",\n    value: function list(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('lists/:id', options, {\n        params: {\n          id: id\n        }\n      });\n    }\n    /**\n     * Returns all Lists owned by the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n     */\n  }, {\n    key: \"listsOwned\",\n    value: function () {\n      var _listsOwned = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(userId) {\n        var options,\n          params,\n          initialRq,\n          _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};\n                params = {\n                  id: userId\n                };\n                _context15.next = 4;\n                return this.get('users/:id/owned_lists', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context15.sent;\n                return _context15.abrupt(\"return\", new paginators_1.UserOwnedListsV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function listsOwned(_x13) {\n        return _listsOwned.apply(this, arguments);\n      }\n      return listsOwned;\n    }()\n    /**\n     * Returns all Lists a specified user is a member of.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n     */\n  }, {\n    key: \"listMemberships\",\n    value: function () {\n      var _listMemberships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(userId) {\n        var options,\n          params,\n          initialRq,\n          _args16 = arguments;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : {};\n                params = {\n                  id: userId\n                };\n                _context16.next = 4;\n                return this.get('users/:id/list_memberships', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context16.sent;\n                return _context16.abrupt(\"return\", new paginators_1.UserListMembershipsV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function listMemberships(_x14) {\n        return _listMemberships.apply(this, arguments);\n      }\n      return listMemberships;\n    }()\n    /**\n     * Returns all Lists a specified user follows.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n     */\n  }, {\n    key: \"listFollowed\",\n    value: function () {\n      var _listFollowed = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(userId) {\n        var options,\n          params,\n          initialRq,\n          _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : {};\n                params = {\n                  id: userId\n                };\n                _context17.next = 4;\n                return this.get('users/:id/followed_lists', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context17.sent;\n                return _context17.abrupt(\"return\", new paginators_1.UserListFollowedV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function listFollowed(_x15) {\n        return _listFollowed.apply(this, arguments);\n      }\n      return listFollowed;\n    }()\n    /**\n     * Returns a list of Tweets from the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n     */\n  }, {\n    key: \"listTweets\",\n    value: function () {\n      var _listTweets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(listId) {\n        var options,\n          params,\n          initialRq,\n          _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                options = _args18.length > 1 && _args18[1] !== undefined ? _args18[1] : {};\n                params = {\n                  id: listId\n                };\n                _context18.next = 4;\n                return this.get('lists/:id/tweets', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context18.sent;\n                return _context18.abrupt(\"return\", new paginators_1.TweetV2ListTweetsPaginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function listTweets(_x16) {\n        return _listTweets.apply(this, arguments);\n      }\n      return listTweets;\n    }()\n    /**\n     * Returns a list of users who are members of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n     */\n  }, {\n    key: \"listMembers\",\n    value: function () {\n      var _listMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(listId) {\n        var options,\n          params,\n          initialRq,\n          _args19 = arguments;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                options = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : {};\n                params = {\n                  id: listId\n                };\n                _context19.next = 4;\n                return this.get('lists/:id/members', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context19.sent;\n                return _context19.abrupt(\"return\", new user_paginator_v2_1.UserListMembersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function listMembers(_x17) {\n        return _listMembers.apply(this, arguments);\n      }\n      return listMembers;\n    }()\n    /**\n     * Returns a list of users who are followers of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n     */\n  }, {\n    key: \"listFollowers\",\n    value: function () {\n      var _listFollowers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(listId) {\n        var options,\n          params,\n          initialRq,\n          _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                options = _args20.length > 1 && _args20[1] !== undefined ? _args20[1] : {};\n                params = {\n                  id: listId\n                };\n                _context20.next = 4;\n                return this.get('lists/:id/followers', options, {\n                  fullResponse: true,\n                  params: params\n                });\n              case 4:\n                initialRq = _context20.sent;\n                return _context20.abrupt(\"return\", new user_paginator_v2_1.UserListFollowersV2Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: _objectSpread({}, options),\n                  sharedParams: params\n                }));\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function listFollowers(_x18) {\n        return _listFollowers.apply(this, arguments);\n      }\n      return listFollowers;\n    }()\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n  }, {\n    key: \"space\",\n    value: function space(spaceId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/:id', options, {\n        params: {\n          id: spaceId\n        }\n      });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n  }, {\n    key: \"spaces\",\n    value: function spaces(spaceIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces', _objectSpread({\n        ids: spaceIds\n      }, options));\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n  }, {\n    key: \"spacesByCreators\",\n    value: function spacesByCreators(creatorIds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/by/creator_ids', _objectSpread({\n        user_ids: creatorIds\n      }, options));\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n  }, {\n    key: \"searchSpaces\",\n    value: function searchSpaces(options) {\n      return this.get('spaces/search', options);\n    }\n    /**\n    * Returns a list of user who purchased a ticket to the requested Space.\n    * You must authenticate the request using the Access Token of the creator of the requested Space.\n    *\n    * **OAuth 2.0 Access Token required**\n    *\n    * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n    *\n    * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n    */\n  }, {\n    key: \"spaceBuyers\",\n    value: function spaceBuyers(spaceId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('spaces/:id/buyers', options, {\n        params: {\n          id: spaceId\n        }\n      });\n    }\n  }, {\n    key: \"searchStream\",\n    value: function searchStream() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        autoConnect = _ref.autoConnect,\n        options = _objectWithoutProperties(_ref, _excluded5);\n      return this.getStream('tweets/search/stream', options, {\n        payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n        autoConnect: autoConnect\n      });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n  }, {\n    key: \"streamRules\",\n    value: function streamRules() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('tweets/search/stream/rules', options);\n    }\n  }, {\n    key: \"updateStreamRules\",\n    value: function updateStreamRules(options) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.post('tweets/search/stream/rules', options, {\n        query: query\n      });\n    }\n  }, {\n    key: \"sampleStream\",\n    value: function sampleStream() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        autoConnect = _ref2.autoConnect,\n        options = _objectWithoutProperties(_ref2, _excluded6);\n      return this.getStream('tweets/sample/stream', options, {\n        payloadIsError: helpers_1.isTweetStreamV2ErrorPayload,\n        autoConnect: autoConnect\n      });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n  }, {\n    key: \"complianceJobs\",\n    value: function complianceJobs(options) {\n      return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n  }, {\n    key: \"complianceJob\",\n    value: function complianceJob(jobId) {\n      return this.get('compliance/jobs/:id', undefined, {\n        params: {\n          id: jobId\n        }\n      });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n  }, {\n    key: \"sendComplianceJob\",\n    value: function () {\n      var _sendComplianceJob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(jobParams) {\n        var job, rawIdsBody;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.post('compliance/jobs', {\n                  type: jobParams.type,\n                  name: jobParams.name\n                });\n              case 2:\n                job = _context21.sent;\n                // Send the IDs\n                rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n')); // Upload the IDs\n                _context21.next = 6;\n                return this.put(job.data.upload_url, rawIdsBody, {\n                  forceBodyMode: 'raw',\n                  enableAuth: false,\n                  headers: {\n                    'Content-Type': 'text/plain'\n                  },\n                  prefix: ''\n                });\n              case 6:\n                return _context21.abrupt(\"return\", job);\n              case 7:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function sendComplianceJob(_x19) {\n        return _sendComplianceJob.apply(this, arguments);\n      }\n      return sendComplianceJob;\n    }()\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n  }, {\n    key: \"complianceJobResult\",\n    value: function () {\n      var _complianceJobResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22(job) {\n        var runningJob, result;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                runningJob = job;\n              case 1:\n                if (!(runningJob.status !== 'complete')) {\n                  _context22.next = 11;\n                  break;\n                }\n                if (!(runningJob.status === 'expired' || runningJob.status === 'failed')) {\n                  _context22.next = 4;\n                  break;\n                }\n                throw new Error('Job failed to be completed.');\n              case 4:\n                _context22.next = 6;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 3500);\n                });\n              case 6:\n                _context22.next = 8;\n                return this.complianceJob(job.id);\n              case 8:\n                runningJob = _context22.sent.data;\n                _context22.next = 1;\n                break;\n              case 11:\n                _context22.next = 13;\n                return this.get(job.download_url, undefined, {\n                  enableAuth: false,\n                  prefix: ''\n                });\n              case 13:\n                result = _context22.sent;\n                return _context22.abrupt(\"return\", result.trim().split('\\n').filter(function (line) {\n                  return line;\n                }).map(function (line) {\n                  return JSON.parse(line);\n                }));\n              case 15:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n      function complianceJobResult(_x20) {\n        return _complianceJobResult.apply(this, arguments);\n      }\n      return complianceJobResult;\n    }()\n  }]);\n  return TwitterApiv2ReadOnly;\n}(client_subclient_1.default);\nexports.default = TwitterApiv2ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","paginators_1","client_v2_labs_read_1","user_paginator_v2_1","helpers_1","TwitterApiv2ReadOnly","arguments","_prefix","API_V2_PREFIX","_labs","default","queryOrOptions","options","query","undefined","realOptions","queryParams","get","fullResponse","initialRq","TweetSearchRecentV2Paginator","realData","data","rateLimit","instance","TweetSearchAllV2Paginator","tweetId","params","id","tweetIds","ids","asPaginator","parameters","TweetRetweetersUsersV2Paginator","sharedParams","TweetLikingUsersV2Paginator","getCurrentUserV2Object","meUser","TweetHomeTimelineV2Paginator","userId","TweetUserTimelineV2Paginator","TweetUserMentionTimelineV2Paginator","QuotedTweetsTimelineV2Paginator","user","TweetBookmarksTimelineV2Paginator","userIds","Array","isArray","join","username","usernames","UserFollowersV2Paginator","UserFollowingV2Paginator","TweetV2UserLikedTweetsPaginator","UserBlockingUsersV2Paginator","UserMutingUsersV2Paginator","UserOwnedListsV2Paginator","UserListMembershipsV2Paginator","UserListFollowedV2Paginator","listId","TweetV2ListTweetsPaginator","UserListMembersV2Paginator","UserListFollowersV2Paginator","spaceId","spaceIds","creatorIds","user_ids","autoConnect","getStream","payloadIsError","isTweetStreamV2ErrorPayload","post","jobId","jobParams","type","name","job","rawIdsBody","Buffer","from","put","upload_url","forceBodyMode","enableAuth","headers","prefix","runningJob","status","Error","Promise","resolve","setTimeout","complianceJob","download_url","result","trim","split","filter","line","map","JSON","parse"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v2/client.v2.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst paginators_1 = require(\"../paginators\");\nconst client_v2_labs_read_1 = __importDefault(require(\"../v2-labs/client.v2.labs.read\"));\nconst user_paginator_v2_1 = require(\"../paginators/user.paginator.v2\");\nconst helpers_1 = require(\"../helpers\");\n/**\n * Base Twitter v2 client with only read right.\n */\nclass TwitterApiv2ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_read_1.default(this);\n    }\n    async search(queryOrOptions, options = {}) {\n        const query = typeof queryOrOptions === 'string' ? queryOrOptions : undefined;\n        const realOptions = typeof queryOrOptions === 'object' && queryOrOptions !== null ? queryOrOptions : options;\n        const queryParams = { ...realOptions, query };\n        const initialRq = await this.get('tweets/search/recent', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchRecentV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     *\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/search/api-reference/get-tweets-search-all\n     */\n    async searchAll(query, options = {}) {\n        const queryParams = { ...options, query };\n        const initialRq = await this.get('tweets/search/all', queryParams, { fullResponse: true });\n        return new paginators_1.TweetSearchAllV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a variety of information about a single Tweet specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets-id\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('tweets/:id', options, { params: { id: tweetId } });\n    }\n    /**\n     * Returns a variety of information about tweets specified by list of IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/lookup/api-reference/get-tweets\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    tweets(tweetIds, options = {}) {\n        return this.get('tweets', { ids: tweetIds, ...options });\n    }\n    /**\n     * The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.\n     * OAuth2 Bearer auth only.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-recent\n     */\n    tweetCountRecent(query, options = {}) {\n        return this.get('tweets/counts/recent', { query, ...options });\n    }\n    /**\n     * This endpoint is only available to those users who have been approved for the Academic Research product track.\n     * The full-archive search endpoint returns the complete history of public Tweets matching a search query;\n     * since the first Tweet was created March 26, 2006.\n     * OAuth2 Bearer auth only.\n     * **This endpoint has pagination, yet it is not supported by bundled paginators. Use `next_token` to fetch next page.**\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/counts/api-reference/get-tweets-counts-all\n     */\n    tweetCountAll(query, options = {}) {\n        return this.get('tweets/counts/all', { query, ...options });\n    }\n    async tweetRetweetedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/retweeted_by', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetRetweetersUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    async tweetLikedBy(tweetId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const initialRq = await this.get('tweets/:id/liking_users', parameters, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        if (!asPaginator) {\n            return initialRq.data;\n        }\n        return new user_paginator_v2_1.TweetLikingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /**\n     * Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow, also known as home timeline.\n     * This endpoint returns up to the last 3200 Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-reverse-chronological\n     *\n     * OAuth 2 scopes: `tweet.read` `users.read`\n     */\n    async homeTimeline(options = {}) {\n        const meUser = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/timelines/reverse_chronological', options, {\n            fullResponse: true,\n            params: { id: meUser.data.id },\n        });\n        return new paginators_1.TweetHomeTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: meUser.data.id },\n        });\n    }\n    /**\n     * Returns Tweets composed by a single user, specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, the most recent 3,200 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-tweets\n     */\n    async userTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/tweets', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Tweets mentioning a single user specified by the requested user ID.\n     * By default, the most recent ten Tweets are returned per request.\n     * Using pagination, up to the most recent 800 Tweets can be retrieved.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/timelines/api-reference/get-users-id-mentions\n     */\n    async userMentionTimeline(userId, options = {}) {\n        const initialRq = await this.get('users/:id/mentions', options, {\n            fullResponse: true,\n            params: { id: userId },\n        });\n        return new paginators_1.TweetUserMentionTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: userId },\n        });\n    }\n    /**\n     * Returns Quote Tweets for a Tweet specified by the requested Tweet ID.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/quote-tweets/api-reference/get-tweets-id-quote_tweets\n     *\n     * OAuth2 scopes: `users.read` `tweet.read`\n     */\n    async quotes(tweetId, options = {}) {\n        const initialRq = await this.get('tweets/:id/quote_tweets', options, {\n            fullResponse: true,\n            params: { id: tweetId },\n        });\n        return new paginators_1.QuotedTweetsTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: tweetId },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Allows you to get information about a authenticated user’s 800 most recent bookmarked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/get-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.read`\n     */\n    async bookmarks(options = {}) {\n        const user = await this.getCurrentUserV2Object();\n        const initialRq = await this.get('users/:id/bookmarks', options, {\n            fullResponse: true,\n            params: { id: user.data.id },\n        });\n        return new paginators_1.TweetBookmarksTimelineV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: options,\n            sharedParams: { id: user.data.id },\n        });\n    }\n    /* Users */\n    /**\n     * Returns information about an authorized user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-me\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    me(options = {}) {\n        return this.get('users/me', options);\n    }\n    /**\n     * Returns a variety of information about a single user specified by the requested ID.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-id\n     */\n    user(userId, options = {}) {\n        return this.get('users/:id', options, { params: { id: userId } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by the requested IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users\n     */\n    users(userIds, options = {}) {\n        const ids = Array.isArray(userIds) ? userIds.join(',') : userIds;\n        return this.get('users', { ...options, ids });\n    }\n    /**\n     * Returns a variety of information about a single user specified by their username.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by-username-username\n     */\n    userByUsername(username, options = {}) {\n        return this.get('users/by/username/:username', options, { params: { username } });\n    }\n    /**\n     * Returns a variety of information about one or more users specified by their usernames.\n     * https://developer.twitter.com/en/docs/twitter-api/users/lookup/api-reference/get-users-by\n     *\n     * OAuth2 scope: `users.read`, `tweet.read`\n     */\n    usersByUsernames(usernames, options = {}) {\n        usernames = Array.isArray(usernames) ? usernames.join(',') : usernames;\n        return this.get('users/by', { ...options, usernames });\n    }\n    async followers(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/followers', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/followers', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    async following(userId, options = {}) {\n        const { asPaginator, ...parameters } = options;\n        const params = { id: userId };\n        if (!asPaginator) {\n            return this.get('users/:id/following', parameters, { params });\n        }\n        const initialRq = await this.get('users/:id/following', parameters, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserFollowingV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: parameters,\n            sharedParams: params,\n        });\n    }\n    /**\n     * Allows you to get information about a user’s liked Tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/get-users-id-liked_tweets\n     */\n    async userLikedTweets(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/liked_tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2UserLikedTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are blocked by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/get-users-blocking\n     */\n    async userBlockingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/blocking', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserBlockingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are muted by the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/get-users-muting\n     */\n    async userMutingUsers(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/muting', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserMutingUsersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Lists */\n    /**\n     * Returns the details of a specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-lists-id\n     */\n    list(id, options = {}) {\n        return this.get('lists/:id', options, { params: { id } });\n    }\n    /**\n     * Returns all Lists owned by the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-lookup/api-reference/get-users-id-owned_lists\n     */\n    async listsOwned(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/owned_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserOwnedListsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user is a member of.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-users-id-list_memberships\n     */\n    async listMemberships(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/list_memberships', options, { fullResponse: true, params });\n        return new paginators_1.UserListMembershipsV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns all Lists a specified user follows.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-users-id-followed_lists\n     */\n    async listFollowed(userId, options = {}) {\n        const params = { id: userId };\n        const initialRq = await this.get('users/:id/followed_lists', options, { fullResponse: true, params });\n        return new paginators_1.UserListFollowedV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of Tweets from the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-tweets/api-reference/get-lists-id-tweets\n     */\n    async listTweets(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/tweets', options, { fullResponse: true, params });\n        return new paginators_1.TweetV2ListTweetsPaginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are members of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-members/api-reference/get-lists-id-members\n     */\n    async listMembers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/members', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListMembersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /**\n     * Returns a list of users who are followers of the specified List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/list-follows/api-reference/get-lists-id-followers\n     */\n    async listFollowers(listId, options = {}) {\n        const params = { id: listId };\n        const initialRq = await this.get('lists/:id/followers', options, { fullResponse: true, params });\n        return new user_paginator_v2_1.UserListFollowersV2Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams: { ...options },\n            sharedParams: params,\n        });\n    }\n    /* Spaces */\n    /**\n     * Get a single space by ID.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    space(spaceId, options = {}) {\n        return this.get('spaces/:id', options, { params: { id: spaceId } });\n    }\n    /**\n     * Get spaces using their IDs.\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spaces(spaceIds, options = {}) {\n        return this.get('spaces', { ids: spaceIds, ...options });\n    }\n    /**\n     * Get spaces using their creator user ID(s). (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-by-creator-ids\n     *\n     * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n     */\n    spacesByCreators(creatorIds, options = {}) {\n        return this.get('spaces/by/creator_ids', { user_ids: creatorIds, ...options });\n    }\n    /**\n     * Search through spaces using multiple params. (no pagination available)\n     * https://developer.twitter.com/en/docs/twitter-api/spaces/search/api-reference/get-spaces-search\n     */\n    searchSpaces(options) {\n        return this.get('spaces/search', options);\n    }\n    /**\n    * Returns a list of user who purchased a ticket to the requested Space.\n    * You must authenticate the request using the Access Token of the creator of the requested Space.\n    *\n    * **OAuth 2.0 Access Token required**\n    *\n    * https://developer.twitter.com/en/docs/twitter-api/spaces/lookup/api-reference/get-spaces-id-buyers\n    *\n    * OAuth2 scopes: `tweet.read`, `users.read`, `space.read`.\n    */\n    spaceBuyers(spaceId, options = {}) {\n        return this.get('spaces/:id/buyers', options, { params: { id: spaceId } });\n    }\n    searchStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/search/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /**\n     * Return a list of rules currently active on the streaming endpoint, either as a list or individually.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream-rules\n     */\n    streamRules(options = {}) {\n        return this.get('tweets/search/stream/rules', options);\n    }\n    updateStreamRules(options, query = {}) {\n        return this.post('tweets/search/stream/rules', options, { query });\n    }\n    sampleStream({ autoConnect, ...options } = {}) {\n        return this.getStream('tweets/sample/stream', options, { payloadIsError: helpers_1.isTweetStreamV2ErrorPayload, autoConnect });\n    }\n    /* Batch compliance */\n    /**\n     * Returns a list of recent compliance jobs.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs\n     */\n    complianceJobs(options) {\n        return this.get('compliance/jobs', options);\n    }\n    /**\n     * Get a single compliance job with the specified ID.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/get-compliance-jobs-id\n     */\n    complianceJob(jobId) {\n        return this.get('compliance/jobs/:id', undefined, { params: { id: jobId } });\n    }\n    /**\n     * Creates a new compliance job for Tweet IDs or user IDs, send your file, await result and parse it into an array.\n     * You can run one batch job at a time. Returns the created job, but **not the job result!**.\n     *\n     * You can obtain the result (**after job is completed**) with `.complianceJobResult`.\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async sendComplianceJob(jobParams) {\n        const job = await this.post('compliance/jobs', { type: jobParams.type, name: jobParams.name });\n        // Send the IDs\n        const rawIdsBody = jobParams.ids instanceof Buffer ? jobParams.ids : Buffer.from(jobParams.ids.join('\\n'));\n        // Upload the IDs\n        await this.put(job.data.upload_url, rawIdsBody, {\n            forceBodyMode: 'raw',\n            enableAuth: false,\n            headers: { 'Content-Type': 'text/plain' },\n            prefix: '',\n        });\n        return job;\n    }\n    /**\n     * Get the result of a running or completed job, obtained through `.complianceJob`, `.complianceJobs` or `.sendComplianceJob`.\n     * If job is still running (`in_progress`), it will await until job is completed. **This could be quite long!**\n     * https://developer.twitter.com/en/docs/twitter-api/compliance/batch-compliance/api-reference/post-compliance-jobs\n     */\n    async complianceJobResult(job) {\n        let runningJob = job;\n        while (runningJob.status !== 'complete') {\n            if (runningJob.status === 'expired' || runningJob.status === 'failed') {\n                throw new Error('Job failed to be completed.');\n            }\n            await new Promise(resolve => setTimeout(resolve, 3500));\n            runningJob = (await this.complianceJob(job.id)).data;\n        }\n        // Download and parse result\n        const result = await this.get(job.download_url, undefined, {\n            enableAuth: false,\n            prefix: '',\n        });\n        return result\n            .trim()\n            .split('\\n')\n            .filter(line => line)\n            .map(line => JSON.parse(line));\n    }\n}\nexports.default = TwitterApiv2ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}