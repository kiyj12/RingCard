{"ast":null,"code":"const v8 = require('v8');\nconst jose = require('jose');\nconst clone = globalThis.structuredClone || (value => v8.deserialize(v8.serialize(value)));\nconst isPlainObject = require('./is_plain_object');\nconst isKeyObject = require('./is_key_object');\nconst internal = Symbol();\nfunction fauxAlg(kty) {\n  switch (kty) {\n    case 'RSA':\n      return 'RSA-OAEP';\n    case 'EC':\n      return 'ECDH-ES';\n    case 'OKP':\n      return 'ECDH-ES';\n    case 'oct':\n      return 'HS256';\n    default:\n      return undefined;\n  }\n}\nconst keyscore = (key, _ref) => {\n  let {\n    alg,\n    use\n  } = _ref;\n  let score = 0;\n  if (alg && key.alg) {\n    score++;\n  }\n  if (use && key.use) {\n    score++;\n  }\n  return score;\n};\nfunction getKtyFromAlg(alg) {\n  switch (typeof alg === 'string' && alg.slice(0, 2)) {\n    case 'RS':\n    case 'PS':\n      return 'RSA';\n    case 'ES':\n      return 'EC';\n    case 'Ed':\n      return 'OKP';\n    default:\n      return undefined;\n  }\n}\nfunction getAlgorithms(use, alg, kty, crv) {\n  // Ed25519, Ed448, and secp256k1 always have \"alg\"\n  // OKP always has use\n  if (alg) {\n    return new Set([alg]);\n  }\n  switch (kty) {\n    case 'EC':\n      {\n        let algs = [];\n        if (use === 'enc' || use === undefined) {\n          algs = algs.concat(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n        }\n        if (use === 'sig' || use === undefined) {\n          algs = algs.concat([`ES${crv.slice(-3)}`.replace('21', '12')]);\n        }\n        return new Set(algs);\n      }\n    case 'OKP':\n      {\n        return new Set(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n      }\n    case 'RSA':\n      {\n        let algs = [];\n        if (use === 'enc' || use === undefined) {\n          algs = algs.concat(['RSA-OAEP', 'RSA-OAEP-256', 'RSA-OAEP-384', 'RSA-OAEP-512', 'RSA1_5']);\n        }\n        if (use === 'sig' || use === undefined) {\n          algs = algs.concat(['PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512']);\n        }\n        return new Set(algs);\n      }\n    default:\n      throw new Error('unreachable');\n  }\n}\nmodule.exports = class KeyStore {\n  #keys;\n  constructor(i, keys) {\n    if (i !== internal) throw new Error('invalid constructor call');\n    this.#keys = keys;\n  }\n  toJWKS() {\n    return {\n      keys: this.map(_ref2 => {\n        let {\n          jwk: {\n            d,\n            p,\n            q,\n            dp,\n            dq,\n            qi,\n            ...jwk\n          }\n        } = _ref2;\n        return jwk;\n      })\n    };\n  }\n  all() {\n    let {\n      alg,\n      kid,\n      use\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!use || !alg) {\n      throw new Error();\n    }\n    const kty = getKtyFromAlg(alg);\n    const search = {\n      alg,\n      use\n    };\n    return this.filter(key => {\n      let candidate = true;\n      if (candidate && kty !== undefined && key.jwk.kty !== kty) {\n        candidate = false;\n      }\n      if (candidate && kid !== undefined && key.jwk.kid !== kid) {\n        candidate = false;\n      }\n      if (candidate && use !== undefined && key.jwk.use !== undefined && key.jwk.use !== use) {\n        candidate = false;\n      }\n      if (candidate && key.jwk.alg && key.jwk.alg !== alg) {\n        candidate = false;\n      } else if (!key.algorithms.has(alg)) {\n        candidate = false;\n      }\n      return candidate;\n    }).sort((first, second) => keyscore(second, search) - keyscore(first, search));\n  }\n  get() {\n    return this.all(...arguments)[0];\n  }\n  static async fromJWKS(jwks) {\n    let {\n      onlyPublic = false,\n      onlyPrivate = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isPlainObject(jwks) || !Array.isArray(jwks.keys) || jwks.keys.some(k => !isPlainObject(k) || !('kty' in k))) {\n      throw new TypeError('jwks must be a JSON Web Key Set formatted object');\n    }\n    const keys = [];\n    for (let jwk of jwks.keys) {\n      jwk = clone(jwk);\n      const {\n        kty,\n        kid,\n        crv\n      } = jwk;\n      let {\n        alg,\n        use\n      } = jwk;\n      if (typeof kty !== 'string' || !kty) {\n        continue;\n      }\n      if (use !== undefined && use !== 'sig' && use !== 'enc') {\n        continue;\n      }\n      if (typeof alg !== 'string' && alg !== undefined) {\n        continue;\n      }\n      if (typeof kid !== 'string' && kid !== undefined) {\n        continue;\n      }\n      if (kty === 'EC' && use === 'sig') {\n        switch (crv) {\n          case 'P-256':\n            alg = 'ES256';\n            break;\n          case 'P-384':\n            alg = 'ES384';\n            break;\n          case 'P-521':\n            alg = 'ES512';\n            break;\n          default:\n            break;\n        }\n      }\n      if (crv === 'secp256k1') {\n        use = 'sig';\n        alg = 'ES256K';\n      }\n      if (kty === 'OKP') {\n        switch (crv) {\n          case 'Ed25519':\n          case 'Ed448':\n            use = 'sig';\n            alg = 'EdDSA';\n            break;\n          case 'X25519':\n          case 'X448':\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n      if (alg && !use) {\n        switch (true) {\n          case alg.startsWith('ECDH'):\n            use = 'enc';\n            break;\n          case alg.startsWith('RSA'):\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n      const keyObject = await jose.importJWK(jwk, alg || fauxAlg(jwk.kty)).catch(() => {});\n      if (!keyObject) continue;\n      if (keyObject instanceof Uint8Array || keyObject.type === 'secret') {\n        if (onlyPrivate) {\n          throw new Error('jwks must only contain private keys');\n        }\n        continue;\n      }\n      if (!isKeyObject(keyObject)) {\n        throw new Error('what?!');\n      }\n      if (onlyPrivate && keyObject.type !== 'private') {\n        throw new Error('jwks must only contain private keys');\n      }\n      if (onlyPublic && keyObject.type !== 'public') {\n        continue;\n      }\n      if (kty === 'RSA' && keyObject.asymmetricKeySize < 2048) {\n        continue;\n      }\n      keys.push({\n        jwk: {\n          ...jwk,\n          alg,\n          use\n        },\n        keyObject,\n        get algorithms() {\n          Object.defineProperty(this, 'algorithms', {\n            value: getAlgorithms(this.jwk.use, this.jwk.alg, this.jwk.kty, this.jwk.crv),\n            enumerable: true,\n            configurable: false\n          });\n          return this.algorithms;\n        }\n      });\n    }\n    return new this(internal, keys);\n  }\n  filter() {\n    return this.#keys.filter(...arguments);\n  }\n  find() {\n    return this.#keys.find(...arguments);\n  }\n  every() {\n    return this.#keys.every(...arguments);\n  }\n  some() {\n    return this.#keys.some(...arguments);\n  }\n  map() {\n    return this.#keys.map(...arguments);\n  }\n  forEach() {\n    return this.#keys.forEach(...arguments);\n  }\n  reduce() {\n    return this.#keys.reduce(...arguments);\n  }\n  sort() {\n    return this.#keys.sort(...arguments);\n  }\n  *[Symbol.iterator]() {\n    for (const key of this.#keys) {\n      yield key;\n    }\n  }\n};","map":{"version":3,"names":["v8","require","jose","clone","globalThis","structuredClone","value","deserialize","serialize","isPlainObject","isKeyObject","internal","Symbol","fauxAlg","kty","undefined","keyscore","key","alg","use","score","getKtyFromAlg","slice","getAlgorithms","crv","Set","algs","concat","replace","Error","module","exports","KeyStore","keys","constructor","i","toJWKS","map","jwk","d","p","q","dp","dq","qi","all","kid","search","filter","candidate","algorithms","has","sort","first","second","get","fromJWKS","jwks","onlyPublic","onlyPrivate","Array","isArray","some","k","TypeError","startsWith","keyObject","importJWK","catch","Uint8Array","type","asymmetricKeySize","push","Object","defineProperty","enumerable","configurable","find","every","forEach","reduce","iterator"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/openid-client/lib/helpers/keystore.js"],"sourcesContent":["const v8 = require('v8');\n\nconst jose = require('jose');\n\nconst clone = globalThis.structuredClone || ((value) => v8.deserialize(v8.serialize(value)));\n\nconst isPlainObject = require('./is_plain_object');\nconst isKeyObject = require('./is_key_object');\n\nconst internal = Symbol();\n\nfunction fauxAlg(kty) {\n  switch (kty) {\n    case 'RSA':\n      return 'RSA-OAEP';\n    case 'EC':\n      return 'ECDH-ES';\n    case 'OKP':\n      return 'ECDH-ES';\n    case 'oct':\n      return 'HS256';\n    default:\n      return undefined;\n  }\n}\n\nconst keyscore = (key, { alg, use }) => {\n  let score = 0;\n\n  if (alg && key.alg) {\n    score++;\n  }\n\n  if (use && key.use) {\n    score++;\n  }\n\n  return score;\n};\n\nfunction getKtyFromAlg(alg) {\n  switch (typeof alg === 'string' && alg.slice(0, 2)) {\n    case 'RS':\n    case 'PS':\n      return 'RSA';\n    case 'ES':\n      return 'EC';\n    case 'Ed':\n      return 'OKP';\n    default:\n      return undefined;\n  }\n}\n\nfunction getAlgorithms(use, alg, kty, crv) {\n  // Ed25519, Ed448, and secp256k1 always have \"alg\"\n  // OKP always has use\n  if (alg) {\n    return new Set([alg]);\n  }\n\n  switch (kty) {\n    case 'EC': {\n      let algs = [];\n\n      if (use === 'enc' || use === undefined) {\n        algs = algs.concat(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n      }\n\n      if (use === 'sig' || use === undefined) {\n        algs = algs.concat([`ES${crv.slice(-3)}`.replace('21', '12')]);\n      }\n\n      return new Set(algs);\n    }\n    case 'OKP': {\n      return new Set(['ECDH-ES', 'ECDH-ES+A128KW', 'ECDH-ES+A192KW', 'ECDH-ES+A256KW']);\n    }\n    case 'RSA': {\n      let algs = [];\n\n      if (use === 'enc' || use === undefined) {\n        algs = algs.concat(['RSA-OAEP', 'RSA-OAEP-256', 'RSA-OAEP-384', 'RSA-OAEP-512', 'RSA1_5']);\n      }\n\n      if (use === 'sig' || use === undefined) {\n        algs = algs.concat(['PS256', 'PS384', 'PS512', 'RS256', 'RS384', 'RS512']);\n      }\n\n      return new Set(algs);\n    }\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nmodule.exports = class KeyStore {\n  #keys;\n\n  constructor(i, keys) {\n    if (i !== internal) throw new Error('invalid constructor call');\n    this.#keys = keys;\n  }\n\n  toJWKS() {\n    return {\n      keys: this.map(({ jwk: { d, p, q, dp, dq, qi, ...jwk } }) => jwk),\n    };\n  }\n\n  all({ alg, kid, use } = {}) {\n    if (!use || !alg) {\n      throw new Error();\n    }\n\n    const kty = getKtyFromAlg(alg);\n\n    const search = { alg, use };\n    return this.filter((key) => {\n      let candidate = true;\n\n      if (candidate && kty !== undefined && key.jwk.kty !== kty) {\n        candidate = false;\n      }\n\n      if (candidate && kid !== undefined && key.jwk.kid !== kid) {\n        candidate = false;\n      }\n\n      if (candidate && use !== undefined && key.jwk.use !== undefined && key.jwk.use !== use) {\n        candidate = false;\n      }\n\n      if (candidate && key.jwk.alg && key.jwk.alg !== alg) {\n        candidate = false;\n      } else if (!key.algorithms.has(alg)) {\n        candidate = false;\n      }\n\n      return candidate;\n    }).sort((first, second) => keyscore(second, search) - keyscore(first, search));\n  }\n\n  get(...args) {\n    return this.all(...args)[0];\n  }\n\n  static async fromJWKS(jwks, { onlyPublic = false, onlyPrivate = false } = {}) {\n    if (\n      !isPlainObject(jwks) ||\n      !Array.isArray(jwks.keys) ||\n      jwks.keys.some((k) => !isPlainObject(k) || !('kty' in k))\n    ) {\n      throw new TypeError('jwks must be a JSON Web Key Set formatted object');\n    }\n\n    const keys = [];\n\n    for (let jwk of jwks.keys) {\n      jwk = clone(jwk);\n      const { kty, kid, crv } = jwk;\n\n      let { alg, use } = jwk;\n\n      if (typeof kty !== 'string' || !kty) {\n        continue;\n      }\n\n      if (use !== undefined && use !== 'sig' && use !== 'enc') {\n        continue;\n      }\n\n      if (typeof alg !== 'string' && alg !== undefined) {\n        continue;\n      }\n\n      if (typeof kid !== 'string' && kid !== undefined) {\n        continue;\n      }\n\n      if (kty === 'EC' && use === 'sig') {\n        switch (crv) {\n          case 'P-256':\n            alg = 'ES256';\n            break;\n          case 'P-384':\n            alg = 'ES384';\n            break;\n          case 'P-521':\n            alg = 'ES512';\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (crv === 'secp256k1') {\n        use = 'sig';\n        alg = 'ES256K';\n      }\n\n      if (kty === 'OKP') {\n        switch (crv) {\n          case 'Ed25519':\n          case 'Ed448':\n            use = 'sig';\n            alg = 'EdDSA';\n            break;\n          case 'X25519':\n          case 'X448':\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (alg && !use) {\n        switch (true) {\n          case alg.startsWith('ECDH'):\n            use = 'enc';\n            break;\n          case alg.startsWith('RSA'):\n            use = 'enc';\n            break;\n          default:\n            break;\n        }\n      }\n\n      const keyObject = await jose.importJWK(jwk, alg || fauxAlg(jwk.kty)).catch(() => {});\n\n      if (!keyObject) continue;\n\n      if (keyObject instanceof Uint8Array || keyObject.type === 'secret') {\n        if (onlyPrivate) {\n          throw new Error('jwks must only contain private keys');\n        }\n        continue;\n      }\n\n      if (!isKeyObject(keyObject)) {\n        throw new Error('what?!');\n      }\n\n      if (onlyPrivate && keyObject.type !== 'private') {\n        throw new Error('jwks must only contain private keys');\n      }\n\n      if (onlyPublic && keyObject.type !== 'public') {\n        continue;\n      }\n\n      if (kty === 'RSA' && keyObject.asymmetricKeySize < 2048) {\n        continue;\n      }\n\n      keys.push({\n        jwk: { ...jwk, alg, use },\n        keyObject,\n        get algorithms() {\n          Object.defineProperty(this, 'algorithms', {\n            value: getAlgorithms(this.jwk.use, this.jwk.alg, this.jwk.kty, this.jwk.crv),\n            enumerable: true,\n            configurable: false,\n          });\n          return this.algorithms;\n        },\n      });\n    }\n\n    return new this(internal, keys);\n  }\n\n  filter(...args) {\n    return this.#keys.filter(...args);\n  }\n\n  find(...args) {\n    return this.#keys.find(...args);\n  }\n\n  every(...args) {\n    return this.#keys.every(...args);\n  }\n\n  some(...args) {\n    return this.#keys.some(...args);\n  }\n\n  map(...args) {\n    return this.#keys.map(...args);\n  }\n\n  forEach(...args) {\n    return this.#keys.forEach(...args);\n  }\n\n  reduce(...args) {\n    return this.#keys.reduce(...args);\n  }\n\n  sort(...args) {\n    return this.#keys.sort(...args);\n  }\n\n  *[Symbol.iterator]() {\n    for (const key of this.#keys) {\n      yield key;\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}