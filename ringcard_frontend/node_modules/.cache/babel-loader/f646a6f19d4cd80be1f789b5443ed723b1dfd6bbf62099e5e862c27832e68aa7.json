{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStream = void 0;\nconst events_1 = require(\"events\");\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nconst types_1 = require(\"../types\");\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length ? 901000 : basicRetriesAttempt[tryOccurence - 1] * 1000;\nclass TweetStream extends events_1.EventEmitter {\n  constructor(requestData, connection) {\n    super();\n    this.requestData = requestData;\n    this.autoReconnect = false;\n    this.autoReconnectRetries = 5;\n    // 2 minutes without any Twitter signal\n    this.keepAliveTimeoutMs = 1000 * 120;\n    this.nextRetryTimeout = basicReconnectRetry;\n    this.parser = new TweetStreamParser_1.default();\n    this.connectionProcessRunning = false;\n    this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n    this.initEventsFromParser();\n    if (connection) {\n      this.req = connection.req;\n      this.res = connection.res;\n      this.originalResponse = connection.originalResponse;\n      this.initEventsFromRequest();\n    }\n  }\n  on(event, handler) {\n    return super.on(event, handler);\n  }\n  initEventsFromRequest() {\n    if (!this.req || !this.res) {\n      throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n    }\n    const errorHandler = err => {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ConnectionError,\n        error: err,\n        message: 'Connection lost or closed by Twitter.'\n      });\n      this.onConnectionError();\n    };\n    this.req.on('error', errorHandler);\n    this.res.on('error', errorHandler);\n    // Usually, connection should not be closed by Twitter!\n    this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n    this.res.on('data', chunk => {\n      this.resetKeepAliveTimeout();\n      if (chunk.toString() === '\\r\\n') {\n        return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n      }\n      this.parser.push(chunk.toString());\n    });\n    // Starts the keep alive timeout\n    this.resetKeepAliveTimeout();\n  }\n  initEventsFromParser() {\n    const payloadIsError = this.requestData.payloadIsError;\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, eventData => {\n      if (payloadIsError && payloadIsError(eventData)) {\n        this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n        this.emit(types_1.ETwitterStreamEvent.Error, {\n          type: types_1.ETwitterStreamEvent.DataError,\n          error: eventData,\n          message: 'Twitter sent a payload that is detected as an error payload.'\n        });\n      } else {\n        this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n      }\n    });\n    this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, error => {\n      this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.TweetParseError,\n        error,\n        message: 'Failed to parse stream data.'\n      });\n    });\n  }\n  resetKeepAliveTimeout() {\n    this.unbindKeepAliveTimeout();\n    if (this.keepAliveTimeoutMs !== Infinity) {\n      this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n    }\n  }\n  onKeepAliveTimeout() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n    this.onConnectionError();\n  }\n  unbindTimeouts() {\n    this.unbindRetryTimeout();\n    this.unbindKeepAliveTimeout();\n  }\n  unbindKeepAliveTimeout() {\n    if (this.keepAliveTimeout) {\n      clearTimeout(this.keepAliveTimeout);\n      this.keepAliveTimeout = undefined;\n    }\n  }\n  unbindRetryTimeout() {\n    if (this.retryTimeout) {\n      clearTimeout(this.retryTimeout);\n      this.retryTimeout = undefined;\n    }\n  }\n  closeWithoutEmit() {\n    this.unbindTimeouts();\n    if (this.res) {\n      this.res.removeAllListeners();\n      // Close response silentely\n      this.res.destroy();\n    }\n    if (this.req) {\n      this.req.removeAllListeners();\n      // Close connection silentely\n      this.req.destroy();\n    }\n  }\n  /** Terminate connection to Twitter. */\n  close() {\n    this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n    this.closeWithoutEmit();\n  }\n  /** Unbind all listeners, and close connection. */\n  destroy() {\n    this.removeAllListeners();\n    this.close();\n  }\n  /**\n   * Make a new request that creates a new `TweetStream` instance with\n   * the same parameters, and bind current listeners to new stream.\n   */\n  async clone() {\n    const newRequest = new request_handler_helper_1.default(this.requestData);\n    const newStream = await newRequest.makeRequestAsStream();\n    // Clone attached listeners\n    const listenerNames = this.eventNames();\n    for (const listener of listenerNames) {\n      const callbacks = this.listeners(listener);\n      for (const callback of callbacks) {\n        newStream.on(listener, callback);\n      }\n    }\n    return newStream;\n  }\n  /** Start initial stream connection, setup options on current instance and returns itself. */\n  async connect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options.autoReconnect !== 'undefined') {\n      this.autoReconnect = options.autoReconnect;\n    }\n    if (typeof options.autoReconnectRetries !== 'undefined') {\n      this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited' ? Infinity : options.autoReconnectRetries;\n    }\n    if (typeof options.keepAliveTimeout !== 'undefined') {\n      this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable' ? Infinity : options.keepAliveTimeout;\n    }\n    if (typeof options.nextRetryTimeout !== 'undefined') {\n      this.nextRetryTimeout = options.nextRetryTimeout;\n    }\n    // Make the connection\n    this.unbindTimeouts();\n    try {\n      await this.reconnect();\n    } catch (e) {\n      this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ConnectError,\n        error: e,\n        message: 'Connect error - Initial connection just failed.'\n      });\n      // Only make a reconnection attempt if autoReconnect is true!\n      // Otherwise, let error be propagated\n      if (this.autoReconnect) {\n        this.makeAutoReconnectRetry(0, e);\n      } else {\n        throw e;\n      }\n    }\n    return this;\n  }\n  /** Make a new request to (re)connect to Twitter. */\n  async reconnect() {\n    if (this.connectionProcessRunning) {\n      throw new Error('Connection process is already running.');\n    }\n    this.connectionProcessRunning = true;\n    try {\n      let initialConnection = true;\n      if (this.req) {\n        initialConnection = false;\n        this.closeWithoutEmit();\n      }\n      const {\n        req,\n        res,\n        originalResponse\n      } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n      this.req = req;\n      this.res = res;\n      this.originalResponse = originalResponse;\n      this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n      this.parser.reset();\n      this.initEventsFromRequest();\n    } finally {\n      this.connectionProcessRunning = false;\n    }\n  }\n  async onConnectionError() {\n    let retryOccurence = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.unbindTimeouts();\n    // Close the request if necessary\n    this.closeWithoutEmit();\n    // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n    if (!this.autoReconnect) {\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      return;\n    }\n    if (retryOccurence >= this.autoReconnectRetries) {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n      this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n      return;\n    }\n    // If all other conditions fails, do a reconnect attempt\n    try {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n      await this.reconnect();\n    } catch (e) {\n      this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n      this.emit(types_1.ETwitterStreamEvent.Error, {\n        type: types_1.ETwitterStreamEvent.ReconnectError,\n        error: e,\n        message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`\n      });\n      this.makeAutoReconnectRetry(retryOccurence, e);\n    }\n  }\n  makeAutoReconnectRetry(retryOccurence, error) {\n    const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n    this.retryTimeout = setTimeout(() => {\n      this.onConnectionError(retryOccurence + 1);\n    }, nextRetry);\n  }\n  async *[Symbol.asyncIterator]() {\n    const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n    try {\n      while (true) {\n        if (!this.req || this.req.aborted) {\n          throw new Error('Connection closed');\n        }\n        if (eventCombiner.hasStack()) {\n          yield* eventCombiner.popStack();\n        }\n        const {\n          type,\n          payload\n        } = await eventCombiner.nextEvent();\n        if (type === 'error') {\n          throw payload;\n        }\n      }\n    } finally {\n      eventCombiner.destroy();\n    }\n  }\n}\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","TweetStream","events_1","require","request_handler_helper_1","types_1","TweetStreamEventCombiner_1","TweetStreamParser_1","basicRetriesAttempt","basicReconnectRetry","tryOccurence","length","EventEmitter","constructor","requestData","connection","autoReconnect","autoReconnectRetries","keepAliveTimeoutMs","nextRetryTimeout","parser","default","connectionProcessRunning","onKeepAliveTimeout","bind","initEventsFromParser","req","res","originalResponse","initEventsFromRequest","on","event","handler","Error","errorHandler","err","emit","ETwitterStreamEvent","ConnectionError","type","error","message","onConnectionError","chunk","resetKeepAliveTimeout","toString","DataKeepAlive","push","payloadIsError","EStreamParserEvent","ParsedData","eventData","DataError","Data","ParseError","TweetParseError","unbindKeepAliveTimeout","Infinity","keepAliveTimeout","setTimeout","ConnectionLost","unbindTimeouts","unbindRetryTimeout","clearTimeout","retryTimeout","closeWithoutEmit","removeAllListeners","destroy","close","ConnectionClosed","clone","newRequest","newStream","makeRequestAsStream","listenerNames","eventNames","listener","callbacks","listeners","callback","connect","options","reconnect","e","ConnectError","makeAutoReconnectRetry","initialConnection","makeRequestAndResolveWhenReady","Connected","Reconnected","reset","retryOccurence","ReconnectLimitExceeded","ReconnectAttempt","ReconnectError","nextRetry","Symbol","asyncIterator","eventCombiner","aborted","hasStack","popStack","payload","nextEvent"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/stream/TweetStream.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStream = void 0;\nconst events_1 = require(\"events\");\nconst request_handler_helper_1 = __importDefault(require(\"../client-mixins/request-handler.helper\"));\nconst types_1 = require(\"../types\");\nconst TweetStreamEventCombiner_1 = __importDefault(require(\"./TweetStreamEventCombiner\"));\nconst TweetStreamParser_1 = __importStar(require(\"./TweetStreamParser\"));\n// In seconds\nconst basicRetriesAttempt = [5, 15, 30, 60, 90, 120, 180, 300, 600, 900];\n// Default retry function\nconst basicReconnectRetry = tryOccurence => tryOccurence > basicRetriesAttempt.length\n    ? 901000\n    : basicRetriesAttempt[tryOccurence - 1] * 1000;\nclass TweetStream extends events_1.EventEmitter {\n    constructor(requestData, connection) {\n        super();\n        this.requestData = requestData;\n        this.autoReconnect = false;\n        this.autoReconnectRetries = 5;\n        // 2 minutes without any Twitter signal\n        this.keepAliveTimeoutMs = 1000 * 120;\n        this.nextRetryTimeout = basicReconnectRetry;\n        this.parser = new TweetStreamParser_1.default();\n        this.connectionProcessRunning = false;\n        this.onKeepAliveTimeout = this.onKeepAliveTimeout.bind(this);\n        this.initEventsFromParser();\n        if (connection) {\n            this.req = connection.req;\n            this.res = connection.res;\n            this.originalResponse = connection.originalResponse;\n            this.initEventsFromRequest();\n        }\n    }\n    on(event, handler) {\n        return super.on(event, handler);\n    }\n    initEventsFromRequest() {\n        if (!this.req || !this.res) {\n            throw new Error('TweetStream error: You cannot init TweetStream without a request and response object.');\n        }\n        const errorHandler = (err) => {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionError, err);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectionError,\n                error: err,\n                message: 'Connection lost or closed by Twitter.',\n            });\n            this.onConnectionError();\n        };\n        this.req.on('error', errorHandler);\n        this.res.on('error', errorHandler);\n        // Usually, connection should not be closed by Twitter!\n        this.res.on('close', () => errorHandler(new Error('Connection closed by Twitter.')));\n        this.res.on('data', (chunk) => {\n            this.resetKeepAliveTimeout();\n            if (chunk.toString() === '\\r\\n') {\n                return this.emit(types_1.ETwitterStreamEvent.DataKeepAlive);\n            }\n            this.parser.push(chunk.toString());\n        });\n        // Starts the keep alive timeout\n        this.resetKeepAliveTimeout();\n    }\n    initEventsFromParser() {\n        const payloadIsError = this.requestData.payloadIsError;\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParsedData, (eventData) => {\n            if (payloadIsError && payloadIsError(eventData)) {\n                this.emit(types_1.ETwitterStreamEvent.DataError, eventData);\n                this.emit(types_1.ETwitterStreamEvent.Error, {\n                    type: types_1.ETwitterStreamEvent.DataError,\n                    error: eventData,\n                    message: 'Twitter sent a payload that is detected as an error payload.',\n                });\n            }\n            else {\n                this.emit(types_1.ETwitterStreamEvent.Data, eventData);\n            }\n        });\n        this.parser.on(TweetStreamParser_1.EStreamParserEvent.ParseError, (error) => {\n            this.emit(types_1.ETwitterStreamEvent.TweetParseError, error);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.TweetParseError,\n                error,\n                message: 'Failed to parse stream data.',\n            });\n        });\n    }\n    resetKeepAliveTimeout() {\n        this.unbindKeepAliveTimeout();\n        if (this.keepAliveTimeoutMs !== Infinity) {\n            this.keepAliveTimeout = setTimeout(this.onKeepAliveTimeout, this.keepAliveTimeoutMs);\n        }\n    }\n    onKeepAliveTimeout() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionLost);\n        this.onConnectionError();\n    }\n    unbindTimeouts() {\n        this.unbindRetryTimeout();\n        this.unbindKeepAliveTimeout();\n    }\n    unbindKeepAliveTimeout() {\n        if (this.keepAliveTimeout) {\n            clearTimeout(this.keepAliveTimeout);\n            this.keepAliveTimeout = undefined;\n        }\n    }\n    unbindRetryTimeout() {\n        if (this.retryTimeout) {\n            clearTimeout(this.retryTimeout);\n            this.retryTimeout = undefined;\n        }\n    }\n    closeWithoutEmit() {\n        this.unbindTimeouts();\n        if (this.res) {\n            this.res.removeAllListeners();\n            // Close response silentely\n            this.res.destroy();\n        }\n        if (this.req) {\n            this.req.removeAllListeners();\n            // Close connection silentely\n            this.req.destroy();\n        }\n    }\n    /** Terminate connection to Twitter. */\n    close() {\n        this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n        this.closeWithoutEmit();\n    }\n    /** Unbind all listeners, and close connection. */\n    destroy() {\n        this.removeAllListeners();\n        this.close();\n    }\n    /**\n     * Make a new request that creates a new `TweetStream` instance with\n     * the same parameters, and bind current listeners to new stream.\n     */\n    async clone() {\n        const newRequest = new request_handler_helper_1.default(this.requestData);\n        const newStream = await newRequest.makeRequestAsStream();\n        // Clone attached listeners\n        const listenerNames = this.eventNames();\n        for (const listener of listenerNames) {\n            const callbacks = this.listeners(listener);\n            for (const callback of callbacks) {\n                newStream.on(listener, callback);\n            }\n        }\n        return newStream;\n    }\n    /** Start initial stream connection, setup options on current instance and returns itself. */\n    async connect(options = {}) {\n        if (typeof options.autoReconnect !== 'undefined') {\n            this.autoReconnect = options.autoReconnect;\n        }\n        if (typeof options.autoReconnectRetries !== 'undefined') {\n            this.autoReconnectRetries = options.autoReconnectRetries === 'unlimited'\n                ? Infinity\n                : options.autoReconnectRetries;\n        }\n        if (typeof options.keepAliveTimeout !== 'undefined') {\n            this.keepAliveTimeoutMs = options.keepAliveTimeout === 'disable'\n                ? Infinity\n                : options.keepAliveTimeout;\n        }\n        if (typeof options.nextRetryTimeout !== 'undefined') {\n            this.nextRetryTimeout = options.nextRetryTimeout;\n        }\n        // Make the connection\n        this.unbindTimeouts();\n        try {\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectError, 0);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ConnectError,\n                error: e,\n                message: 'Connect error - Initial connection just failed.',\n            });\n            // Only make a reconnection attempt if autoReconnect is true!\n            // Otherwise, let error be propagated\n            if (this.autoReconnect) {\n                this.makeAutoReconnectRetry(0, e);\n            }\n            else {\n                throw e;\n            }\n        }\n        return this;\n    }\n    /** Make a new request to (re)connect to Twitter. */\n    async reconnect() {\n        if (this.connectionProcessRunning) {\n            throw new Error('Connection process is already running.');\n        }\n        this.connectionProcessRunning = true;\n        try {\n            let initialConnection = true;\n            if (this.req) {\n                initialConnection = false;\n                this.closeWithoutEmit();\n            }\n            const { req, res, originalResponse } = await new request_handler_helper_1.default(this.requestData).makeRequestAndResolveWhenReady();\n            this.req = req;\n            this.res = res;\n            this.originalResponse = originalResponse;\n            this.emit(initialConnection ? types_1.ETwitterStreamEvent.Connected : types_1.ETwitterStreamEvent.Reconnected);\n            this.parser.reset();\n            this.initEventsFromRequest();\n        }\n        finally {\n            this.connectionProcessRunning = false;\n        }\n    }\n    async onConnectionError(retryOccurence = 0) {\n        this.unbindTimeouts();\n        // Close the request if necessary\n        this.closeWithoutEmit();\n        // Terminate stream by events if necessary (no auto-reconnect or retries exceeded)\n        if (!this.autoReconnect) {\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        if (retryOccurence >= this.autoReconnectRetries) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectLimitExceeded);\n            this.emit(types_1.ETwitterStreamEvent.ConnectionClosed);\n            return;\n        }\n        // If all other conditions fails, do a reconnect attempt\n        try {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectAttempt, retryOccurence);\n            await this.reconnect();\n        }\n        catch (e) {\n            this.emit(types_1.ETwitterStreamEvent.ReconnectError, retryOccurence);\n            this.emit(types_1.ETwitterStreamEvent.Error, {\n                type: types_1.ETwitterStreamEvent.ReconnectError,\n                error: e,\n                message: `Reconnect error - ${retryOccurence + 1} attempts made yet.`,\n            });\n            this.makeAutoReconnectRetry(retryOccurence, e);\n        }\n    }\n    makeAutoReconnectRetry(retryOccurence, error) {\n        const nextRetry = this.nextRetryTimeout(retryOccurence + 1, error);\n        this.retryTimeout = setTimeout(() => {\n            this.onConnectionError(retryOccurence + 1);\n        }, nextRetry);\n    }\n    async *[Symbol.asyncIterator]() {\n        const eventCombiner = new TweetStreamEventCombiner_1.default(this);\n        try {\n            while (true) {\n                if (!this.req || this.req.aborted) {\n                    throw new Error('Connection closed');\n                }\n                if (eventCombiner.hasStack()) {\n                    yield* eventCombiner.popStack();\n                }\n                const { type, payload } = await eventCombiner.nextEvent();\n                if (type === 'error') {\n                    throw payload;\n                }\n            }\n        }\n        finally {\n            eventCombiner.destroy();\n        }\n    }\n}\nexports.TweetStream = TweetStream;\nexports.default = TweetStream;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}