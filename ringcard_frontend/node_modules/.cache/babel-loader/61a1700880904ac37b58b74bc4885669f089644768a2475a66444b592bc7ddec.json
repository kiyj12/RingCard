{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst helpers_1 = require(\"../helpers\");\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nconst followers_paginator_v1_1 = require(\"../paginators/followers.paginator.v1\");\nconst friends_paginator_v1_1 = require(\"../paginators/friends.paginator.v1\");\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V1_1_PREFIX;\n  }\n  /* Tweets */\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n   */\n  singleTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('statuses/show.json', {\n      tweet_mode: 'extended',\n      id: tweetId,\n      ...options\n    });\n  }\n  tweets(ids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.post('statuses/lookup.json', {\n      tweet_mode: 'extended',\n      id: ids,\n      ...options\n    });\n  }\n  /**\n   * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n   * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n   */\n  oembedTweet(tweetId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('oembed', {\n      url: `https://twitter.com/i/statuses/${tweetId}`,\n      ...options\n    }, {\n      prefix: 'https://publish.twitter.com/'\n    });\n  }\n  /* Tweets timelines */\n  /**\n   * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n   * The home timeline is central to how most users interact with the Twitter service.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n   */\n  async homeTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/home_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n   * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n   */\n  async mentionTimeline() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n  async userTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      user_id: userId,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n   * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n   */\n  async userTimelineByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      screen_name: username,\n      ...options\n    };\n    const initialRq = await this.get('statuses/user_timeline.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n   * Note: favorites are now known as likes.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n   */\n  async favoriteTimeline(userId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      user_id: userId,\n      ...options\n    };\n    const initialRq = await this.get('favorites/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n   * Note: favorites are now known as likes.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n   */\n  async favoriteTimelineByUsername(username) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      screen_name: username,\n      ...options\n    };\n    const initialRq = await this.get('favorites/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Users */\n  /**\n   * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n   * The author's most recent Tweet will be returned inline when possible.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n   */\n  user(user) {\n    return this.get('users/show.json', {\n      tweet_mode: 'extended',\n      ...user\n    });\n  }\n  /**\n   * Returns fully-hydrated user objects for up to 100 users per request,\n   * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n   */\n  users(query) {\n    return this.get('users/lookup.json', {\n      tweet_mode: 'extended',\n      ...query\n    });\n  }\n  /**\n   * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n   * returns a 401 status code and an error message if not.\n   * Use this method to test if supplied user credentials are valid.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n   */\n  verifyCredentials() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('account/verify_credentials.json', options);\n  }\n  /**\n   * Returns an array of user objects the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n   */\n  async listMutedUsers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of numeric user ids the authenticating user has muted.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n   */\n  async listMutedUserIds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('mutes/users/ids.json', queryParams, {\n      fullResponse: true\n    });\n    return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of user objects of friends of the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list\n   */\n  async userFriendList() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      ...options\n    };\n    const initialRq = await this.get('friends/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new friends_paginator_v1_1.UserFriendListV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of user objects of followers of the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list\n   */\n  async userFollowerList() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      ...options\n    };\n    const initialRq = await this.get('followers/list.json', queryParams, {\n      fullResponse: true\n    });\n    return new followers_paginator_v1_1.UserFollowerListV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of numeric user ids of followers of the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids\n   */\n  async userFollowerIds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('followers/ids.json', queryParams, {\n      fullResponse: true\n    });\n    return new followers_paginator_v1_1.UserFollowerIdsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns an array of numeric user ids of friends of the specified user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids\n   */\n  async userFollowingIds() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friends/ids.json', queryParams, {\n      fullResponse: true\n    });\n    return new friends_paginator_v1_1.UserFollowersIdsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n   */\n  async searchUsers(query) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const queryParams = {\n      q: query,\n      tweet_mode: 'extended',\n      page: 1,\n      ...options\n    };\n    const initialRq = await this.get('users/search.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.UserSearchV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Friendship API */\n  /**\n   * Returns detailed information about the relationship between two arbitrary users.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n   */\n  friendship(sources) {\n    return this.get('friendships/show.json', sources);\n  }\n  /**\n   * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n   */\n  friendships(friendships) {\n    return this.get('friendships/lookup.json', friendships);\n  }\n  /**\n   * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n   */\n  friendshipsNoRetweets() {\n    return this.get('friendships/no_retweets/ids.json', {\n      stringify_ids: true\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n   */\n  async friendshipsIncoming() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/incoming.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n   */\n  async friendshipsOutgoing() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      stringify_ids: true,\n      ...options\n    };\n    const initialRq = await this.get('friendships/outgoing.json', queryParams, {\n      fullResponse: true\n    });\n    return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Account/user API */\n  /**\n   * Get current account settings for authenticating user.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n   */\n  accountSettings() {\n    return this.get('account/settings.json');\n  }\n  /**\n   * Returns a map of the available size variations of the specified user's profile banner.\n   * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n   */\n  userProfileBannerSizes(params) {\n    return this.get('users/profile_banner.json', params);\n  }\n  /* Lists */\n  /**\n   * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n   */\n  list(options) {\n    return this.get('lists/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns all lists the authenticating or specified user subscribes to, including their own.\n   * If no user is given, the authenticating user is used.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n   */\n  lists() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.get('lists/list.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n   */\n  async listMembers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/members.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a member of the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n   */\n  listGetMember(options) {\n    return this.get('lists/members/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Returns the lists the specified user has been added to.\n   * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n   */\n  async listMemberships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/memberships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListMembershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n   */\n  async listOwnerships() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/ownerships.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n   */\n  async listStatuses(options) {\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/statuses.json', queryParams, {\n      fullResponse: true\n    });\n    return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n   */\n  async listSubscribers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscribers.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscribersV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /**\n   * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n   */\n  listGetSubscriber(options) {\n    return this.get('lists/subscribers/show.json', {\n      tweet_mode: 'extended',\n      ...options\n    });\n  }\n  /**\n   * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n   * Does not include the user's own lists.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n   */\n  async listSubscriptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const queryParams = {\n      tweet_mode: 'extended',\n      ...options\n    };\n    const initialRq = await this.get('lists/subscriptions.json', queryParams, {\n      fullResponse: true\n    });\n    return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n      realData: initialRq.data,\n      rateLimit: initialRq.rateLimit,\n      instance: this,\n      queryParams\n    });\n  }\n  /* Media upload API */\n  /**\n   * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n   * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n   */\n  mediaInfo(mediaId) {\n    return this.get('media/upload.json', {\n      command: 'STATUS',\n      media_id: mediaId\n    }, {\n      prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n    });\n  }\n  filterStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const parameters = {};\n    for (const [key, value] of Object.entries(params)) {\n      if (key === 'follow' || key === 'track') {\n        parameters[key] = value.toString();\n      } else if (key === 'locations') {\n        const locations = value;\n        parameters.locations = (0, helpers_1.arrayWrap)(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n      } else {\n        parameters[key] = value;\n      }\n    }\n    const streamClient = this.stream;\n    return streamClient.postStream('statuses/filter.json', parameters, {\n      autoConnect\n    });\n  }\n  sampleStream() {\n    let {\n      autoConnect,\n      ...params\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const streamClient = this.stream;\n    return streamClient.getStream('statuses/sample.json', params, {\n      autoConnect\n    });\n  }\n  /**\n   * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n   */\n  get stream() {\n    const copiedClient = new client_v1_1.default(this);\n    copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n    return copiedClient;\n  }\n  /* Trends API */\n  /**\n   * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n   * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n   */\n  trendsByPlace(woeId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.get('trends/place.json', {\n      id: woeId,\n      ...options\n    });\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for.\n   * The response is an array of \"locations\" that encode the location's WOEID\n   * and some other human-readable information such as a canonical name and country the location belongs in.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n   */\n  trendsAvailable() {\n    return this.get('trends/available.json');\n  }\n  /**\n   * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n   */\n  trendsClosest(lat, long) {\n    return this.get('trends/closest.json', {\n      lat,\n      long\n    });\n  }\n  /* Geo API */\n  /**\n   * Returns all the information about a known place.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n   */\n  geoPlace(placeId) {\n    return this.get('geo/id/:place_id.json', undefined, {\n      params: {\n        place_id: placeId\n      }\n    });\n  }\n  /**\n   * Search for places that can be attached to a Tweet via POST statuses/update.\n   * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n   */\n  geoSearch(options) {\n    return this.get('geo/search.json', options);\n  }\n  /**\n   * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n   * This request is an informative call and will deliver generalized results about geography.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n   */\n  geoReverseGeoCode(options) {\n    return this.get('geo/reverse_geocode.json', options);\n  }\n  /* Developer utilities */\n  /**\n   * Returns the current rate limits for methods belonging to the specified resource families.\n   * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n   * The method's resource family can be determined from the first component of the path after the resource version.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n   */\n  rateLimitStatuses() {\n    for (var _len = arguments.length, resources = new Array(_len), _key = 0; _key < _len; _key++) {\n      resources[_key] = arguments[_key];\n    }\n    return this.get('application/rate_limit_status.json', {\n      resources\n    });\n  }\n  /**\n   * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n   */\n  supportedLanguages() {\n    return this.get('help/languages.json');\n  }\n}\nexports.default = TwitterApiv1ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","helpers_1","client_v1_1","tweet_paginator_v1_1","mutes_paginator_v1_1","followers_paginator_v1_1","friends_paginator_v1_1","user_paginator_v1_1","list_paginator_v1_1","TwitterApiv1ReadOnly","default","constructor","arguments","_prefix","API_V1_1_PREFIX","singleTweet","tweetId","options","get","tweet_mode","id","tweets","ids","post","oembedTweet","url","prefix","homeTimeline","queryParams","initialRq","fullResponse","HomeTimelineV1Paginator","realData","data","rateLimit","instance","mentionTimeline","MentionTimelineV1Paginator","userTimeline","userId","user_id","UserTimelineV1Paginator","userTimelineByUsername","username","screen_name","favoriteTimeline","UserFavoritesV1Paginator","favoriteTimelineByUsername","user","users","query","verifyCredentials","listMutedUsers","MuteUserListV1Paginator","listMutedUserIds","stringify_ids","MuteUserIdsV1Paginator","userFriendList","UserFriendListV1Paginator","userFollowerList","UserFollowerListV1Paginator","userFollowerIds","UserFollowerIdsV1Paginator","userFollowingIds","UserFollowersIdsV1Paginator","searchUsers","q","page","UserSearchV1Paginator","friendship","sources","friendships","friendshipsNoRetweets","friendshipsIncoming","FriendshipsIncomingV1Paginator","friendshipsOutgoing","FriendshipsOutgoingV1Paginator","accountSettings","userProfileBannerSizes","params","list","lists","listMembers","ListMembersV1Paginator","listGetMember","listMemberships","ListMembershipsV1Paginator","listOwnerships","ListOwnershipsV1Paginator","listStatuses","ListTimelineV1Paginator","listSubscribers","ListSubscribersV1Paginator","listGetSubscriber","listSubscriptions","ListSubscriptionsV1Paginator","mediaInfo","mediaId","command","media_id","API_V1_1_UPLOAD_PREFIX","filterStream","autoConnect","parameters","key","entries","toString","locations","arrayWrap","map","loc","lng","lat","join","streamClient","stream","postStream","sampleStream","getStream","copiedClient","setPrefix","API_V1_1_STREAM_PREFIX","trendsByPlace","woeId","trendsAvailable","trendsClosest","long","geoPlace","placeId","undefined","place_id","geoSearch","geoReverseGeoCode","rateLimitStatuses","resources","supportedLanguages"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v1/client.v1.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst helpers_1 = require(\"../helpers\");\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nconst followers_paginator_v1_1 = require(\"../paginators/followers.paginator.v1\");\nconst friends_paginator_v1_1 = require(\"../paginators/friends.paginator.v1\");\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /* Tweets */\n    /**\n     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('statuses/show.json', { tweet_mode: 'extended', id: tweetId, ...options });\n    }\n    tweets(ids, options = {}) {\n        return this.post('statuses/lookup.json', { tweet_mode: 'extended', id: ids, ...options });\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n    oembedTweet(tweetId, options = {}) {\n        return this.get('oembed', {\n            url: `https://twitter.com/i/statuses/${tweetId}`,\n            ...options,\n        }, { prefix: 'https://publish.twitter.com/' });\n    }\n    /* Tweets timelines */\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n    async homeTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/home_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n    async mentionTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Users */\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n    user(user) {\n        return this.get('users/show.json', { tweet_mode: 'extended', ...user });\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n    users(query) {\n        return this.get('users/lookup.json', { tweet_mode: 'extended', ...query });\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n    verifyCredentials(options = {}) {\n        return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n    async listMutedUsers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/list.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n    async listMutedUserIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/ids.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of user objects of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list\n     */\n    async userFriendList(options = {}) {\n        const queryParams = {\n            ...options,\n        };\n        const initialRq = await this.get('friends/list.json', queryParams, { fullResponse: true });\n        return new friends_paginator_v1_1.UserFriendListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of user objects of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list\n     */\n    async userFollowerList(options = {}) {\n        const queryParams = {\n            ...options,\n        };\n        const initialRq = await this.get('followers/list.json', queryParams, { fullResponse: true });\n        return new followers_paginator_v1_1.UserFollowerListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids\n     */\n    async userFollowerIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('followers/ids.json', queryParams, { fullResponse: true });\n        return new followers_paginator_v1_1.UserFollowerIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids\n     */\n    async userFollowingIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friends/ids.json', queryParams, { fullResponse: true });\n        return new friends_paginator_v1_1.UserFollowersIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n    async searchUsers(query, options = {}) {\n        const queryParams = {\n            q: query,\n            tweet_mode: 'extended',\n            page: 1,\n            ...options,\n        };\n        const initialRq = await this.get('users/search.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.UserSearchV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Friendship API */\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n    friendship(sources) {\n        return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n    friendships(friendships) {\n        return this.get('friendships/lookup.json', friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n    friendshipsNoRetweets() {\n        return this.get('friendships/no_retweets/ids.json', { stringify_ids: true });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n    async friendshipsIncoming(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/incoming.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n    async friendshipsOutgoing(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/outgoing.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Account/user API */\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    accountSettings() {\n        return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n    userProfileBannerSizes(params) {\n        return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n    list(options) {\n        return this.get('lists/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n    lists(options = {}) {\n        return this.get('lists/list.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n    async listMembers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/members.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n    listGetMember(options) {\n        return this.get('lists/members/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n    async listMemberships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/memberships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n    async listOwnerships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/ownerships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n    async listStatuses(options) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/statuses.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n    async listSubscribers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscribers.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscribersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n    listGetSubscriber(options) {\n        return this.get('lists/subscribers/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n    async listSubscriptions(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscriptions.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Media upload API */\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n    mediaInfo(mediaId) {\n        return this.get('media/upload.json', {\n            command: 'STATUS',\n            media_id: mediaId,\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n    }\n    filterStream({ autoConnect, ...params } = {}) {\n        const parameters = {};\n        for (const [key, value] of Object.entries(params)) {\n            if (key === 'follow' || key === 'track') {\n                parameters[key] = value.toString();\n            }\n            else if (key === 'locations') {\n                const locations = value;\n                parameters.locations = (0, helpers_1.arrayWrap)(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n            }\n            else {\n                parameters[key] = value;\n            }\n        }\n        const streamClient = this.stream;\n        return streamClient.postStream('statuses/filter.json', parameters, { autoConnect });\n    }\n    sampleStream({ autoConnect, ...params } = {}) {\n        const streamClient = this.stream;\n        return streamClient.getStream('statuses/sample.json', params, { autoConnect });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n    get stream() {\n        const copiedClient = new client_v1_1.default(this);\n        copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n        return copiedClient;\n    }\n    /* Trends API */\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n    trendsByPlace(woeId, options = {}) {\n        return this.get('trends/place.json', { id: woeId, ...options });\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n    trendsAvailable() {\n        return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n    trendsClosest(lat, long) {\n        return this.get('trends/closest.json', { lat, long });\n    }\n    /* Geo API */\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n    geoPlace(placeId) {\n        return this.get('geo/id/:place_id.json', undefined, { params: { place_id: placeId } });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n    geoSearch(options) {\n        return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n    geoReverseGeoCode(options) {\n        return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n    rateLimitStatuses(...resources) {\n        return this.get('application/rate_limit_status.json', { resources });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n    supportedLanguages() {\n        return this.get('help/languages.json');\n    }\n}\nexports.default = TwitterApiv1ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}