{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport { TwitterApi } from 'twitter-api-v2';\nconst Oauth = () => {\n  _s();\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  const CALLBACK_URL = process.env.REACT_APP_CALLBACK_URL;\n  const navigate = useNavigate();\n\n  // if로 undefined 처리)\n  if (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL) {\n    const client = new TwitterApi({\n      clientId: CLIENT_ID,\n      clientSecret: CLIENT_SECRET\n    });\n\n    // Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\n    const {\n      url,\n      codeVerifier,\n      state\n    } = client.generateOAuth2AuthLink(CALLBACK_URL, {\n      scope: ['tweet.read', 'users.read', 'offline.access']\n    });\n\n    // Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\n\n    // client.generateAuthLink();\n    navigate(url);\n    // console.log(url);\n  }\n};\n_s(Oauth, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Oauth;\nexport default Oauth;\nvar _c;\n$RefreshReg$(_c, \"Oauth\");","map":{"version":3,"names":["useNavigate","TwitterApi","Oauth","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","navigate","client","clientId","clientSecret","url","codeVerifier","state","generateOAuth2AuthLink","scope"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/login/Oauth.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\n\r\nconst Oauth=()=>{\r\n\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst navigate = useNavigate();\r\n\r\n\t// if로 undefined 처리)\r\n\tif (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL){\r\n\t\tconst client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\r\n\r\n\t\t// Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\r\n\t\tconst { url, codeVerifier, state } = client.generateOAuth2AuthLink(CALLBACK_URL, { scope: ['tweet.read', 'users.read', 'offline.access'] });\r\n\r\n\t\t// Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\r\n\r\n\t\t// client.generateAuthLink();\r\n\t\tnavigate(url);\r\n\t\t// console.log(url);\r\n\t}\r\n\r\n}\r\n\r\nexport default Oauth;"],"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,MAAMC,KAAK,GAAC,MAAI;EAAA;EAEd,MAAMC,SAAS,GAACC,OAAO,CAACC,GAAG,CAACC,mBAAmB;EAChD,MAAMC,aAAa,GAACH,OAAO,CAACC,GAAG,CAACG,uBAAuB;EACvD,MAAMC,YAAY,GAACL,OAAO,CAACC,GAAG,CAACK,sBAAsB;EACrD,MAAMC,QAAQ,GAAGX,WAAW,EAAE;;EAE9B;EACA,IAAIG,SAAS,IAAII,aAAa,IAAIE,YAAY,EAAC;IAC9C,MAAMG,MAAM,GAAG,IAAIX,UAAU,CAAC;MAAEY,QAAQ,EAAEV,SAAS;MAAEW,YAAY,EAAEP;IAAc,CAAC,CAAC;;IAEnF;IACA,MAAM;MAAEQ,GAAG;MAAEC,YAAY;MAAEC;IAAM,CAAC,GAAGL,MAAM,CAACM,sBAAsB,CAACT,YAAY,EAAE;MAAEU,KAAK,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,gBAAgB;IAAE,CAAC,CAAC;;IAE3I;;IAEA;IACAR,QAAQ,CAACI,GAAG,CAAC;IACb;EACD;AAED,CAAC;AAAA,GArBKb,KAAK;EAAA,QAKOF,WAAW;AAAA;AAAA,KALvBE,KAAK;AAuBX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}