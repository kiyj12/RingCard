{"ast":null,"code":"const {\n  inspect\n} = require('util');\nconst url = require('url');\nconst {\n  RPError\n} = require('./errors');\nconst getClient = require('./client');\nconst registry = require('./issuer_registry');\nconst processResponse = require('./helpers/process_response');\nconst webfingerNormalize = require('./helpers/webfinger_normalize');\nconst request = require('./helpers/request');\nconst clone = require('./helpers/deep_clone');\nconst {\n  keystore\n} = require('./helpers/issuer');\nconst AAD_MULTITENANT_DISCOVERY = ['https://login.microsoftonline.com/common/.well-known/openid-configuration', 'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration', 'https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration', 'https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration'];\nconst AAD_MULTITENANT = Symbol();\nconst ISSUER_DEFAULTS = {\n  claim_types_supported: ['normal'],\n  claims_parameter_supported: false,\n  grant_types_supported: ['authorization_code', 'implicit'],\n  request_parameter_supported: false,\n  request_uri_parameter_supported: true,\n  require_request_uri_registration: false,\n  response_modes_supported: ['query', 'fragment'],\n  token_endpoint_auth_methods_supported: ['client_secret_basic']\n};\nclass Issuer {\n  #metadata;\n  constructor() {\n    let meta = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const aadIssValidation = meta[AAD_MULTITENANT];\n    delete meta[AAD_MULTITENANT];\n    ['introspection', 'revocation'].forEach(endpoint => {\n      // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n      // are defined\n      if (meta[`${endpoint}_endpoint`] && meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined && meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined) {\n        if (meta.token_endpoint_auth_methods_supported) {\n          meta[`${endpoint}_endpoint_auth_methods_supported`] = meta.token_endpoint_auth_methods_supported;\n        }\n        if (meta.token_endpoint_auth_signing_alg_values_supported) {\n          meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] = meta.token_endpoint_auth_signing_alg_values_supported;\n        }\n      }\n    });\n    this.#metadata = new Map();\n    Object.entries(meta).forEach(_ref => {\n      let [key, value] = _ref;\n      this.#metadata.set(key, value);\n      if (!this[key]) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this.#metadata.get(key);\n          },\n          enumerable: true\n        });\n      }\n    });\n    registry.set(this.issuer, this);\n    const Client = getClient(this, aadIssValidation);\n    Object.defineProperties(this, {\n      Client: {\n        value: Client,\n        enumerable: true\n      },\n      FAPI1Client: {\n        value: class FAPI1Client extends Client {},\n        enumerable: true\n      }\n    });\n  }\n  get metadata() {\n    return clone(Object.fromEntries(this.#metadata.entries()));\n  }\n  static async webfinger(input) {\n    const resource = webfingerNormalize(input);\n    const {\n      host\n    } = url.parse(resource);\n    const webfingerUrl = `https://${host}/.well-known/webfinger`;\n    const response = await request.call(this, {\n      method: 'GET',\n      url: webfingerUrl,\n      responseType: 'json',\n      searchParams: {\n        resource,\n        rel: 'http://openid.net/specs/connect/1.0/issuer'\n      },\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const body = processResponse(response);\n    const location = Array.isArray(body.links) && body.links.find(link => typeof link === 'object' && link.rel === 'http://openid.net/specs/connect/1.0/issuer' && link.href);\n    if (!location) {\n      throw new RPError({\n        message: 'no issuer found in webfinger response',\n        body\n      });\n    }\n    if (typeof location.href !== 'string' || !location.href.startsWith('https://')) {\n      throw new RPError({\n        printf: ['invalid issuer location %s', location.href],\n        body\n      });\n    }\n    const expectedIssuer = location.href;\n    if (registry.has(expectedIssuer)) {\n      return registry.get(expectedIssuer);\n    }\n    const issuer = await this.discover(expectedIssuer);\n    if (issuer.issuer !== expectedIssuer) {\n      registry.del(issuer.issuer);\n      throw new RPError('discovered issuer mismatch, expected %s, got: %s', expectedIssuer, issuer.issuer);\n    }\n    return issuer;\n  }\n  static async discover(uri) {\n    const parsed = url.parse(uri);\n    if (parsed.pathname.includes('/.well-known/')) {\n      const response = await request.call(this, {\n        method: 'GET',\n        responseType: 'json',\n        url: uri,\n        headers: {\n          Accept: 'application/json'\n        }\n      });\n      const body = processResponse(response);\n      return new Issuer({\n        ...ISSUER_DEFAULTS,\n        ...body,\n        [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find(discoveryURL => uri.startsWith(discoveryURL))\n      });\n    }\n    let pathname;\n    if (parsed.pathname.endsWith('/')) {\n      pathname = `${parsed.pathname}.well-known/openid-configuration`;\n    } else {\n      pathname = `${parsed.pathname}/.well-known/openid-configuration`;\n    }\n    const wellKnownUri = url.format({\n      ...parsed,\n      pathname\n    });\n    const response = await request.call(this, {\n      method: 'GET',\n      responseType: 'json',\n      url: wellKnownUri,\n      headers: {\n        Accept: 'application/json'\n      }\n    });\n    const body = processResponse(response);\n    return new Issuer({\n      ...ISSUER_DEFAULTS,\n      ...body,\n      [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find(discoveryURL => wellKnownUri.startsWith(discoveryURL))\n    });\n  }\n  async reloadJwksUri() {\n    await keystore.call(this, true);\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(this.metadata, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true\n    })}`;\n  }\n}\nmodule.exports = Issuer;","map":{"version":3,"names":["inspect","require","url","RPError","getClient","registry","processResponse","webfingerNormalize","request","clone","keystore","AAD_MULTITENANT_DISCOVERY","AAD_MULTITENANT","Symbol","ISSUER_DEFAULTS","claim_types_supported","claims_parameter_supported","grant_types_supported","request_parameter_supported","request_uri_parameter_supported","require_request_uri_registration","response_modes_supported","token_endpoint_auth_methods_supported","Issuer","metadata","constructor","meta","aadIssValidation","forEach","endpoint","undefined","token_endpoint_auth_signing_alg_values_supported","Map","Object","entries","key","value","set","defineProperty","get","enumerable","issuer","Client","defineProperties","FAPI1Client","fromEntries","webfinger","input","resource","host","parse","webfingerUrl","response","call","method","responseType","searchParams","rel","headers","Accept","body","location","Array","isArray","links","find","link","href","message","startsWith","printf","expectedIssuer","has","discover","del","uri","parsed","pathname","includes","discoveryURL","endsWith","wellKnownUri","format","reloadJwksUri","custom","name","depth","Infinity","colors","process","stdout","isTTY","compact","sorted","module","exports"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/openid-client/lib/issuer.js"],"sourcesContent":["const { inspect } = require('util');\nconst url = require('url');\n\nconst { RPError } = require('./errors');\nconst getClient = require('./client');\nconst registry = require('./issuer_registry');\nconst processResponse = require('./helpers/process_response');\nconst webfingerNormalize = require('./helpers/webfinger_normalize');\nconst request = require('./helpers/request');\nconst clone = require('./helpers/deep_clone');\nconst { keystore } = require('./helpers/issuer');\n\nconst AAD_MULTITENANT_DISCOVERY = [\n  'https://login.microsoftonline.com/common/.well-known/openid-configuration',\n  'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration',\n  'https://login.microsoftonline.com/organizations/v2.0/.well-known/openid-configuration',\n  'https://login.microsoftonline.com/consumers/v2.0/.well-known/openid-configuration',\n];\nconst AAD_MULTITENANT = Symbol();\nconst ISSUER_DEFAULTS = {\n  claim_types_supported: ['normal'],\n  claims_parameter_supported: false,\n  grant_types_supported: ['authorization_code', 'implicit'],\n  request_parameter_supported: false,\n  request_uri_parameter_supported: true,\n  require_request_uri_registration: false,\n  response_modes_supported: ['query', 'fragment'],\n  token_endpoint_auth_methods_supported: ['client_secret_basic'],\n};\n\nclass Issuer {\n  #metadata;\n  constructor(meta = {}) {\n    const aadIssValidation = meta[AAD_MULTITENANT];\n    delete meta[AAD_MULTITENANT];\n    ['introspection', 'revocation'].forEach((endpoint) => {\n      // if intro/revocation endpoint auth specific meta is missing use the token ones if they\n      // are defined\n      if (\n        meta[`${endpoint}_endpoint`] &&\n        meta[`${endpoint}_endpoint_auth_methods_supported`] === undefined &&\n        meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] === undefined\n      ) {\n        if (meta.token_endpoint_auth_methods_supported) {\n          meta[`${endpoint}_endpoint_auth_methods_supported`] =\n            meta.token_endpoint_auth_methods_supported;\n        }\n        if (meta.token_endpoint_auth_signing_alg_values_supported) {\n          meta[`${endpoint}_endpoint_auth_signing_alg_values_supported`] =\n            meta.token_endpoint_auth_signing_alg_values_supported;\n        }\n      }\n    });\n\n    this.#metadata = new Map();\n\n    Object.entries(meta).forEach(([key, value]) => {\n      this.#metadata.set(key, value);\n      if (!this[key]) {\n        Object.defineProperty(this, key, {\n          get() {\n            return this.#metadata.get(key);\n          },\n          enumerable: true,\n        });\n      }\n    });\n\n    registry.set(this.issuer, this);\n\n    const Client = getClient(this, aadIssValidation);\n\n    Object.defineProperties(this, {\n      Client: { value: Client, enumerable: true },\n      FAPI1Client: { value: class FAPI1Client extends Client {}, enumerable: true },\n    });\n  }\n\n  get metadata() {\n    return clone(Object.fromEntries(this.#metadata.entries()));\n  }\n\n  static async webfinger(input) {\n    const resource = webfingerNormalize(input);\n    const { host } = url.parse(resource);\n    const webfingerUrl = `https://${host}/.well-known/webfinger`;\n\n    const response = await request.call(this, {\n      method: 'GET',\n      url: webfingerUrl,\n      responseType: 'json',\n      searchParams: { resource, rel: 'http://openid.net/specs/connect/1.0/issuer' },\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    const body = processResponse(response);\n\n    const location =\n      Array.isArray(body.links) &&\n      body.links.find(\n        (link) =>\n          typeof link === 'object' &&\n          link.rel === 'http://openid.net/specs/connect/1.0/issuer' &&\n          link.href,\n      );\n\n    if (!location) {\n      throw new RPError({\n        message: 'no issuer found in webfinger response',\n        body,\n      });\n    }\n\n    if (typeof location.href !== 'string' || !location.href.startsWith('https://')) {\n      throw new RPError({\n        printf: ['invalid issuer location %s', location.href],\n        body,\n      });\n    }\n\n    const expectedIssuer = location.href;\n    if (registry.has(expectedIssuer)) {\n      return registry.get(expectedIssuer);\n    }\n\n    const issuer = await this.discover(expectedIssuer);\n\n    if (issuer.issuer !== expectedIssuer) {\n      registry.del(issuer.issuer);\n      throw new RPError(\n        'discovered issuer mismatch, expected %s, got: %s',\n        expectedIssuer,\n        issuer.issuer,\n      );\n    }\n    return issuer;\n  }\n\n  static async discover(uri) {\n    const parsed = url.parse(uri);\n\n    if (parsed.pathname.includes('/.well-known/')) {\n      const response = await request.call(this, {\n        method: 'GET',\n        responseType: 'json',\n        url: uri,\n        headers: {\n          Accept: 'application/json',\n        },\n      });\n      const body = processResponse(response);\n      return new Issuer({\n        ...ISSUER_DEFAULTS,\n        ...body,\n        [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find((discoveryURL) =>\n          uri.startsWith(discoveryURL),\n        ),\n      });\n    }\n\n    let pathname;\n    if (parsed.pathname.endsWith('/')) {\n      pathname = `${parsed.pathname}.well-known/openid-configuration`;\n    } else {\n      pathname = `${parsed.pathname}/.well-known/openid-configuration`;\n    }\n\n    const wellKnownUri = url.format({ ...parsed, pathname });\n\n    const response = await request.call(this, {\n      method: 'GET',\n      responseType: 'json',\n      url: wellKnownUri,\n      headers: {\n        Accept: 'application/json',\n      },\n    });\n    const body = processResponse(response);\n    return new Issuer({\n      ...ISSUER_DEFAULTS,\n      ...body,\n      [AAD_MULTITENANT]: !!AAD_MULTITENANT_DISCOVERY.find((discoveryURL) =>\n        wellKnownUri.startsWith(discoveryURL),\n      ),\n    });\n  }\n\n  async reloadJwksUri() {\n    await keystore.call(this, true);\n  }\n\n  /* istanbul ignore next */\n  [inspect.custom]() {\n    return `${this.constructor.name} ${inspect(this.metadata, {\n      depth: Infinity,\n      colors: process.stdout.isTTY,\n      compact: false,\n      sorted: true,\n    })}`;\n  }\n}\n\nmodule.exports = Issuer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}