{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EStreamParserEvent = void 0;\nvar events_1 = require(\"events\");\nvar TweetStreamParser = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TweetStreamParser, _events_1$EventEmitte);\n  var _super = _createSuper(TweetStreamParser);\n  function TweetStreamParser() {\n    var _this;\n    _classCallCheck(this, TweetStreamParser);\n    _this = _super.apply(this, arguments);\n    _this.currentMessage = '';\n    return _this;\n  }\n  // Code partially belongs to twitter-stream-api for this\n  // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n  _createClass(TweetStreamParser, [{\n    key: \"push\",\n    value: function push(chunk) {\n      this.currentMessage += chunk;\n      chunk = this.currentMessage;\n      var size = chunk.length;\n      var start = 0;\n      var offset = 0;\n      while (offset < size) {\n        // Take [offset, offset+1] inside a new string\n        if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n          // If chunk contains \\r\\n after current offset,\n          // parse [start, ..., offset] as a tweet\n          var piece = chunk.slice(start, offset);\n          start = offset += 2;\n          // If empty object\n          if (!piece.length) {\n            continue;\n          }\n          try {\n            var payload = JSON.parse(piece);\n            if (payload) {\n              this.emit(EStreamParserEvent.ParsedData, payload);\n              continue;\n            }\n          } catch (error) {\n            this.emit(EStreamParserEvent.ParseError, error);\n          }\n        }\n        offset++;\n      }\n      this.currentMessage = chunk.slice(start, size);\n    }\n    /** Reset the currently stored message (f.e. on connection reset) */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.currentMessage = '';\n    }\n  }]);\n  return TweetStreamParser;\n}(events_1.EventEmitter);\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n(function (EStreamParserEvent) {\n  EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n  EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","EStreamParserEvent","events_1","require","TweetStreamParser","arguments","currentMessage","chunk","size","length","start","offset","slice","piece","payload","JSON","parse","emit","ParsedData","error","ParseError","EventEmitter","default"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/stream/TweetStreamParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EStreamParserEvent = void 0;\nconst events_1 = require(\"events\");\nclass TweetStreamParser extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.currentMessage = '';\n    }\n    // Code partially belongs to twitter-stream-api for this\n    // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n    push(chunk) {\n        this.currentMessage += chunk;\n        chunk = this.currentMessage;\n        const size = chunk.length;\n        let start = 0;\n        let offset = 0;\n        while (offset < size) {\n            // Take [offset, offset+1] inside a new string\n            if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n                // If chunk contains \\r\\n after current offset,\n                // parse [start, ..., offset] as a tweet\n                const piece = chunk.slice(start, offset);\n                start = offset += 2;\n                // If empty object\n                if (!piece.length) {\n                    continue;\n                }\n                try {\n                    const payload = JSON.parse(piece);\n                    if (payload) {\n                        this.emit(EStreamParserEvent.ParsedData, payload);\n                        continue;\n                    }\n                }\n                catch (error) {\n                    this.emit(EStreamParserEvent.ParseError, error);\n                }\n            }\n            offset++;\n        }\n        this.currentMessage = chunk.slice(start, size);\n    }\n    /** Reset the currently stored message (f.e. on connection reset) */\n    reset() {\n        this.currentMessage = '';\n    }\n}\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n(function (EStreamParserEvent) {\n    EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n    EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));\n"],"mappings":"AAAA,YAAY;;AAAC;AAAA;AAAA;AAAA;AACbA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,IAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAAC,IAC7BC,iBAAiB;EAAA;EAAA;EACnB,6BAAc;IAAA;IAAA;IACV,2BAASC,SAAS;IAClB,MAAKC,cAAc,GAAG,EAAE;IAAC;EAC7B;EACA;EACA;EAAA;IAAA;IAAA,OACA,cAAKC,KAAK,EAAE;MACR,IAAI,CAACD,cAAc,IAAIC,KAAK;MAC5BA,KAAK,GAAG,IAAI,CAACD,cAAc;MAC3B,IAAME,IAAI,GAAGD,KAAK,CAACE,MAAM;MACzB,IAAIC,KAAK,GAAG,CAAC;MACb,IAAIC,MAAM,GAAG,CAAC;MACd,OAAOA,MAAM,GAAGH,IAAI,EAAE;QAClB;QACA,IAAID,KAAK,CAACK,KAAK,CAACD,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE;UAC5C;UACA;UACA,IAAME,KAAK,GAAGN,KAAK,CAACK,KAAK,CAACF,KAAK,EAAEC,MAAM,CAAC;UACxCD,KAAK,GAAGC,MAAM,IAAI,CAAC;UACnB;UACA,IAAI,CAACE,KAAK,CAACJ,MAAM,EAAE;YACf;UACJ;UACA,IAAI;YACA,IAAMK,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;YACjC,IAAIC,OAAO,EAAE;cACT,IAAI,CAACG,IAAI,CAAChB,kBAAkB,CAACiB,UAAU,EAAEJ,OAAO,CAAC;cACjD;YACJ;UACJ,CAAC,CACD,OAAOK,KAAK,EAAE;YACV,IAAI,CAACF,IAAI,CAAChB,kBAAkB,CAACmB,UAAU,EAAED,KAAK,CAAC;UACnD;QACJ;QACAR,MAAM,EAAE;MACZ;MACA,IAAI,CAACL,cAAc,GAAGC,KAAK,CAACK,KAAK,CAACF,KAAK,EAAEF,IAAI,CAAC;IAClD;IACA;EAAA;IAAA;IAAA,OACA,iBAAQ;MACJ,IAAI,CAACF,cAAc,GAAG,EAAE;IAC5B;EAAC;EAAA;AAAA,EA1C2BJ,QAAQ,CAACmB,YAAY;AA4CrDtB,OAAO,CAACuB,OAAO,GAAGlB,iBAAiB;AACnC,IAAIH,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,YAAY,CAAC,GAAG,aAAa;EAChDA,kBAAkB,CAAC,YAAY,CAAC,GAAG,aAAa;AACpD,CAAC,EAAEA,kBAAkB,GAAGF,OAAO,CAACE,kBAAkB,KAAKF,OAAO,CAACE,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}