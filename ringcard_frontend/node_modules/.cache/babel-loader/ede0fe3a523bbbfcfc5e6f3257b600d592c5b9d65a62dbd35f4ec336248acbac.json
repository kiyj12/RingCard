{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Twitter, Inc.\n// SPDX-License-Identifier: Apache-2.0\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.paginate = exports.rest = exports.stream = exports.request = void 0;\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst utils_1 = require(\"./utils\");\nlet AbortController;\nif (!globalThis.AbortController) {\n  AbortController = require(\"abort-controller\");\n} else {\n  // https://nodejs.org/api/globals.html#class-abortcontroller\n  // AbortController available in v14.17.0 as experimental\n  AbortController = globalThis.AbortController;\n}\nasync function fetchWithRetries(url, init) {\n  let max_retries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const res = await (0, node_fetch_1.default)(url, init);\n  if (res.status === 429 && max_retries > 0) {\n    const rateLimitReset = Number(res.headers.get(\"x-rate-limit-reset\"));\n    const rateLimitRemaining = Number(res.headers.get(\"x-rate-limit-remaining\"));\n    const timeTillReset = rateLimitReset * 1000 - Date.now();\n    let timeToWait = 1000;\n    if (rateLimitRemaining === 0) timeToWait = timeTillReset;\n    await new Promise(resolve => setTimeout(resolve, timeToWait));\n    return fetchWithRetries(url, init, max_retries - 1);\n  }\n  return res;\n}\nclass TwitterResponseError extends Error {\n  constructor(status, statusText, headers, error) {\n    super();\n    this.status = status;\n    this.statusText = statusText;\n    this.headers = Object.fromEntries(headers);\n    this.error = error;\n  }\n}\nasync function request(_ref) {\n  let {\n    auth,\n    endpoint,\n    params: query = {},\n    request_body,\n    method,\n    max_retries,\n    base_url = \"https://api.twitter.com\",\n    headers,\n    ...options\n  } = _ref;\n  const url = new URL(base_url + endpoint);\n  url.search = (0, utils_1.buildQueryString)(query);\n  const includeBody = (method === \"POST\" || method === \"PUT\") && !!request_body;\n  const authHeader = auth ? await auth.getAuthHeader(url.href, method) : undefined;\n  const response = await fetchWithRetries(url.toString(), {\n    headers: {\n      ...(includeBody ? {\n        \"Content-Type\": \"application/json; charset=utf-8\"\n      } : undefined),\n      ...authHeader,\n      ...headers\n    },\n    method,\n    body: includeBody ? JSON.stringify(request_body) : undefined,\n    // Timeout if you don't see any data for 60 seconds\n    // https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data\n    timeout: 60000,\n    ...options\n  }, max_retries);\n  if (!response.ok) {\n    const error = await response.json();\n    throw new TwitterResponseError(response.status, response.statusText, response.headers, error);\n  }\n  return response;\n}\nexports.request = request;\nasync function* stream(args) {\n  const controller = new AbortController();\n  const {\n    body\n  } = await request({\n    signal: controller.signal,\n    ...args\n  });\n  if (body === null) throw new Error(\"No response returned from stream\");\n  let buf = \"\";\n  try {\n    for await (const chunk of body) {\n      buf += chunk.toString();\n      const lines = buf.split(\"\\r\\n\");\n      for (const [i, line] of lines.entries()) {\n        if (i === lines.length - 1) {\n          buf = line;\n        } else if (line) yield JSON.parse(line);\n      }\n    }\n  } finally {\n    controller.abort();\n  }\n}\nexports.stream = stream;\nasync function rest(args) {\n  const response = await request(args);\n  return response.json();\n}\nexports.rest = rest;\nfunction paginate(args) {\n  return {\n    then(resolve, reject) {\n      return rest(args).then(resolve, reject);\n    },\n    async *[Symbol.asyncIterator]() {\n      let ended = false;\n      let pagination_token;\n      while (!ended) {\n        const response = await rest({\n          ...args,\n          params: {\n            ...args.params,\n            ...(pagination_token && {\n              pagination_token\n            })\n          }\n        });\n        yield response;\n        pagination_token = response?.meta?.next_token;\n        if (!pagination_token) {\n          ended = true;\n        }\n      }\n    }\n  };\n}\nexports.paginate = paginate;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","paginate","rest","stream","request","node_fetch_1","require","utils_1","AbortController","globalThis","fetchWithRetries","url","init","max_retries","res","default","status","rateLimitReset","Number","headers","get","rateLimitRemaining","timeTillReset","Date","now","timeToWait","Promise","resolve","setTimeout","TwitterResponseError","Error","constructor","statusText","error","fromEntries","auth","endpoint","params","query","request_body","method","base_url","options","URL","search","buildQueryString","includeBody","authHeader","getAuthHeader","href","undefined","response","toString","body","JSON","stringify","timeout","ok","json","args","controller","signal","buf","chunk","lines","split","i","line","entries","length","parse","abort","then","reject","Symbol","asyncIterator","ended","pagination_token","meta","next_token"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33copy/ringcard/ringcard_frontend/node_modules/twitter-api-sdk/dist/request.js"],"sourcesContent":["\"use strict\";\n// Copyright 2021 Twitter, Inc.\n// SPDX-License-Identifier: Apache-2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paginate = exports.rest = exports.stream = exports.request = void 0;\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst utils_1 = require(\"./utils\");\nlet AbortController;\nif (!globalThis.AbortController) {\n    AbortController = require(\"abort-controller\");\n}\nelse {\n    // https://nodejs.org/api/globals.html#class-abortcontroller\n    // AbortController available in v14.17.0 as experimental\n    AbortController = globalThis.AbortController;\n}\nasync function fetchWithRetries(url, init, max_retries = 0) {\n    const res = await (0, node_fetch_1.default)(url, init);\n    if (res.status === 429 && max_retries > 0) {\n        const rateLimitReset = Number(res.headers.get(\"x-rate-limit-reset\"));\n        const rateLimitRemaining = Number(res.headers.get(\"x-rate-limit-remaining\"));\n        const timeTillReset = rateLimitReset * 1000 - Date.now();\n        let timeToWait = 1000;\n        if (rateLimitRemaining === 0)\n            timeToWait = timeTillReset;\n        await new Promise((resolve) => setTimeout(resolve, timeToWait));\n        return fetchWithRetries(url, init, max_retries - 1);\n    }\n    return res;\n}\nclass TwitterResponseError extends Error {\n    constructor(status, statusText, headers, error) {\n        super();\n        this.status = status;\n        this.statusText = statusText;\n        this.headers = Object.fromEntries(headers);\n        this.error = error;\n    }\n}\nasync function request({ auth, endpoint, params: query = {}, request_body, method, max_retries, base_url = \"https://api.twitter.com\", headers, ...options }) {\n    const url = new URL(base_url + endpoint);\n    url.search = (0, utils_1.buildQueryString)(query);\n    const includeBody = (method === \"POST\" || method === \"PUT\") && !!request_body;\n    const authHeader = auth\n        ? await auth.getAuthHeader(url.href, method)\n        : undefined;\n    const response = await fetchWithRetries(url.toString(), {\n        headers: {\n            ...(includeBody\n                ? { \"Content-Type\": \"application/json; charset=utf-8\" }\n                : undefined),\n            ...authHeader,\n            ...headers,\n        },\n        method,\n        body: includeBody ? JSON.stringify(request_body) : undefined,\n        // Timeout if you don't see any data for 60 seconds\n        // https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data\n        timeout: 60000,\n        ...options,\n    }, max_retries);\n    if (!response.ok) {\n        const error = await response.json();\n        throw new TwitterResponseError(response.status, response.statusText, response.headers, error);\n    }\n    return response;\n}\nexports.request = request;\nasync function* stream(args) {\n    const controller = new AbortController();\n    const { body } = await request({\n        signal: controller.signal,\n        ...args,\n    });\n    if (body === null)\n        throw new Error(\"No response returned from stream\");\n    let buf = \"\";\n    try {\n        for await (const chunk of body) {\n            buf += chunk.toString();\n            const lines = buf.split(\"\\r\\n\");\n            for (const [i, line] of lines.entries()) {\n                if (i === lines.length - 1) {\n                    buf = line;\n                }\n                else if (line)\n                    yield JSON.parse(line);\n            }\n        }\n    }\n    finally {\n        controller.abort();\n    }\n}\nexports.stream = stream;\nasync function rest(args) {\n    const response = await request(args);\n    return response.json();\n}\nexports.rest = rest;\nfunction paginate(args) {\n    return {\n        then(resolve, reject) {\n            return rest(args).then(resolve, reject);\n        },\n        async *[Symbol.asyncIterator]() {\n            let ended = false;\n            let pagination_token;\n            while (!ended) {\n                const response = await rest({\n                    ...args,\n                    params: {\n                        ...args.params,\n                        ...(pagination_token && { pagination_token }),\n                    },\n                });\n                yield response;\n                pagination_token = response?.meta?.next_token;\n                if (!pagination_token) {\n                    ended = true;\n                }\n            }\n        },\n    };\n}\nexports.paginate = paginate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}