{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _objectWithoutProperties = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _excluded = [\"autoConnect\"],\n  _excluded2 = [\"autoConnect\"];\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nvar globals_1 = require(\"../globals\");\nvar helpers_1 = require(\"../helpers\");\nvar client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nvar tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nvar mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nvar followers_paginator_v1_1 = require(\"../paginators/followers.paginator.v1\");\nvar friends_paginator_v1_1 = require(\"../paginators/friends.paginator.v1\");\nvar user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nvar list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nvar TwitterApiv1ReadOnly = /*#__PURE__*/function (_client_subclient_1$d) {\n  _inherits(TwitterApiv1ReadOnly, _client_subclient_1$d);\n  var _super = _createSuper(TwitterApiv1ReadOnly);\n  function TwitterApiv1ReadOnly() {\n    var _this;\n    _classCallCheck(this, TwitterApiv1ReadOnly);\n    _this = _super.apply(this, arguments);\n    _this._prefix = globals_1.API_V1_1_PREFIX;\n    return _this;\n  }\n  /* Tweets */\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n   */\n  _createClass(TwitterApiv1ReadOnly, [{\n    key: \"singleTweet\",\n    value: function singleTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('statuses/show.json', _objectSpread({\n        tweet_mode: 'extended',\n        id: tweetId\n      }, options));\n    }\n  }, {\n    key: \"tweets\",\n    value: function tweets(ids) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.post('statuses/lookup.json', _objectSpread({\n        tweet_mode: 'extended',\n        id: ids\n      }, options));\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n  }, {\n    key: \"oembedTweet\",\n    value: function oembedTweet(tweetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('oembed', _objectSpread({\n        url: \"https://twitter.com/i/statuses/\".concat(tweetId)\n      }, options), {\n        prefix: 'https://publish.twitter.com/'\n      });\n    }\n    /* Tweets timelines */\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n  }, {\n    key: \"homeTimeline\",\n    value: function () {\n      var _homeTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var options,\n          queryParams,\n          initialRq,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context.next = 4;\n                return this.get('statuses/home_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context.sent;\n                return _context.abrupt(\"return\", new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function homeTimeline() {\n        return _homeTimeline.apply(this, arguments);\n      }\n      return homeTimeline;\n    }()\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n  }, {\n    key: \"mentionTimeline\",\n    value: function () {\n      var _mentionTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var options,\n          queryParams,\n          initialRq,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context2.next = 4;\n                return this.get('statuses/mentions_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context2.sent;\n                return _context2.abrupt(\"return\", new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function mentionTimeline() {\n        return _mentionTimeline.apply(this, arguments);\n      }\n      return mentionTimeline;\n    }()\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n  }, {\n    key: \"userTimeline\",\n    value: function () {\n      var _userTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(userId) {\n        var options,\n          queryParams,\n          initialRq,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  user_id: userId\n                }, options);\n                _context3.next = 4;\n                return this.get('statuses/user_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context3.sent;\n                return _context3.abrupt(\"return\", new tweet_paginator_v1_1.UserTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function userTimeline(_x) {\n        return _userTimeline.apply(this, arguments);\n      }\n      return userTimeline;\n    }()\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n  }, {\n    key: \"userTimelineByUsername\",\n    value: function () {\n      var _userTimelineByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(username) {\n        var options,\n          queryParams,\n          initialRq,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  screen_name: username\n                }, options);\n                _context4.next = 4;\n                return this.get('statuses/user_timeline.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context4.sent;\n                return _context4.abrupt(\"return\", new tweet_paginator_v1_1.UserTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function userTimelineByUsername(_x2) {\n        return _userTimelineByUsername.apply(this, arguments);\n      }\n      return userTimelineByUsername;\n    }()\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n  }, {\n    key: \"favoriteTimeline\",\n    value: function () {\n      var _favoriteTimeline = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(userId) {\n        var options,\n          queryParams,\n          initialRq,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  user_id: userId\n                }, options);\n                _context5.next = 4;\n                return this.get('favorites/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context5.sent;\n                return _context5.abrupt(\"return\", new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function favoriteTimeline(_x3) {\n        return _favoriteTimeline.apply(this, arguments);\n      }\n      return favoriteTimeline;\n    }()\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n  }, {\n    key: \"favoriteTimelineByUsername\",\n    value: function () {\n      var _favoriteTimelineByUsername = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(username) {\n        var options,\n          queryParams,\n          initialRq,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended',\n                  screen_name: username\n                }, options);\n                _context6.next = 4;\n                return this.get('favorites/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context6.sent;\n                return _context6.abrupt(\"return\", new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function favoriteTimelineByUsername(_x4) {\n        return _favoriteTimelineByUsername.apply(this, arguments);\n      }\n      return favoriteTimelineByUsername;\n    }()\n    /* Users */\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n  }, {\n    key: \"user\",\n    value: function user(_user) {\n      return this.get('users/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, _user));\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n  }, {\n    key: \"users\",\n    value: function users(query) {\n      return this.get('users/lookup.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, query));\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n  }, {\n    key: \"verifyCredentials\",\n    value: function verifyCredentials() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n  }, {\n    key: \"listMutedUsers\",\n    value: function () {\n      var _listMutedUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var options,\n          queryParams,\n          initialRq,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context7.next = 4;\n                return this.get('mutes/users/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context7.sent;\n                return _context7.abrupt(\"return\", new mutes_paginator_v1_1.MuteUserListV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function listMutedUsers() {\n        return _listMutedUsers.apply(this, arguments);\n      }\n      return listMutedUsers;\n    }()\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n  }, {\n    key: \"listMutedUserIds\",\n    value: function () {\n      var _listMutedUserIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var options,\n          queryParams,\n          initialRq,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context8.next = 4;\n                return this.get('mutes/users/ids.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context8.sent;\n                return _context8.abrupt(\"return\", new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function listMutedUserIds() {\n        return _listMutedUserIds.apply(this, arguments);\n      }\n      return listMutedUserIds;\n    }()\n    /**\n     * Returns an array of user objects of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list\n     */\n  }, {\n    key: \"userFriendList\",\n    value: function () {\n      var _userFriendList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var options,\n          queryParams,\n          initialRq,\n          _args9 = arguments;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                options = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n                queryParams = _objectSpread({}, options);\n                _context9.next = 4;\n                return this.get('friends/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context9.sent;\n                return _context9.abrupt(\"return\", new friends_paginator_v1_1.UserFriendListV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n      function userFriendList() {\n        return _userFriendList.apply(this, arguments);\n      }\n      return userFriendList;\n    }()\n    /**\n     * Returns an array of user objects of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list\n     */\n  }, {\n    key: \"userFollowerList\",\n    value: function () {\n      var _userFollowerList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var options,\n          queryParams,\n          initialRq,\n          _args10 = arguments;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                options = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {};\n                queryParams = _objectSpread({}, options);\n                _context10.next = 4;\n                return this.get('followers/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context10.sent;\n                return _context10.abrupt(\"return\", new followers_paginator_v1_1.UserFollowerListV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n      function userFollowerList() {\n        return _userFollowerList.apply(this, arguments);\n      }\n      return userFollowerList;\n    }()\n    /**\n     * Returns an array of numeric user ids of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids\n     */\n  }, {\n    key: \"userFollowerIds\",\n    value: function () {\n      var _userFollowerIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var options,\n          queryParams,\n          initialRq,\n          _args11 = arguments;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                options = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context11.next = 4;\n                return this.get('followers/ids.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context11.sent;\n                return _context11.abrupt(\"return\", new followers_paginator_v1_1.UserFollowerIdsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n      function userFollowerIds() {\n        return _userFollowerIds.apply(this, arguments);\n      }\n      return userFollowerIds;\n    }()\n    /**\n     * Returns an array of numeric user ids of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids\n     */\n  }, {\n    key: \"userFollowingIds\",\n    value: function () {\n      var _userFollowingIds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var options,\n          queryParams,\n          initialRq,\n          _args12 = arguments;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                options = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context12.next = 4;\n                return this.get('friends/ids.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context12.sent;\n                return _context12.abrupt(\"return\", new friends_paginator_v1_1.UserFollowersIdsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n      function userFollowingIds() {\n        return _userFollowingIds.apply(this, arguments);\n      }\n      return userFollowingIds;\n    }()\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n  }, {\n    key: \"searchUsers\",\n    value: function () {\n      var _searchUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(query) {\n        var options,\n          queryParams,\n          initialRq,\n          _args13 = arguments;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                options = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : {};\n                queryParams = _objectSpread({\n                  q: query,\n                  tweet_mode: 'extended',\n                  page: 1\n                }, options);\n                _context13.next = 4;\n                return this.get('users/search.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context13.sent;\n                return _context13.abrupt(\"return\", new user_paginator_v1_1.UserSearchV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n      function searchUsers(_x5) {\n        return _searchUsers.apply(this, arguments);\n      }\n      return searchUsers;\n    }()\n    /* Friendship API */\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n  }, {\n    key: \"friendship\",\n    value: function friendship(sources) {\n      return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n  }, {\n    key: \"friendships\",\n    value: function friendships(_friendships) {\n      return this.get('friendships/lookup.json', _friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n  }, {\n    key: \"friendshipsNoRetweets\",\n    value: function friendshipsNoRetweets() {\n      return this.get('friendships/no_retweets/ids.json', {\n        stringify_ids: true\n      });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n  }, {\n    key: \"friendshipsIncoming\",\n    value: function () {\n      var _friendshipsIncoming = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var options,\n          queryParams,\n          initialRq,\n          _args14 = arguments;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                options = _args14.length > 0 && _args14[0] !== undefined ? _args14[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context14.next = 4;\n                return this.get('friendships/incoming.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context14.sent;\n                return _context14.abrupt(\"return\", new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n      function friendshipsIncoming() {\n        return _friendshipsIncoming.apply(this, arguments);\n      }\n      return friendshipsIncoming;\n    }()\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n  }, {\n    key: \"friendshipsOutgoing\",\n    value: function () {\n      var _friendshipsOutgoing = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var options,\n          queryParams,\n          initialRq,\n          _args15 = arguments;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                options = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n                queryParams = _objectSpread({\n                  stringify_ids: true\n                }, options);\n                _context15.next = 4;\n                return this.get('friendships/outgoing.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context15.sent;\n                return _context15.abrupt(\"return\", new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n      function friendshipsOutgoing() {\n        return _friendshipsOutgoing.apply(this, arguments);\n      }\n      return friendshipsOutgoing;\n    }()\n    /* Account/user API */\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n  }, {\n    key: \"accountSettings\",\n    value: function accountSettings() {\n      return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n  }, {\n    key: \"userProfileBannerSizes\",\n    value: function userProfileBannerSizes(params) {\n      return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      return this.get('lists/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n  }, {\n    key: \"lists\",\n    value: function lists() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this.get('lists/list.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n  }, {\n    key: \"listMembers\",\n    value: function () {\n      var _listMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var options,\n          queryParams,\n          initialRq,\n          _args16 = arguments;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                options = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context16.next = 4;\n                return this.get('lists/members.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context16.sent;\n                return _context16.abrupt(\"return\", new list_paginator_v1_1.ListMembersV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n      function listMembers() {\n        return _listMembers.apply(this, arguments);\n      }\n      return listMembers;\n    }()\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n  }, {\n    key: \"listGetMember\",\n    value: function listGetMember(options) {\n      return this.get('lists/members/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n  }, {\n    key: \"listMemberships\",\n    value: function () {\n      var _listMemberships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var options,\n          queryParams,\n          initialRq,\n          _args17 = arguments;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                options = _args17.length > 0 && _args17[0] !== undefined ? _args17[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context17.next = 4;\n                return this.get('lists/memberships.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context17.sent;\n                return _context17.abrupt(\"return\", new list_paginator_v1_1.ListMembershipsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n      function listMemberships() {\n        return _listMemberships.apply(this, arguments);\n      }\n      return listMemberships;\n    }()\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n  }, {\n    key: \"listOwnerships\",\n    value: function () {\n      var _listOwnerships = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var options,\n          queryParams,\n          initialRq,\n          _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                options = _args18.length > 0 && _args18[0] !== undefined ? _args18[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context18.next = 4;\n                return this.get('lists/ownerships.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context18.sent;\n                return _context18.abrupt(\"return\", new list_paginator_v1_1.ListOwnershipsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n      function listOwnerships() {\n        return _listOwnerships.apply(this, arguments);\n      }\n      return listOwnerships;\n    }()\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n  }, {\n    key: \"listStatuses\",\n    value: function () {\n      var _listStatuses = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(options) {\n        var queryParams, initialRq;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context19.next = 3;\n                return this.get('lists/statuses.json', queryParams, {\n                  fullResponse: true\n                });\n              case 3:\n                initialRq = _context19.sent;\n                return _context19.abrupt(\"return\", new tweet_paginator_v1_1.ListTimelineV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n      function listStatuses(_x6) {\n        return _listStatuses.apply(this, arguments);\n      }\n      return listStatuses;\n    }()\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n  }, {\n    key: \"listSubscribers\",\n    value: function () {\n      var _listSubscribers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var options,\n          queryParams,\n          initialRq,\n          _args20 = arguments;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                options = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context20.next = 4;\n                return this.get('lists/subscribers.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context20.sent;\n                return _context20.abrupt(\"return\", new list_paginator_v1_1.ListSubscribersV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n      function listSubscribers() {\n        return _listSubscribers.apply(this, arguments);\n      }\n      return listSubscribers;\n    }()\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n  }, {\n    key: \"listGetSubscriber\",\n    value: function listGetSubscriber(options) {\n      return this.get('lists/subscribers/show.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n  }, {\n    key: \"listSubscriptions\",\n    value: function () {\n      var _listSubscriptions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var options,\n          queryParams,\n          initialRq,\n          _args21 = arguments;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                options = _args21.length > 0 && _args21[0] !== undefined ? _args21[0] : {};\n                queryParams = _objectSpread({\n                  tweet_mode: 'extended'\n                }, options);\n                _context21.next = 4;\n                return this.get('lists/subscriptions.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context21.sent;\n                return _context21.abrupt(\"return\", new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n      function listSubscriptions() {\n        return _listSubscriptions.apply(this, arguments);\n      }\n      return listSubscriptions;\n    }()\n    /* Media upload API */\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n  }, {\n    key: \"mediaInfo\",\n    value: function mediaInfo(mediaId) {\n      return this.get('media/upload.json', {\n        command: 'STATUS',\n        media_id: mediaId\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n      });\n    }\n  }, {\n    key: \"filterStream\",\n    value: function filterStream() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        autoConnect = _ref.autoConnect,\n        params = _objectWithoutProperties(_ref, _excluded);\n      var parameters = {};\n      for (var _i = 0, _Object$entries = Object.entries(params); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        if (key === 'follow' || key === 'track') {\n          parameters[key] = value.toString();\n        } else if (key === 'locations') {\n          var locations = value;\n          parameters.locations = (0, helpers_1.arrayWrap)(locations).map(function (loc) {\n            return \"\".concat(loc.lng, \",\").concat(loc.lat);\n          }).join(',');\n        } else {\n          parameters[key] = value;\n        }\n      }\n      var streamClient = this.stream;\n      return streamClient.postStream('statuses/filter.json', parameters, {\n        autoConnect: autoConnect\n      });\n    }\n  }, {\n    key: \"sampleStream\",\n    value: function sampleStream() {\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        autoConnect = _ref2.autoConnect,\n        params = _objectWithoutProperties(_ref2, _excluded2);\n      var streamClient = this.stream;\n      return streamClient.getStream('statuses/sample.json', params, {\n        autoConnect: autoConnect\n      });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n  }, {\n    key: \"stream\",\n    get: function get() {\n      var copiedClient = new client_v1_1.default(this);\n      copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n      return copiedClient;\n    }\n    /* Trends API */\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n  }, {\n    key: \"trendsByPlace\",\n    value: function trendsByPlace(woeId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.get('trends/place.json', _objectSpread({\n        id: woeId\n      }, options));\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n  }, {\n    key: \"trendsAvailable\",\n    value: function trendsAvailable() {\n      return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n  }, {\n    key: \"trendsClosest\",\n    value: function trendsClosest(lat, long) {\n      return this.get('trends/closest.json', {\n        lat: lat,\n        long: long\n      });\n    }\n    /* Geo API */\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n  }, {\n    key: \"geoPlace\",\n    value: function geoPlace(placeId) {\n      return this.get('geo/id/:place_id.json', undefined, {\n        params: {\n          place_id: placeId\n        }\n      });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n  }, {\n    key: \"geoSearch\",\n    value: function geoSearch(options) {\n      return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n  }, {\n    key: \"geoReverseGeoCode\",\n    value: function geoReverseGeoCode(options) {\n      return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n  }, {\n    key: \"rateLimitStatuses\",\n    value: function rateLimitStatuses() {\n      for (var _len = arguments.length, resources = new Array(_len), _key = 0; _key < _len; _key++) {\n        resources[_key] = arguments[_key];\n      }\n      return this.get('application/rate_limit_status.json', {\n        resources: resources\n      });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n  }, {\n    key: \"supportedLanguages\",\n    value: function supportedLanguages() {\n      return this.get('help/languages.json');\n    }\n  }]);\n  return TwitterApiv1ReadOnly;\n}(client_subclient_1.default);\nexports.default = TwitterApiv1ReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","client_subclient_1","require","globals_1","helpers_1","client_v1_1","tweet_paginator_v1_1","mutes_paginator_v1_1","followers_paginator_v1_1","friends_paginator_v1_1","user_paginator_v1_1","list_paginator_v1_1","TwitterApiv1ReadOnly","arguments","_prefix","API_V1_1_PREFIX","tweetId","options","get","tweet_mode","id","ids","post","url","prefix","queryParams","fullResponse","initialRq","HomeTimelineV1Paginator","realData","data","rateLimit","instance","MentionTimelineV1Paginator","userId","user_id","UserTimelineV1Paginator","username","screen_name","UserFavoritesV1Paginator","user","query","MuteUserListV1Paginator","stringify_ids","MuteUserIdsV1Paginator","UserFriendListV1Paginator","UserFollowerListV1Paginator","UserFollowerIdsV1Paginator","UserFollowersIdsV1Paginator","q","page","UserSearchV1Paginator","sources","friendships","FriendshipsIncomingV1Paginator","FriendshipsOutgoingV1Paginator","params","ListMembersV1Paginator","ListMembershipsV1Paginator","ListOwnershipsV1Paginator","ListTimelineV1Paginator","ListSubscribersV1Paginator","ListSubscriptionsV1Paginator","mediaId","command","media_id","API_V1_1_UPLOAD_PREFIX","autoConnect","parameters","entries","key","toString","locations","arrayWrap","map","loc","lng","lat","join","streamClient","stream","postStream","getStream","copiedClient","default","setPrefix","API_V1_1_STREAM_PREFIX","woeId","long","placeId","undefined","place_id","resources"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v1/client.v1.read.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst client_subclient_1 = __importDefault(require(\"../client.subclient\"));\nconst globals_1 = require(\"../globals\");\nconst helpers_1 = require(\"../helpers\");\nconst client_v1_1 = __importDefault(require(\"../v1/client.v1\"));\nconst tweet_paginator_v1_1 = require(\"../paginators/tweet.paginator.v1\");\nconst mutes_paginator_v1_1 = require(\"../paginators/mutes.paginator.v1\");\nconst followers_paginator_v1_1 = require(\"../paginators/followers.paginator.v1\");\nconst friends_paginator_v1_1 = require(\"../paginators/friends.paginator.v1\");\nconst user_paginator_v1_1 = require(\"../paginators/user.paginator.v1\");\nconst list_paginator_v1_1 = require(\"../paginators/list.paginator.v1\");\n/**\n * Base Twitter v1 client with only read right.\n */\nclass TwitterApiv1ReadOnly extends client_subclient_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /* Tweets */\n    /**\n     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-show-id\n     */\n    singleTweet(tweetId, options = {}) {\n        return this.get('statuses/show.json', { tweet_mode: 'extended', id: tweetId, ...options });\n    }\n    tweets(ids, options = {}) {\n        return this.post('statuses/lookup.json', { tweet_mode: 'extended', id: ids, ...options });\n    }\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format.\n     * The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     */\n    oembedTweet(tweetId, options = {}) {\n        return this.get('oembed', {\n            url: `https://twitter.com/i/statuses/${tweetId}`,\n            ...options,\n        }, { prefix: 'https://publish.twitter.com/' });\n    }\n    /* Tweets timelines */\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow.\n     * The home timeline is central to how most users interact with the Twitter service.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-home_timeline\n     */\n    async homeTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/home_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.HomeTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user.\n     * The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     */\n    async mentionTimeline(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('statuses/mentions_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.MentionTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the user_id parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of the most recent Tweets posted by the user indicated by the screen_name parameters.\n     * User timelines belonging to protected users may only be requested when the authenticated user either \"owns\" the timeline or is an approved follower of the owner.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/api-reference/get-statuses-user_timeline\n     */\n    async userTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('statuses/user_timeline.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimeline(userId, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            user_id: userId,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the most recent Tweets liked by the authenticating or specified user, 20 tweets by default.\n     * Note: favorites are now known as likes.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-favorites-list\n     */\n    async favoriteTimelineByUsername(username, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            screen_name: username,\n            ...options,\n        };\n        const initialRq = await this.get('favorites/list.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.UserFavoritesV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Users */\n    /**\n     * Returns a variety of information about the user specified by the required user_id or screen_name parameter.\n     * The author's most recent Tweet will be returned inline when possible.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-show\n     */\n    user(user) {\n        return this.get('users/show.json', { tweet_mode: 'extended', ...user });\n    }\n    /**\n     * Returns fully-hydrated user objects for up to 100 users per request,\n     * as specified by comma-separated values passed to the user_id and/or screen_name parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-lookup\n     */\n    users(query) {\n        return this.get('users/lookup.json', { tweet_mode: 'extended', ...query });\n    }\n    /**\n     * Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful;\n     * returns a 401 status code and an error message if not.\n     * Use this method to test if supplied user credentials are valid.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-verify_credentials\n     */\n    verifyCredentials(options = {}) {\n        return this.get('account/verify_credentials.json', options);\n    }\n    /**\n     * Returns an array of user objects the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-list\n     */\n    async listMutedUsers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/list.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids the authenticating user has muted.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/get-mutes-users-ids\n     */\n    async listMutedUserIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('mutes/users/ids.json', queryParams, { fullResponse: true });\n        return new mutes_paginator_v1_1.MuteUserIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of user objects of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-list\n     */\n    async userFriendList(options = {}) {\n        const queryParams = {\n            ...options,\n        };\n        const initialRq = await this.get('friends/list.json', queryParams, { fullResponse: true });\n        return new friends_paginator_v1_1.UserFriendListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of user objects of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-list\n     */\n    async userFollowerList(options = {}) {\n        const queryParams = {\n            ...options,\n        };\n        const initialRq = await this.get('followers/list.json', queryParams, { fullResponse: true });\n        return new followers_paginator_v1_1.UserFollowerListV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids of followers of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-followers-ids\n     */\n    async userFollowerIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('followers/ids.json', queryParams, { fullResponse: true });\n        return new followers_paginator_v1_1.UserFollowerIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns an array of numeric user ids of friends of the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friends-ids\n     */\n    async userFollowingIds(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friends/ids.json', queryParams, { fullResponse: true });\n        return new friends_paginator_v1_1.UserFollowersIdsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Provides a simple, relevance-based search interface to public user accounts on Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-users-search\n     */\n    async searchUsers(query, options = {}) {\n        const queryParams = {\n            q: query,\n            tweet_mode: 'extended',\n            page: 1,\n            ...options,\n        };\n        const initialRq = await this.get('users/search.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.UserSearchV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Friendship API */\n    /**\n     * Returns detailed information about the relationship between two arbitrary users.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-show\n     */\n    friendship(sources) {\n        return this.get('friendships/show.json', sources);\n    }\n    /**\n     * Returns the relationships of the authenticating user to the comma-separated list of up to 100 screen_names or user_ids provided.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-lookup\n     */\n    friendships(friendships) {\n        return this.get('friendships/lookup.json', friendships);\n    }\n    /**\n     * Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-no_retweets-ids\n     */\n    friendshipsNoRetweets() {\n        return this.get('friendships/no_retweets/ids.json', { stringify_ids: true });\n    }\n    /**\n     * Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-incoming\n     */\n    async friendshipsIncoming(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/incoming.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsIncomingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/get-friendships-outgoing\n     */\n    async friendshipsOutgoing(options = {}) {\n        const queryParams = {\n            stringify_ids: true,\n            ...options,\n        };\n        const initialRq = await this.get('friendships/outgoing.json', queryParams, { fullResponse: true });\n        return new user_paginator_v1_1.FriendshipsOutgoingV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Account/user API */\n    /**\n     * Get current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    accountSettings() {\n        return this.get('account/settings.json');\n    }\n    /**\n     * Returns a map of the available size variations of the specified user's profile banner.\n     * If the user has not uploaded a profile banner, a HTTP 404 will be served instead.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-users-profile_banner\n     */\n    userProfileBannerSizes(params) {\n        return this.get('users/profile_banner.json', params);\n    }\n    /* Lists */\n    /**\n     * Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-show\n     */\n    list(options) {\n        return this.get('lists/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns all lists the authenticating or specified user subscribes to, including their own.\n     * If no user is given, the authenticating user is used.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-list\n     */\n    lists(options = {}) {\n        return this.get('lists/list.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members\n     */\n    async listMembers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/members.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a member of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-members-show\n     */\n    listGetMember(options) {\n        return this.get('lists/members/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Returns the lists the specified user has been added to.\n     * If user_id or screen_name are not provided, the memberships for the authenticating user are returned.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-memberships\n     */\n    async listMemberships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/memberships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListMembershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-ownerships\n     */\n    async listOwnerships(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/ownerships.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListOwnershipsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns a timeline of tweets authored by members of the specified list. Retweets are included by default.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-statuses\n     */\n    async listStatuses(options) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/statuses.json', queryParams, { fullResponse: true });\n        return new tweet_paginator_v1_1.ListTimelineV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Returns the subscribers of the specified list. Private list subscribers will only be shown if the authenticated user owns the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers\n     */\n    async listSubscribers(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscribers.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscribersV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /**\n     * Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscribers-show\n     */\n    listGetSubscriber(options) {\n        return this.get('lists/subscribers/show.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default.\n     * Does not include the user's own lists.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/get-lists-subscriptions\n     */\n    async listSubscriptions(options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            ...options,\n        };\n        const initialRq = await this.get('lists/subscriptions.json', queryParams, { fullResponse: true });\n        return new list_paginator_v1_1.ListSubscriptionsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    /* Media upload API */\n    /**\n     * The STATUS command (this method) is used to periodically poll for updates of media processing operation.\n     * After the STATUS command response returns succeeded, you can move on to the next step which is usually create Tweet with media_id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/get-media-upload-status\n     */\n    mediaInfo(mediaId) {\n        return this.get('media/upload.json', {\n            command: 'STATUS',\n            media_id: mediaId,\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n    }\n    filterStream({ autoConnect, ...params } = {}) {\n        const parameters = {};\n        for (const [key, value] of Object.entries(params)) {\n            if (key === 'follow' || key === 'track') {\n                parameters[key] = value.toString();\n            }\n            else if (key === 'locations') {\n                const locations = value;\n                parameters.locations = (0, helpers_1.arrayWrap)(locations).map(loc => `${loc.lng},${loc.lat}`).join(',');\n            }\n            else {\n                parameters[key] = value;\n            }\n        }\n        const streamClient = this.stream;\n        return streamClient.postStream('statuses/filter.json', parameters, { autoConnect });\n    }\n    sampleStream({ autoConnect, ...params } = {}) {\n        const streamClient = this.stream;\n        return streamClient.getStream('statuses/sample.json', params, { autoConnect });\n    }\n    /**\n     * Create a client that is prefixed with `https//stream.twitter.com` instead of classic API URL.\n     */\n    get stream() {\n        const copiedClient = new client_v1_1.default(this);\n        copiedClient.setPrefix(globals_1.API_V1_1_STREAM_PREFIX);\n        return copiedClient;\n    }\n    /* Trends API */\n    /**\n     * Returns the top 50 trending topics for a specific id, if trending information is available for it.\n     * Note: The id parameter for this endpoint is the \"where on earth identifier\" or WOEID, which is a legacy identifier created by Yahoo and has been deprecated.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/trends-for-location/api-reference/get-trends-place\n     */\n    trendsByPlace(woeId, options = {}) {\n        return this.get('trends/place.json', { id: woeId, ...options });\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for.\n     * The response is an array of \"locations\" that encode the location's WOEID\n     * and some other human-readable information such as a canonical name and country the location belongs in.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-available\n     */\n    trendsAvailable() {\n        return this.get('trends/available.json');\n    }\n    /**\n     * Returns the locations that Twitter has trending topic information for, closest to a specified location.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/trends/locations-with-trending-topics/api-reference/get-trends-closest\n     */\n    trendsClosest(lat, long) {\n        return this.get('trends/closest.json', { lat, long });\n    }\n    /* Geo API */\n    /**\n     * Returns all the information about a known place.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/place-information/api-reference/get-geo-id-place_id\n     */\n    geoPlace(placeId) {\n        return this.get('geo/id/:place_id.json', undefined, { params: { place_id: placeId } });\n    }\n    /**\n     * Search for places that can be attached to a Tweet via POST statuses/update.\n     * This request will return a list of all the valid places that can be used as the place_id when updating a status.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-search\n     */\n    geoSearch(options) {\n        return this.get('geo/search.json', options);\n    }\n    /**\n     * Given a latitude and a longitude, searches for up to 20 places that can be used as a place_id when updating a status.\n     * This request is an informative call and will deliver generalized results about geography.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/geo/places-near-location/api-reference/get-geo-reverse_geocode\n     */\n    geoReverseGeoCode(options) {\n        return this.get('geo/reverse_geocode.json', options);\n    }\n    /* Developer utilities */\n    /**\n     * Returns the current rate limits for methods belonging to the specified resource families.\n     * Each API resource belongs to a \"resource family\" which is indicated in its method documentation.\n     * The method's resource family can be determined from the first component of the path after the resource version.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/rate-limit-status/api-reference/get-application-rate_limit_status\n     */\n    rateLimitStatuses(...resources) {\n        return this.get('application/rate_limit_status.json', { resources });\n    }\n    /**\n     * Returns the list of languages supported by Twitter along with the language code supported by Twitter.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/developer-utilities/supported-languages/api-reference/get-help-languages\n     */\n    supportedLanguages() {\n        return this.get('help/languages.json');\n    }\n}\nexports.default = TwitterApiv1ReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}