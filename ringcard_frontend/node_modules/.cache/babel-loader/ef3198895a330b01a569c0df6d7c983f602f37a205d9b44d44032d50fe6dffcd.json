{"ast":null,"code":"const {\n  STATUS_CODES\n} = require('http');\nconst {\n  format\n} = require('util');\nconst {\n  OPError\n} = require('../errors');\nconst parseWwwAuthenticate = require('./www_authenticate_parser');\nconst throwAuthenticateErrors = response => {\n  const params = parseWwwAuthenticate(response.headers['www-authenticate']);\n  if (params.error) {\n    throw new OPError(params, response);\n  }\n};\nconst isStandardBodyError = response => {\n  let result = false;\n  try {\n    let jsonbody;\n    if (typeof response.body !== 'object' || Buffer.isBuffer(response.body)) {\n      jsonbody = JSON.parse(response.body);\n    } else {\n      jsonbody = response.body;\n    }\n    result = typeof jsonbody.error === 'string' && jsonbody.error.length;\n    if (result) Object.defineProperty(response, 'body', {\n      value: jsonbody,\n      configurable: true\n    });\n  } catch (err) {}\n  return result;\n};\nfunction processResponse(response) {\n  let {\n    statusCode = 200,\n    body = true,\n    bearer = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (response.statusCode !== statusCode) {\n    if (bearer) {\n      throwAuthenticateErrors(response);\n    }\n    if (isStandardBodyError(response)) {\n      throw new OPError(response.body, response);\n    }\n    throw new OPError({\n      error: format('expected %i %s, got: %i %s', statusCode, STATUS_CODES[statusCode], response.statusCode, STATUS_CODES[response.statusCode])\n    }, response);\n  }\n  if (body && !response.body) {\n    throw new OPError({\n      error: format('expected %i %s with body but no body was returned', statusCode, STATUS_CODES[statusCode])\n    }, response);\n  }\n  return response.body;\n}\nmodule.exports = processResponse;","map":{"version":3,"names":["STATUS_CODES","require","format","OPError","parseWwwAuthenticate","throwAuthenticateErrors","response","params","headers","error","isStandardBodyError","result","jsonbody","body","Buffer","isBuffer","JSON","parse","length","Object","defineProperty","value","configurable","err","processResponse","statusCode","bearer","module","exports"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/openid-client/lib/helpers/process_response.js"],"sourcesContent":["const { STATUS_CODES } = require('http');\nconst { format } = require('util');\n\nconst { OPError } = require('../errors');\nconst parseWwwAuthenticate = require('./www_authenticate_parser');\n\nconst throwAuthenticateErrors = (response) => {\n  const params = parseWwwAuthenticate(response.headers['www-authenticate']);\n\n  if (params.error) {\n    throw new OPError(params, response);\n  }\n};\n\nconst isStandardBodyError = (response) => {\n  let result = false;\n  try {\n    let jsonbody;\n    if (typeof response.body !== 'object' || Buffer.isBuffer(response.body)) {\n      jsonbody = JSON.parse(response.body);\n    } else {\n      jsonbody = response.body;\n    }\n    result = typeof jsonbody.error === 'string' && jsonbody.error.length;\n    if (result) Object.defineProperty(response, 'body', { value: jsonbody, configurable: true });\n  } catch (err) {}\n\n  return result;\n};\n\nfunction processResponse(response, { statusCode = 200, body = true, bearer = false } = {}) {\n  if (response.statusCode !== statusCode) {\n    if (bearer) {\n      throwAuthenticateErrors(response);\n    }\n\n    if (isStandardBodyError(response)) {\n      throw new OPError(response.body, response);\n    }\n\n    throw new OPError(\n      {\n        error: format(\n          'expected %i %s, got: %i %s',\n          statusCode,\n          STATUS_CODES[statusCode],\n          response.statusCode,\n          STATUS_CODES[response.statusCode],\n        ),\n      },\n      response,\n    );\n  }\n\n  if (body && !response.body) {\n    throw new OPError(\n      {\n        error: format(\n          'expected %i %s with body but no body was returned',\n          statusCode,\n          STATUS_CODES[statusCode],\n        ),\n      },\n      response,\n    );\n  }\n\n  return response.body;\n}\n\nmodule.exports = processResponse;\n"],"mappings":"AAAA,MAAM;EAAEA;AAAa,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACxC,MAAM;EAAEC;AAAO,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AAElC,MAAM;EAAEE;AAAQ,CAAC,GAAGF,OAAO,CAAC,WAAW,CAAC;AACxC,MAAMG,oBAAoB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;AAEjE,MAAMI,uBAAuB,GAAIC,QAAQ,IAAK;EAC5C,MAAMC,MAAM,GAAGH,oBAAoB,CAACE,QAAQ,CAACE,OAAO,CAAC,kBAAkB,CAAC,CAAC;EAEzE,IAAID,MAAM,CAACE,KAAK,EAAE;IAChB,MAAM,IAAIN,OAAO,CAACI,MAAM,EAAED,QAAQ,CAAC;EACrC;AACF,CAAC;AAED,MAAMI,mBAAmB,GAAIJ,QAAQ,IAAK;EACxC,IAAIK,MAAM,GAAG,KAAK;EAClB,IAAI;IACF,IAAIC,QAAQ;IACZ,IAAI,OAAON,QAAQ,CAACO,IAAI,KAAK,QAAQ,IAAIC,MAAM,CAACC,QAAQ,CAACT,QAAQ,CAACO,IAAI,CAAC,EAAE;MACvED,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACX,QAAQ,CAACO,IAAI,CAAC;IACtC,CAAC,MAAM;MACLD,QAAQ,GAAGN,QAAQ,CAACO,IAAI;IAC1B;IACAF,MAAM,GAAG,OAAOC,QAAQ,CAACH,KAAK,KAAK,QAAQ,IAAIG,QAAQ,CAACH,KAAK,CAACS,MAAM;IACpE,IAAIP,MAAM,EAAEQ,MAAM,CAACC,cAAc,CAACd,QAAQ,EAAE,MAAM,EAAE;MAAEe,KAAK,EAAET,QAAQ;MAAEU,YAAY,EAAE;IAAK,CAAC,CAAC;EAC9F,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EAEf,OAAOZ,MAAM;AACf,CAAC;AAED,SAASa,eAAe,CAAClB,QAAQ,EAA0D;EAAA,IAAxD;IAAEmB,UAAU,GAAG,GAAG;IAAEZ,IAAI,GAAG,IAAI;IAAEa,MAAM,GAAG;EAAM,CAAC,uEAAG,CAAC,CAAC;EACvF,IAAIpB,QAAQ,CAACmB,UAAU,KAAKA,UAAU,EAAE;IACtC,IAAIC,MAAM,EAAE;MACVrB,uBAAuB,CAACC,QAAQ,CAAC;IACnC;IAEA,IAAII,mBAAmB,CAACJ,QAAQ,CAAC,EAAE;MACjC,MAAM,IAAIH,OAAO,CAACG,QAAQ,CAACO,IAAI,EAAEP,QAAQ,CAAC;IAC5C;IAEA,MAAM,IAAIH,OAAO,CACf;MACEM,KAAK,EAAEP,MAAM,CACX,4BAA4B,EAC5BuB,UAAU,EACVzB,YAAY,CAACyB,UAAU,CAAC,EACxBnB,QAAQ,CAACmB,UAAU,EACnBzB,YAAY,CAACM,QAAQ,CAACmB,UAAU,CAAC;IAErC,CAAC,EACDnB,QAAQ,CACT;EACH;EAEA,IAAIO,IAAI,IAAI,CAACP,QAAQ,CAACO,IAAI,EAAE;IAC1B,MAAM,IAAIV,OAAO,CACf;MACEM,KAAK,EAAEP,MAAM,CACX,mDAAmD,EACnDuB,UAAU,EACVzB,YAAY,CAACyB,UAAU,CAAC;IAE5B,CAAC,EACDnB,QAAQ,CACT;EACH;EAEA,OAAOA,QAAQ,CAACO,IAAI;AACtB;AAEAc,MAAM,CAACC,OAAO,GAAGJ,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}