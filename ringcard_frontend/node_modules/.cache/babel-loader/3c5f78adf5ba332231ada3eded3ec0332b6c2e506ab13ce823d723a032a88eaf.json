{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst globals_1 = require(\"../globals\");\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n  constructor() {\n    super(...arguments);\n    this._prefix = globals_1.API_V2_PREFIX;\n  }\n  /* Sub-clients */\n  /**\n   * Get a client with only read rights.\n   */\n  get readOnly() {\n    return this;\n  }\n  /**\n   * Get a client for v2 labs endpoints.\n   */\n  get labs() {\n    if (this._labs) return this._labs;\n    return this._labs = new client_v2_labs_write_1.default(this);\n  }\n  /* Tweets */\n  /**\n   * Hides or unhides a reply to a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n   */\n  hideReply(tweetId, makeHidden) {\n    return this.put('tweets/:id/hidden', {\n      hidden: makeHidden\n    }, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Like the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  like(loggedUserId, targetTweetId) {\n    return this.post('users/:id/likes', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unlike a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  unlike(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/likes/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n  /**\n   * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  retweet(loggedUserId, targetTweetId) {\n    return this.post('users/:id/retweets', {\n      tweet_id: targetTweetId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n   * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  unretweet(loggedUserId, targetTweetId) {\n    return this.delete('users/:id/retweets/:tweet_id', undefined, {\n      params: {\n        id: loggedUserId,\n        tweet_id: targetTweetId\n      }\n    });\n  }\n  tweet(status) {\n    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof status === 'object') {\n      payload = status;\n    } else {\n      payload = {\n        text: status,\n        ...payload\n      };\n    }\n    return this.post('tweets', payload);\n  }\n  /**\n   * Reply to a Tweet on behalf of an authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n  reply(status, toTweetId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _a;\n    const reply = {\n      in_reply_to_tweet_id: toTweetId,\n      ...((_a = payload.reply) !== null && _a !== void 0 ? _a : {})\n    };\n    return this.post('tweets', {\n      text: status,\n      ...payload,\n      reply\n    });\n  }\n  /**\n   * Quote an existing Tweet on behalf of an authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n  quote(status, quotedTweetId) {\n    let payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this.tweet(status, {\n      ...payload,\n      quote_tweet_id: quotedTweetId\n    });\n  }\n  /**\n   * Post a series of tweets.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n   */\n  async tweetThread(tweets) {\n    var _a, _b;\n    const postedTweets = [];\n    for (const tweet of tweets) {\n      // Retrieve the last sent tweet\n      const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n      // Build the tweet query params\n      const queryParams = {\n        ...(typeof tweet === 'string' ? {\n          text: tweet\n        } : tweet)\n      };\n      // Reply to an existing tweet if needed\n      const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n      const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n      if (inReplyToId) {\n        postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n      } else {\n        postedTweets.push(await this.tweet(status, queryParams));\n      }\n    }\n    return postedTweets;\n  }\n  /**\n   * Allows a user or authenticated user ID to delete a Tweet\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n   */\n  deleteTweet(tweetId) {\n    return this.delete('tweets/:id', undefined, {\n      params: {\n        id: tweetId\n      }\n    });\n  }\n  /* Bookmarks */\n  /**\n   * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n   */\n  async bookmark(tweetId) {\n    const user = await this.getCurrentUserV2Object();\n    return this.post('users/:id/bookmarks', {\n      tweet_id: tweetId\n    }, {\n      params: {\n        id: user.data.id\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n   * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n   *\n   * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n   */\n  async deleteBookmark(tweetId) {\n    const user = await this.getCurrentUserV2Object();\n    return this.delete('users/:id/bookmarks/:tweet_id', undefined, {\n      params: {\n        id: user.data.id,\n        tweet_id: tweetId\n      }\n    });\n  }\n  /* Users */\n  /**\n   * Allows a user ID to follow another user.\n   * If the target user does not have public Tweets, this endpoint will send a follow request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n   *\n   * OAuth2 scope: `follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  follow(loggedUserId, targetUserId) {\n    return this.post('users/:id/following', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user ID to unfollow another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n   *\n   * OAuth2 scope: `follows.write`\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  unfollow(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Causes the user (in the path) to block the target user.\n   * The user (in the path) must match the user context authorizing the request.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  block(loggedUserId, targetUserId) {\n    return this.post('users/:id/blocking', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows a user or authenticated user ID to unblock another user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  unblock(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to mute the target user.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  mute(loggedUserId, targetUserId) {\n    return this.post('users/:id/muting', {\n      target_user_id: targetUserId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Allows an authenticated user ID to unmute the target user.\n   * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n   * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n   *\n   * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n   */\n  unmute(loggedUserId, targetUserId) {\n    return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n      params: {\n        source_user_id: loggedUserId,\n        target_user_id: targetUserId\n      }\n    });\n  }\n  /* Lists */\n  /**\n   * Creates a new list for the authenticated user.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n   */\n  createList(options) {\n    return this.post('lists', options);\n  }\n  /**\n   * Updates the specified list. The authenticated user must own the list to be able to update it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n   */\n  updateList(listId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.put('lists/:id', options, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n   */\n  removeList(listId) {\n    return this.delete('lists/:id', undefined, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Adds a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n   */\n  addListMember(listId, userId) {\n    return this.post('lists/:id/members', {\n      user_id: userId\n    }, {\n      params: {\n        id: listId\n      }\n    });\n  }\n  /**\n   * Remember a member to a list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n   */\n  removeListMember(listId, userId) {\n    return this.delete('lists/:id/members/:user_id', undefined, {\n      params: {\n        id: listId,\n        user_id: userId\n      }\n    });\n  }\n  /**\n   * Subscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n   */\n  subscribeToList(loggedUserId, listId) {\n    return this.post('users/:id/followed_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Unsubscribes the authenticated user to the specified list.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n   */\n  unsubscribeOfList(loggedUserId, listId) {\n    return this.delete('users/:id/followed_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to pin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n   */\n  pinList(loggedUserId, listId) {\n    return this.post('users/:id/pinned_lists', {\n      list_id: listId\n    }, {\n      params: {\n        id: loggedUserId\n      }\n    });\n  }\n  /**\n   * Enables the authenticated user to unpin a List.\n   * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n   */\n  unpinList(loggedUserId, listId) {\n    return this.delete('users/:id/pinned_lists/:list_id', undefined, {\n      params: {\n        id: loggedUserId,\n        list_id: listId\n      }\n    });\n  }\n}\nexports.default = TwitterApiv2ReadWrite;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","globals_1","require","client_v2_read_1","client_v2_labs_write_1","TwitterApiv2ReadWrite","default","constructor","arguments","_prefix","API_V2_PREFIX","readOnly","labs","_labs","hideReply","tweetId","makeHidden","put","hidden","params","id","like","loggedUserId","targetTweetId","post","tweet_id","unlike","delete","undefined","retweet","unretweet","tweet","status","payload","text","reply","toTweetId","_a","in_reply_to_tweet_id","quote","quotedTweetId","quote_tweet_id","tweetThread","tweets","_b","postedTweets","lastTweet","length","queryParams","inReplyToId","data","push","deleteTweet","bookmark","user","getCurrentUserV2Object","deleteBookmark","follow","targetUserId","target_user_id","unfollow","source_user_id","block","unblock","mute","unmute","createList","options","updateList","listId","removeList","addListMember","userId","user_id","removeListMember","subscribeToList","list_id","unsubscribeOfList","pinList","unpinList"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v2/client.v2.write.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_write_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n    hideReply(tweetId, makeHidden) {\n        return this.put('tweets/:id/hidden', { hidden: makeHidden }, { params: { id: tweetId } });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    like(loggedUserId, targetTweetId) {\n        return this.post('users/:id/likes', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unlike(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/likes/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    retweet(loggedUserId, targetTweetId) {\n        return this.post('users/:id/retweets', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unretweet(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/retweets/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    tweet(status, payload = {}) {\n        if (typeof status === 'object') {\n            payload = status;\n        }\n        else {\n            payload = { text: status, ...payload };\n        }\n        return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    reply(status, toTweetId, payload = {}) {\n        var _a;\n        const reply = { in_reply_to_tweet_id: toTweetId, ...(_a = payload.reply) !== null && _a !== void 0 ? _a : {} };\n        return this.post('tweets', { text: status, ...payload, reply });\n    }\n    /**\n     * Quote an existing Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    quote(status, quotedTweetId, payload = {}) {\n        return this.tweet(status, { ...payload, quote_tweet_id: quotedTweetId });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    async tweetThread(tweets) {\n        var _a, _b;\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ text: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n            const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n    deleteTweet(tweetId) {\n        return this.delete('tweets/:id', undefined, {\n            params: {\n                id: tweetId,\n            },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async bookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.post('users/:id/bookmarks', { tweet_id: tweetId }, { params: { id: user.data.id } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async deleteBookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.delete('users/:id/bookmarks/:tweet_id', undefined, { params: { id: user.data.id, tweet_id: tweetId } });\n    }\n    /* Users */\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    follow(loggedUserId, targetUserId) {\n        return this.post('users/:id/following', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unfollow(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    block(loggedUserId, targetUserId) {\n        return this.post('users/:id/blocking', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unblock(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    mute(loggedUserId, targetUserId) {\n        return this.post('users/:id/muting', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unmute(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n    createList(options) {\n        return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n    updateList(listId, options = {}) {\n        return this.put('lists/:id', options, { params: { id: listId } });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n    removeList(listId) {\n        return this.delete('lists/:id', undefined, { params: { id: listId } });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n    addListMember(listId, userId) {\n        return this.post('lists/:id/members', { user_id: userId }, { params: { id: listId } });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n    removeListMember(listId, userId) {\n        return this.delete('lists/:id/members/:user_id', undefined, { params: { id: listId, user_id: userId } });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n    subscribeToList(loggedUserId, listId) {\n        return this.post('users/:id/followed_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n    unsubscribeOfList(loggedUserId, listId) {\n        return this.delete('users/:id/followed_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n    pinList(loggedUserId, listId) {\n        return this.post('users/:id/pinned_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n    unpinList(loggedUserId, listId) {\n        return this.delete('users/:id/pinned_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n}\nexports.default = TwitterApiv2ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}