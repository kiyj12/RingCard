{"ast":null,"code":"import _slicedToArray from\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from\"axios\";import React,{useState}from\"react\";import{useSearchParams}from\"react-router-dom\";import qs from\"qs\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Oauth2Step3=function Oauth2Step3(){var _require=require(\"twitter-api-sdk\"),Client=_require.Client,auth=_require.auth;var _useState=useState(),_useState2=_slicedToArray(_useState,2),accessToken=_useState2[0],setAccessToken=_useState2[1];var CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;var CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;var CLIENT_ID=process.env.REACT_APP_CLIENT_ID;var CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;var ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;var ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;var CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;var BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;// const TWITTER_STATE = \"twitter-increaser-state\";\nvar TWITTER_STATE=\"state\";var TWITTER_CODE_CHALLENGE=\"challenge\";var TWITTER_AUTH_URL=\"https://twitter.com/i/oauth2/authorize\";var TWITTER_SCOPE=[\"tweet.read\",\"users.read\",\"tweet.write\"].join(\" \");// const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\nvar _useSearchParams=useSearchParams(),_useSearchParams2=_slicedToArray(_useSearchParams,1),searchParams=_useSearchParams2[0];var state=searchParams.get(\"state\");var code=searchParams.get(\"code\");var authClient=new auth.OAuth2User({client_id:CLIENT_ID,client_secret:CLIENT_SECRET,callback:\"http://localhost:3000/login/oauth2/code/twitter\",scopes:[\"tweet.read\",\"users.read\",\"tweet.write\"]});var client=new Client(authClient);var params={expansions:\"author_id\",\"user.fields\":[\"username\",\"created_at\"],\"tweet.fields\":[\"geo\",\"entities\",\"context_annotations\"]};function BtnToTwitterLogin(){function handleClick(e){// useEffect(() => {\n// \tconsole.log(state);\n// \tconsole.log(code);\n// if(code){\n// const details = {\n//     code: code,\n// grant_type: 'authorization_code',\n// client_id: 'rG9n6402A3dbUJKzXTNX4oWHJ',\n// redirect_uri: 'https://localhost:3000/home/unanswered/',\n// code_verifier: 'challenge',\n// };\n// const formBodyPart = [];\n// for (let property in details) {\n//   let encodedKey = encodeURIComponent(property);\n//   let encodedValue = encodeURIComponent(details[property]);\n//   formBodyPart.push(encodedKey + \"=\" + encodedValue);\n// const formBody = formBodyPart.join(\"&\");\n// }\nvar createFormParams=function createFormParams(params){return Object.keys(params).map(function(key){return\"\".concat(encodeURIComponent(key),\"=\").concat(encodeURIComponent(params[key]));}).join('&');};if(code&&CLIENT_ID){var data=qs.stringify({code:code,grant_type:'authorization_code',client_id:CLIENT_ID,redirect_uri:'http://localhost:3000/login/oauth2/code/twitter',code_verifier:'challenge'});// let formData = new FormData();\n//     formData.append(\"grant_type\", 'authorization_code');\n//     formData.append(\"client_id\", CLIENT_ID);\n//     formData.append(\"redirect_uri\", 'http://localhost:3000/login/oauth2/code/twitter');\n//     formData.append(\"code\", code);\n//     formData.append('code_verifier', 'challenge');\n// const hello = createFormParams({\n//       grant_type: 'authorization_code',\n//       code: code,\n//       client_id: CLIENT_ID,\n//       redirect_uri: 'http://localhost:3000/login/oauth2/code/twitter',\n//       code_verifier: 'challenge'\n//     });\naxios({method:'post',url:'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/oauth2/token',data:data,headers:{'Content-Type':'application/x-www-form-urlencoded'// 'Access-Control-Allow-Origin': 'https://api.twitter.com/2/oauth2/token',\n// 'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\n// 'Access-Control-Allow-Headers': '*',\n// 'Access-Control-Allow-Credentials': 'true',\n}}).then(function(res){console.log(res);console.log(res.data);console.log(res.data.access_token);setAccessToken(res.data.access_token);// alert(\"생성이 완료되었습니다.\");\n});//   async function Hello(){\n// await authClient.requestAccessToken(code);\n//   //Get the user ID\n//   const {\n//     data: { id },\n//   } = await client.users.findMyUser();\n//   //Makes api call\n//   const getBookmark = await client.bookmarks.getUsersIdBookmarks(id, params);\n//   console.dir(getBookmark, {\n//     depth: null,\n//   });\n//   process.exit();\n//   }\n//   Hello();\n// axios\n// \t.post(\"https://api.twitter.com/2/oauth2/token\", null, {})\n// \t.then((res) => {\n// \t\talert(\"생성이 완료되었습니다.\");\n// \t\tconsole.log(res.data);\n// \t})\n// \t.catch((err) => {\n// \t\tconsole.log(err.config);\n// \t\tconsole.log(err.response.data);\n// \t});\n// fetch(\"https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/oauth2/token\", {\n// // fetch(\"https://api.twitter.com/2/oauth2/token\", {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/x-www-form-urlencoded\",\n//     },\n//   //   headers: {\n//   // 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n//   //   },\n//     body: hello,\n//   }).then(res => {\n//     if(res.ok) {\n//       alert(\"생성이 완료되었습니다.\")\n//     }\n//   })\n//   const getURLWithQueryParams = (\n//   baseUrl: string,\n//   params: Record<string, any>\n// ) => {\n//   const query = Object.entries(params)\n//     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n//     .join(\"&\")\n//   return `${baseUrl}?${query}`\n// }\n// const getTwitterOAuthUrl = (redirectUri: string) =>\n// getURLWithQueryParams(TWITTER_AUTH_URL, {\n//   response_type: \"code\",\n//   client_id: CLIENT_ID,\n//   redirect_uri: redirectUri,\n//   scope: TWITTER_SCOPE,\n//   state: TWITTER_STATE,\n//   code_challenge: TWITTER_CODE_CHALLENGE,\n//   code_challenge_method: \"plain\",\n// })\n//   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\n//   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\n// }\n// \t}, []);\n}}return/*#__PURE__*/_jsx(\"button\",{onClick:handleClick});}// const authHandler = (err:any, data:any) => {\n//   console.log(err, data);\n// };\n// const [user, setUser] = useState<any>([]);\n// useEffect(() => {\n// \taxios\n// \t\t.get(\"/oauth2\")\n// \t\t.then((res) => {\n// \t\t\tsetUser(res.data);\n// \t\t\tconsole.log(res.data);\n// \t\t})\n// \t\t.catch((err) => {\n// \t\t\tconsole.log(err.config);\n// \t\t\tconsole.log(err.response.data);\n// \t\t});\n// }, []);\n// const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\n// const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\n// Consuming a Stream\n// if(BEARER_TOKEN){\n//   const client = new Client(BEARER_TOKEN);\n//   async function OauthTwitter() {\n//     const stream = client.tweets.sampleStream({\n//       \"tweet.fields\": [\"author_id\"],\n//     });\n//     for await (const tweet of stream) {\n//       console.log(tweet.data?.author_id);\n//     }\n//     return(null);\n//   }\n//   return(<div><OauthTwitter/></div>)\n// }\n// Getting a Tweet\n// if(BEARER_TOKEN){\n//   const client = new Client(BEARER_TOKEN);\n//   async function GettingATweet() {\n//     const tweet = await client.tweets.findTweetById(\"20\");\n//     // console.log(tweet.data.text);\n//     console.log(tweet);\n//   }\n//     return(null);\n// }\n// oauth2-bearer.ts \n// if(BEARER_TOKEN){\n//   async function Oauth2Bearer() {\n//     const client = new Client(BEARER_TOKEN);\n//     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n//     if (!data) throw new Error(\"Couldn't find user\");\n//     let count = 0;\n//     for await (const followers of client.users.usersIdFollowers(data.id)) {\n//       console.log(followers);\n//       if (++count === 3) {\n//         break;\n//       }\n//     }\n//     return (<div></div>);\n//   }\n// }\n// if(BEARER_TOKEN){\n//     const client = new Client(BEARER_TOKEN);\n//     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n//     if (!data) throw new Error(\"Couldn't find user\");\n//     let count = 0;\n//     for await (const followers of client.users.usersIdFollowers(data.id)) {\n//       console.log(followers);\n//       if (++count === 3) {\n//         break;\n//       }\n//     }\n//     return (<div></div>);\n// }\n// const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\n// const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\n// function TestOauth(){\n//   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\n//     authCallback={authHandler}\n//     consumerKey={CONSUMER_KEY}\n//     consumerSecret={CONSUMER_SECRET}\n//   />)}\n//   else{\n//     return(<div></div>)\n//   }\n// }\n// return (<p>1<GettingATweet/></p>)\n// const authHandler = (err:any, data:any) => {\n//   console.log(err, data);\n// };\nfunction BtnToCreateTweet(){function handleClick(e){var endpointURL=\"https://api.twitter.com/2/tweets\";var data={text:\"Hello Worldsss!!!!!!!!\"};axios({method:'post',url:'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/tweets',data:data,headers:{'Authorization':'Bearer '+accessToken}}).then(function(res){console.log(res);// alert(\"생성이 완료되었습니다.\");\n});}return/*#__PURE__*/_jsx(\"button\",{onClick:handleClick});}function BtnToUserMe(){function handleClick(e){var endpointURL=\"https://api.twitter.com/2/users/me\";axios({method:'get',url:'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/users/me',// data: data,\nheaders:{'Authorization':'Bearer '+accessToken}}).then(function(res){console.log(res);// alert(\"생성이 완료되었습니다.\");\n});}return/*#__PURE__*/_jsx(\"button\",{onClick:handleClick});}return/*#__PURE__*/ (// <TestOauth/>\n// <TwitterLogin\n//       authCallback={authHandler}\n//       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\n//       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\n//       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\n//       buttonTheme={\"dark\"}\n//     \t/>\n_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(BtnToTwitterLogin,{}),/*#__PURE__*/_jsx(BtnToCreateTweet,{}),/*#__PURE__*/_jsx(BtnToUserMe,{})]}));};export default Oauth2Step3;","map":{"version":3,"names":["axios","React","useState","useSearchParams","qs","Oauth2Step3","require","Client","auth","accessToken","setAccessToken","CONSUMER_KEY","process","env","REACT_APP_CONSUMER_KEY","CONSUMER_SECRET","REACT_APP_CONSUMER_SECRET","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","ACCESS_TOKEN","REACT_APP_ACCESS_TOKEN","ACCESS_TOKEN_SECRET","REACT_APP_ACCESS_TOKEN_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","BEARER_TOKEN","REACT_APP_BEARER_TOKEN","TWITTER_STATE","TWITTER_CODE_CHALLENGE","TWITTER_AUTH_URL","TWITTER_SCOPE","join","searchParams","state","get","code","authClient","OAuth2User","client_id","client_secret","callback","scopes","client","params","expansions","BtnToTwitterLogin","handleClick","e","createFormParams","Object","keys","map","key","encodeURIComponent","data","stringify","grant_type","redirect_uri","code_verifier","method","url","headers","then","res","console","log","access_token","BtnToCreateTweet","endpointURL","text","BtnToUserMe"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/auth/Oauth2Step3.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\nimport { Client } from \"twitter-api-sdk\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\nimport { createHmac } from \"crypto\";\r\nimport { Navigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport qs from \"qs\";\r\n\r\nconst Oauth2Step3=()=>{\r\n\r\n    const { Client, auth } = require(\"twitter-api-sdk\");\r\n\r\n    const [accessToken, setAccessToken] = useState();\r\n\r\n\r\n\r\n  const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;\r\n\tconst ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  \r\n  // const TWITTER_STATE = \"twitter-increaser-state\";\r\n  const TWITTER_STATE = \"state\";\r\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\r\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\r\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\",\"tweet.write\"].join(\" \");\r\n  // const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const state = searchParams.get(\"state\");\r\n  const code = searchParams.get(\"code\");\r\n  \r\n  const authClient = new auth.OAuth2User({\r\n    client_id: CLIENT_ID,\r\n    client_secret: CLIENT_SECRET,\r\n    callback: \"http://localhost:3000/login/oauth2/code/twitter\",\r\n    scopes: [\"tweet.read\", \"users.read\", \"tweet.write\"],\r\n  });\r\n\r\n  const client = new Client(authClient);\r\n\r\n  const params = {\r\n  expansions: \"author_id\",\r\n  \"user.fields\": [\"username\", \"created_at\"],\r\n  \"tweet.fields\": [\"geo\", \"entities\", \"context_annotations\"],\r\n};\r\nfunction BtnToTwitterLogin(){\r\n\t\tfunction handleClick(e: any){\r\n  // useEffect(() => {\r\n// \tconsole.log(state);\r\n// \tconsole.log(code);\r\n// if(code){\r\n// const details = {\r\n//     code: code,\r\n    // grant_type: 'authorization_code',\r\n    // client_id: 'rG9n6402A3dbUJKzXTNX4oWHJ',\r\n    // redirect_uri: 'https://localhost:3000/home/unanswered/',\r\n    // code_verifier: 'challenge',\r\n// };\r\n// const formBodyPart = [];\r\n\r\n// for (let property in details) {\r\n//   let encodedKey = encodeURIComponent(property);\r\n//   let encodedValue = encodeURIComponent(details[property]);\r\n//   formBodyPart.push(encodedKey + \"=\" + encodedValue);\r\n\r\n// const formBody = formBodyPart.join(\"&\");\r\n// }\r\n\r\nconst createFormParams = (params:any) => {\r\n    return Object.keys(params)\r\n        .map((key) => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\r\n        .join('&')\r\n}\r\n\r\nif(code&&CLIENT_ID){\r\n  const data = qs.stringify({\r\n        code: code,\r\n        grant_type: 'authorization_code',\r\n        client_id: CLIENT_ID,\r\n        redirect_uri: 'http://localhost:3000/login/oauth2/code/twitter',\r\n        code_verifier: 'challenge',\r\n      });\r\n  // let formData = new FormData();\r\n  //     formData.append(\"grant_type\", 'authorization_code');\r\n  //     formData.append(\"client_id\", CLIENT_ID);\r\n  //     formData.append(\"redirect_uri\", 'http://localhost:3000/login/oauth2/code/twitter');\r\n  //     formData.append(\"code\", code);\r\n  //     formData.append('code_verifier', 'challenge');\r\n\r\n  // const hello = createFormParams({\r\n  //       grant_type: 'authorization_code',\r\n  //       code: code,\r\n  //       client_id: CLIENT_ID,\r\n  //       redirect_uri: 'http://localhost:3000/login/oauth2/code/twitter',\r\n  //       code_verifier: 'challenge'\r\n  //     });\r\n  \r\n  axios({\r\n  method: 'post',\r\n  url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/oauth2/token',\r\n\r\n  data: data,\r\n  headers: {\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n    // 'Access-Control-Allow-Origin': 'https://api.twitter.com/2/oauth2/token',\r\n    // 'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\r\n    // 'Access-Control-Allow-Headers': '*',\r\n    // 'Access-Control-Allow-Credentials': 'true',\r\n  }\r\n\r\n}).then((res) => {\r\n  console.log(res);\r\n  console.log(res.data);\r\n  console.log(res.data.access_token);\r\n  setAccessToken(res.data.access_token);\r\n\t// alert(\"생성이 완료되었습니다.\");\r\n  });\r\n  \r\n\r\n\r\n\r\n  //   async function Hello(){\r\n  // await authClient.requestAccessToken(code);\r\n\r\n  //   //Get the user ID\r\n  //   const {\r\n  //     data: { id },\r\n  //   } = await client.users.findMyUser();\r\n\r\n  //   //Makes api call\r\n  //   const getBookmark = await client.bookmarks.getUsersIdBookmarks(id, params);\r\n  //   console.dir(getBookmark, {\r\n  //     depth: null,\r\n  //   });\r\n  //   process.exit();\r\n  //   }\r\n\r\n\r\n  //   Hello();\r\n\r\n\r\n\r\n\r\n  \t// axios\r\n\t\t// \t.post(\"https://api.twitter.com/2/oauth2/token\", null, {})\r\n\t\t// \t.then((res) => {\r\n\t\t// \t\talert(\"생성이 완료되었습니다.\");\r\n\t\t// \t\tconsole.log(res.data);\r\n\t\t// \t})\r\n\t\t// \t.catch((err) => {\r\n\t\t// \t\tconsole.log(err.config);\r\n\t\t// \t\tconsole.log(err.response.data);\r\n\t\t// \t});\r\n\r\n\r\n\r\n\r\n  // fetch(\"https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/oauth2/token\", {\r\n  // // fetch(\"https://api.twitter.com/2/oauth2/token\", {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  //     },\r\n\r\n  //   //   headers: {\r\n  //   // 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n  //   //   },\r\n\r\n  //     body: hello,\r\n  //   }).then(res => {\r\n  //     if(res.ok) {\r\n  //       alert(\"생성이 완료되었습니다.\")\r\n  //     }\r\n  //   })\r\n\r\n\r\n\r\n  //   const getURLWithQueryParams = (\r\n  //   baseUrl: string,\r\n  //   params: Record<string, any>\r\n  // ) => {\r\n  //   const query = Object.entries(params)\r\n  //     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n  //     .join(\"&\")\r\n\r\n  //   return `${baseUrl}?${query}`\r\n  // }\r\n  // const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  // getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n  //   response_type: \"code\",\r\n  //   client_id: CLIENT_ID,\r\n  //   redirect_uri: redirectUri,\r\n  //   scope: TWITTER_SCOPE,\r\n  //   state: TWITTER_STATE,\r\n  //   code_challenge: TWITTER_CODE_CHALLENGE,\r\n  //   code_challenge_method: \"plain\",\r\n  // })\r\n  //   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\r\n  //   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\r\n// }\r\n// \t}, []);\r\n  }}\r\n\t\treturn (\r\n\t\t\t<button onClick={handleClick}>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n  \r\n  \r\n  \r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n  // const [user, setUser] = useState<any>([]);\r\n  \r\n  // useEffect(() => {\r\n\t// \taxios\r\n\t// \t\t.get(\"/oauth2\")\r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tsetUser(res.data);\r\n\t// \t\t\tconsole.log(res.data);\r\n\t// \t\t})\r\n\t// \t\t.catch((err) => {\r\n\t// \t\t\tconsole.log(err.config);\r\n\t// \t\t\tconsole.log(err.response.data);\r\n\t// \t\t});\r\n\t// }, []);\r\n\r\n\r\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\r\n\r\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  // Consuming a Stream\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function OauthTwitter() {\r\n  //     const stream = client.tweets.sampleStream({\r\n  //       \"tweet.fields\": [\"author_id\"],\r\n  //     });\r\n  //     for await (const tweet of stream) {\r\n  //       console.log(tweet.data?.author_id);\r\n  //     }\r\n      \r\n  //     return(null);\r\n  //   }\r\n  //   return(<div><OauthTwitter/></div>)\r\n  // }\r\n\r\n\r\n  // Getting a Tweet\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function GettingATweet() {\r\n  //     const tweet = await client.tweets.findTweetById(\"20\");\r\n  //     // console.log(tweet.data.text);\r\n  //     console.log(tweet);\r\n  //   }\r\n      \r\n  //     return(null);\r\n  // }\r\n\r\n\r\n  // oauth2-bearer.ts \r\n  // if(BEARER_TOKEN){\r\n  //   async function Oauth2Bearer() {\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  //   }\r\n  // }\r\n\r\n  // if(BEARER_TOKEN){\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  // }\r\n\r\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  // function TestOauth(){\r\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\r\n  //     authCallback={authHandler}\r\n  //     consumerKey={CONSUMER_KEY}\r\n  //     consumerSecret={CONSUMER_SECRET}\r\n  //   />)}\r\n  //   else{\r\n  //     return(<div></div>)\r\n  //   }\r\n  // }\r\n  // return (<p>1<GettingATweet/></p>)\r\n\r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n\r\n  function BtnToCreateTweet(){\r\n\t\tfunction handleClick(e: any){\r\n      const endpointURL = `https://api.twitter.com/2/tweets`;\r\n      const data = {\r\n        text: \"Hello Worldsss!!!!!!!!\"\r\n      };\r\n\r\n      axios({\r\n  method: 'post',\r\n  url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/tweets',\r\n\r\n  data: data,\r\n  headers: {\r\n    'Authorization': 'Bearer ' +accessToken,\r\n  }\r\n\r\n}).then((res) => {\r\n  console.log(res);\r\n\t// alert(\"생성이 완료되었습니다.\");\r\n  });\r\n    \r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<button onClick={handleClick}>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\r\n  function BtnToUserMe(){\r\n\t\tfunction handleClick(e: any){\r\n      const endpointURL = `https://api.twitter.com/2/users/me`;\r\n\r\n\r\n      axios({\r\n  method: 'get',\r\n  url: 'https://cors-anywhere.herokuapp.com/https://api.twitter.com/2/users/me',\r\n\r\n  // data: data,\r\n  headers: {\r\n    'Authorization': 'Bearer ' +accessToken,\r\n  }\r\n\r\n}).then((res) => {\r\n  console.log(res);\r\n\t// alert(\"생성이 완료되었습니다.\");\r\n  });\r\n    \r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<button onClick={handleClick}>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\r\n  return (\r\n    // <TestOauth/>\r\n    // <TwitterLogin\r\n    //       authCallback={authHandler}\r\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\r\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\r\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\r\n    //       buttonTheme={\"dark\"}\r\n    //     \t/>\r\n    <div>\r\n      <BtnToTwitterLogin/>\r\n    <BtnToCreateTweet/>\r\n    <BtnToUserMe/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Oauth2Step3;"],"mappings":"iJAAA,MAAOA,MAAK,KAAM,OAAO,CACzB,MAAOC,MAAK,EAAeC,QAAQ,KAAQ,OAAO,CAKlD,OAA8BC,eAAe,KAAQ,kBAAkB,CACvE,MAAOC,GAAE,KAAM,IAAI,CAAC,wFAEpB,GAAMC,YAAW,CAAC,QAAZA,YAAW,EAAK,CAElB,aAAyBC,OAAO,CAAC,iBAAiB,CAAC,CAA3CC,MAAM,UAANA,MAAM,CAAEC,IAAI,UAAJA,IAAI,CAEpB,cAAsCN,QAAQ,EAAE,wCAAzCO,WAAW,eAAEC,cAAc,eAIpC,GAAMC,aAAY,CAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB,CACrD,GAAMC,gBAAe,CAACH,OAAO,CAACC,GAAG,CAACG,yBAAyB,CAC3D,GAAMC,UAAS,CAACL,OAAO,CAACC,GAAG,CAACK,mBAAmB,CAChD,GAAMC,cAAa,CAACP,OAAO,CAACC,GAAG,CAACO,uBAAuB,CACvD,GAAMC,aAAY,CAACT,OAAO,CAACC,GAAG,CAACS,sBAAsB,CACrD,GAAMC,oBAAmB,CAACX,OAAO,CAACC,GAAG,CAACW,6BAA6B,CACnE,GAAMC,aAAY,CAACb,OAAO,CAACC,GAAG,CAACa,sBAAsB,CACrD,GAAMC,aAAY,CAACf,OAAO,CAACC,GAAG,CAACe,sBAAsB,CAGpD;AACA,GAAMC,cAAa,CAAG,OAAO,CAC7B,GAAMC,uBAAsB,CAAG,WAAW,CAC1C,GAAMC,iBAAgB,CAAG,wCAAwC,CACjE,GAAMC,cAAa,CAAG,CAAC,YAAY,CAAE,YAAY,CAAC,aAAa,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAC1E;AAEA,qBAAuB9B,eAAe,EAAE,sDAAjC+B,YAAY,sBACnB,GAAMC,MAAK,CAAGD,YAAY,CAACE,GAAG,CAAC,OAAO,CAAC,CACvC,GAAMC,KAAI,CAAGH,YAAY,CAACE,GAAG,CAAC,MAAM,CAAC,CAErC,GAAME,WAAU,CAAG,GAAI9B,KAAI,CAAC+B,UAAU,CAAC,CACrCC,SAAS,CAAEvB,SAAS,CACpBwB,aAAa,CAAEtB,aAAa,CAC5BuB,QAAQ,CAAE,iDAAiD,CAC3DC,MAAM,CAAE,CAAC,YAAY,CAAE,YAAY,CAAE,aAAa,CACpD,CAAC,CAAC,CAEF,GAAMC,OAAM,CAAG,GAAIrC,OAAM,CAAC+B,UAAU,CAAC,CAErC,GAAMO,OAAM,CAAG,CACfC,UAAU,CAAE,WAAW,CACvB,aAAa,CAAE,CAAC,UAAU,CAAE,YAAY,CAAC,CACzC,cAAc,CAAE,CAAC,KAAK,CAAE,UAAU,CAAE,qBAAqB,CAC3D,CAAC,CACD,QAASC,kBAAiB,EAAE,CAC1B,QAASC,YAAW,CAACC,CAAM,CAAC,CAC5B;AACF;AACA;AACA;AACA;AACA;AACI;AACA;AACA;AACA;AACJ;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAIL,MAAU,CAAK,CACrC,MAAOM,OAAM,CAACC,IAAI,CAACP,MAAM,CAAC,CACrBQ,GAAG,CAAC,SAACC,GAAG,kBAAQC,kBAAkB,CAACD,GAAG,CAAC,aAAIC,kBAAkB,CAACV,MAAM,CAACS,GAAG,CAAC,CAAC,GAAE,CAAC,CAC7ErB,IAAI,CAAC,GAAG,CAAC,CAClB,CAAC,CAED,GAAGI,IAAI,EAAEpB,SAAS,CAAC,CACjB,GAAMuC,KAAI,CAAGpD,EAAE,CAACqD,SAAS,CAAC,CACpBpB,IAAI,CAAEA,IAAI,CACVqB,UAAU,CAAE,oBAAoB,CAChClB,SAAS,CAAEvB,SAAS,CACpB0C,YAAY,CAAE,iDAAiD,CAC/DC,aAAa,CAAE,WACjB,CAAC,CAAC,CACN;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA5D,KAAK,CAAC,CACN6D,MAAM,CAAE,MAAM,CACdC,GAAG,CAAE,4EAA4E,CAEjFN,IAAI,CAAEA,IAAI,CACVO,OAAO,CAAE,CACP,cAAc,CAAE,mCAChB;AACA;AACA;AACA;AACF,CAEF,CAAC,CAAC,CAACC,IAAI,CAAC,SAACC,GAAG,CAAK,CACfC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAChBC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACT,IAAI,CAAC,CACrBU,OAAO,CAACC,GAAG,CAACF,GAAG,CAACT,IAAI,CAACY,YAAY,CAAC,CAClC1D,cAAc,CAACuD,GAAG,CAACT,IAAI,CAACY,YAAY,CAAC,CACtC;AACC,CAAC,CAAC,CAKF;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAKC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA;AACE,CAAC,CACD,mBACC,eAAQ,OAAO,CAAEpB,WAAY,EACpB,CAEX,CAIC;AACA;AACA;AAEA;AAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA,QAASqB,iBAAgB,EAAE,CAC3B,QAASrB,YAAW,CAACC,CAAM,CAAC,CACxB,GAAMqB,YAAW,mCAAqC,CACtD,GAAMd,KAAI,CAAG,CACXe,IAAI,CAAE,wBACR,CAAC,CAEDvE,KAAK,CAAC,CACV6D,MAAM,CAAE,MAAM,CACdC,GAAG,CAAE,sEAAsE,CAE3EN,IAAI,CAAEA,IAAI,CACVO,OAAO,CAAE,CACP,eAAe,CAAE,SAAS,CAAEtD,WAC9B,CAEF,CAAC,CAAC,CAACuD,IAAI,CAAC,SAACC,GAAG,CAAK,CACfC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CACjB;AACC,CAAC,CAAC,CAEF,CACA,mBACC,eAAQ,OAAO,CAAEjB,WAAY,EACpB,CAEX,CAEC,QAASwB,YAAW,EAAE,CACtB,QAASxB,YAAW,CAACC,CAAM,CAAC,CACxB,GAAMqB,YAAW,qCAAuC,CAGxDtE,KAAK,CAAC,CACV6D,MAAM,CAAE,KAAK,CACbC,GAAG,CAAE,wEAAwE,CAE7E;AACAC,OAAO,CAAE,CACP,eAAe,CAAE,SAAS,CAAEtD,WAC9B,CAEF,CAAC,CAAC,CAACuD,IAAI,CAAC,SAACC,GAAG,CAAK,CACfC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CACjB;AACC,CAAC,CAAC,CAEF,CACA,mBACC,eAAQ,OAAO,CAAEjB,WAAY,EACpB,CAEX,CAEC,oBACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCACE,KAAC,iBAAiB,IAAE,cACtB,KAAC,gBAAgB,IAAE,cACnB,KAAC,WAAW,IAAE,GACR,EAEV,CAAC,CAED,cAAe3C,YAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}