{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _slicedToArray = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar globals_1 = require(\"../globals\");\nvar client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nvar types_1 = require(\"../types\");\nvar fs = __importStar(require(\"fs\"));\nvar media_helpers_v1_1 = require(\"./media-helpers.v1\");\nvar helpers_1 = require(\"../helpers\");\nvar UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nvar TwitterApiv1ReadWrite = /*#__PURE__*/function (_client_v1_read_1$def) {\n  _inherits(TwitterApiv1ReadWrite, _client_v1_read_1$def);\n  var _super = _createSuper(TwitterApiv1ReadWrite);\n  function TwitterApiv1ReadWrite() {\n    var _this;\n    _classCallCheck(this, TwitterApiv1ReadWrite);\n    _this = _super.apply(this, arguments);\n    _this._prefix = globals_1.API_V1_1_PREFIX;\n    return _this;\n  }\n  /**\n   * Get a client with only read rights.\n   */\n  _createClass(TwitterApiv1ReadWrite, [{\n    key: \"readOnly\",\n    get: function get() {\n      return this;\n    }\n    /* Tweet API */\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n  }, {\n    key: \"tweet\",\n    value: function tweet(status) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryParams = _objectSpread({\n        status: status,\n        tweet_mode: 'extended'\n      }, payload);\n      return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Quote an existing tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n  }, {\n    key: \"quote\",\n    value: function () {\n      var _quote = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(status, quotingStatusId) {\n        var payload,\n          url,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                payload = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n                return _context.abrupt(\"return\", this.tweet(status, _objectSpread(_objectSpread({}, payload), {}, {\n                  attachment_url: url\n                })));\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function quote(_x, _x2) {\n        return _quote.apply(this, arguments);\n      }\n      return quote;\n    }()\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n  }, {\n    key: \"tweetThread\",\n    value: function () {\n      var _tweetThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tweets) {\n        var postedTweets, _iterator, _step, tweet, lastTweet, queryParams, inReplyToId, status;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                postedTweets = [];\n                _iterator = _createForOfIteratorHelper(tweets);\n                _context2.prev = 2;\n                _iterator.s();\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 25;\n                  break;\n                }\n                tweet = _step.value;\n                // Retrieve the last sent tweet\n                lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n                queryParams = _objectSpread({}, typeof tweet === 'string' ? {\n                  status: tweet\n                } : tweet); // Reply to an existing tweet if needed\n                inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n                status = queryParams.status;\n                if (!inReplyToId) {\n                  _context2.next = 18;\n                  break;\n                }\n                _context2.t0 = postedTweets;\n                _context2.next = 14;\n                return this.reply(status, inReplyToId, queryParams);\n              case 14:\n                _context2.t1 = _context2.sent;\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n                _context2.next = 23;\n                break;\n              case 18:\n                _context2.t2 = postedTweets;\n                _context2.next = 21;\n                return this.tweet(status, queryParams);\n              case 21:\n                _context2.t3 = _context2.sent;\n                _context2.t2.push.call(_context2.t2, _context2.t3);\n              case 23:\n                _context2.next = 4;\n                break;\n              case 25:\n                _context2.next = 30;\n                break;\n              case 27:\n                _context2.prev = 27;\n                _context2.t4 = _context2[\"catch\"](2);\n                _iterator.e(_context2.t4);\n              case 30:\n                _context2.prev = 30;\n                _iterator.f();\n                return _context2.finish(30);\n              case 33:\n                return _context2.abrupt(\"return\", postedTweets);\n              case 34:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 27, 30, 33]]);\n      }));\n      function tweetThread(_x3) {\n        return _tweetThread.apply(this, arguments);\n      }\n      return tweetThread;\n    }()\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n  }, {\n    key: \"reply\",\n    value: function reply(status, in_reply_to_status_id) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.tweet(status, _objectSpread({\n        auto_populate_reply_metadata: true,\n        in_reply_to_status_id: in_reply_to_status_id\n      }, payload));\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n  }, {\n    key: \"deleteTweet\",\n    value: function deleteTweet(tweetId) {\n      return this.post('statuses/destroy/:id.json', {\n        tweet_mode: 'extended'\n      }, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /* User API */\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n  }, {\n    key: \"reportUserAsSpam\",\n    value: function reportUserAsSpam(options) {\n      return this.post('users/report_spam.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n  }, {\n    key: \"updateFriendship\",\n    value: function updateFriendship(options) {\n      return this.post('friendships/update.json', options);\n    }\n    /**\n     * Follow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create\n     */\n  }, {\n    key: \"createFriendship\",\n    value: function createFriendship(options) {\n      return this.post('friendships/create.json', options);\n    }\n    /**\n     * Unfollow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy\n     */\n  }, {\n    key: \"destroyFriendship\",\n    value: function destroyFriendship(options) {\n      return this.post('friendships/destroy.json', options);\n    }\n    /* Account API */\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n  }, {\n    key: \"updateAccountSettings\",\n    value: function updateAccountSettings(options) {\n      return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n  }, {\n    key: \"updateAccountProfile\",\n    value: function updateAccountProfile(options) {\n      return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n  }, {\n    key: \"updateAccountProfileBanner\",\n    value: function () {\n      var _updateAccountProfileBanner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {\n        var options,\n          queryParams,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                options = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                _context3.t0 = _objectSpread;\n                _context3.next = 4;\n                return (0, media_helpers_v1_1.readFileIntoBuffer)(file);\n              case 4:\n                _context3.t1 = _context3.sent;\n                _context3.t2 = {\n                  banner: _context3.t1\n                };\n                _context3.t3 = options;\n                queryParams = (0, _context3.t0)(_context3.t2, _context3.t3);\n                return _context3.abrupt(\"return\", this.post('account/update_profile_banner.json', queryParams, {\n                  forceBodyMode: 'form-data'\n                }));\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function updateAccountProfileBanner(_x4) {\n        return _updateAccountProfileBanner.apply(this, arguments);\n      }\n      return updateAccountProfileBanner;\n    }()\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n  }, {\n    key: \"updateAccountProfileImage\",\n    value: function () {\n      var _updateAccountProfileImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(file) {\n        var options,\n          queryParams,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n                _context4.t0 = _objectSpread;\n                _context4.next = 4;\n                return (0, media_helpers_v1_1.readFileIntoBuffer)(file);\n              case 4:\n                _context4.t1 = _context4.sent;\n                _context4.t2 = {\n                  tweet_mode: 'extended',\n                  image: _context4.t1\n                };\n                _context4.t3 = options;\n                queryParams = (0, _context4.t0)(_context4.t2, _context4.t3);\n                return _context4.abrupt(\"return\", this.post('account/update_profile_image.json', queryParams, {\n                  forceBodyMode: 'form-data'\n                }));\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function updateAccountProfileImage(_x5) {\n        return _updateAccountProfileImage.apply(this, arguments);\n      }\n      return updateAccountProfileImage;\n    }()\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n  }, {\n    key: \"removeAccountProfileBanner\",\n    value: function removeAccountProfileBanner() {\n      return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n  }, {\n    key: \"createList\",\n    value: function createList(options) {\n      return this.post('lists/create.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n  }, {\n    key: \"updateList\",\n    value: function updateList(options) {\n      return this.post('lists/update.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n  }, {\n    key: \"removeList\",\n    value: function removeList(options) {\n      return this.post('lists/destroy.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n  }, {\n    key: \"addListMembers\",\n    value: function addListMembers(options) {\n      var hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n      var endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n      return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n  }, {\n    key: \"removeListMembers\",\n    value: function removeListMembers(options) {\n      var hasMultiple = options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id) || options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name);\n      var endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n      return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n  }, {\n    key: \"subscribeToList\",\n    value: function subscribeToList(options) {\n      return this.post('lists/subscribers/create.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n  }, {\n    key: \"unsubscribeOfList\",\n    value: function unsubscribeOfList(options) {\n      return this.post('lists/subscribers/destroy.json', _objectSpread({\n        tweet_mode: 'extended'\n      }, options));\n    }\n    /* Media upload API */\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n  }, {\n    key: \"createMediaMetadata\",\n    value: function createMediaMetadata(mediaId, metadata) {\n      return this.post('media/metadata/create.json', _objectSpread({\n        media_id: mediaId\n      }, metadata), {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n  }, {\n    key: \"createMediaSubtitles\",\n    value: function createMediaSubtitles(mediaId, subtitles) {\n      return this.post('media/subtitles/create.json', {\n        media_id: mediaId,\n        media_category: 'TweetVideo',\n        subtitle_info: {\n          subtitles: subtitles\n        }\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n  }, {\n    key: \"deleteMediaSubtitles\",\n    value: function deleteMediaSubtitles(mediaId) {\n      for (var _len = arguments.length, languages = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        languages[_key - 1] = arguments[_key];\n      }\n      return this.post('media/subtitles/delete.json', {\n        media_id: mediaId,\n        media_category: 'TweetVideo',\n        subtitle_info: {\n          subtitles: languages.map(function (lang) {\n            return {\n              language_code: lang\n            };\n          })\n        }\n      }, {\n        prefix: globals_1.API_V1_1_UPLOAD_PREFIX,\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n  }, {\n    key: \"uploadMedia\",\n    value: function () {\n      var _uploadMedia = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(file) {\n        var options,\n          _a,\n          chunkLength,\n          _yield$this$getUpload,\n          fileHandle,\n          mediaCategory,\n          fileSize,\n          mimeType,\n          mediaData,\n          fullMediaData,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n                chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : 1024 * 1024;\n                _context5.next = 4;\n                return this.getUploadMediaRequirements(file, options);\n              case 4:\n                _yield$this$getUpload = _context5.sent;\n                fileHandle = _yield$this$getUpload.fileHandle;\n                mediaCategory = _yield$this$getUpload.mediaCategory;\n                fileSize = _yield$this$getUpload.fileSize;\n                mimeType = _yield$this$getUpload.mimeType;\n                _context5.prev = 9;\n                _context5.next = 12;\n                return this.post(UPLOAD_ENDPOINT, {\n                  command: 'INIT',\n                  total_bytes: fileSize,\n                  media_type: mimeType,\n                  media_category: mediaCategory,\n                  additional_owners: options.additionalOwners,\n                  shared: options.shared ? true : undefined\n                }, {\n                  prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                });\n              case 12:\n                mediaData = _context5.sent;\n                _context5.next = 15;\n                return this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n              case 15:\n                _context5.next = 17;\n                return this.post(UPLOAD_ENDPOINT, {\n                  command: 'FINALIZE',\n                  media_id: mediaData.media_id_string\n                }, {\n                  prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                });\n              case 17:\n                fullMediaData = _context5.sent;\n                if (!(fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded')) {\n                  _context5.next = 21;\n                  break;\n                }\n                _context5.next = 21;\n                return this.awaitForMediaProcessingCompletion(fullMediaData);\n              case 21:\n                return _context5.abrupt(\"return\", fullMediaData.media_id_string);\n              case 22:\n                _context5.prev = 22;\n                // Close file if any\n                if (typeof file === 'number') {\n                  // eslint-disable-next-line @typescript-eslint/no-empty-function\n                  fs.close(file, function () {});\n                } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                  fileHandle.close();\n                }\n                return _context5.finish(22);\n              case 25:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[9,, 22, 25]]);\n      }));\n      function uploadMedia(_x6) {\n        return _uploadMedia.apply(this, arguments);\n      }\n      return uploadMedia;\n    }()\n  }, {\n    key: \"awaitForMediaProcessingCompletion\",\n    value: function () {\n      var _awaitForMediaProcessingCompletion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(fullMediaData) {\n        var _fullMediaData, processing_info, _processing_info$erro, name, message;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!true) {\n                  _context6.next = 21;\n                  break;\n                }\n                _context6.next = 3;\n                return this.mediaInfo(fullMediaData.media_id_string);\n              case 3:\n                fullMediaData = _context6.sent;\n                _fullMediaData = fullMediaData, processing_info = _fullMediaData.processing_info;\n                if (!(!processing_info || processing_info.state === 'succeeded')) {\n                  _context6.next = 7;\n                  break;\n                }\n                return _context6.abrupt(\"return\");\n              case 7:\n                if (!(processing_info.state === 'failed')) {\n                  _context6.next = 12;\n                  break;\n                }\n                if (!processing_info.error) {\n                  _context6.next = 11;\n                  break;\n                }\n                _processing_info$erro = processing_info.error, name = _processing_info$erro.name, message = _processing_info$erro.message;\n                throw new Error(\"Failed to process media: \".concat(name, \" - \").concat(message, \".\"));\n              case 11:\n                throw new Error('Failed to process the media.');\n              case 12:\n                if (!processing_info.check_after_secs) {\n                  _context6.next = 17;\n                  break;\n                }\n                _context6.next = 15;\n                return (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n              case 15:\n                _context6.next = 19;\n                break;\n              case 17:\n                _context6.next = 19;\n                return (0, media_helpers_v1_1.sleepSecs)(5);\n              case 19:\n                _context6.next = 0;\n                break;\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function awaitForMediaProcessingCompletion(_x7) {\n        return _awaitForMediaProcessingCompletion.apply(this, arguments);\n      }\n      return awaitForMediaProcessingCompletion;\n    }()\n  }, {\n    key: \"getUploadMediaRequirements\",\n    value: function () {\n      var _getUploadMediaRequirements = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(file) {\n        var _ref,\n          mimeType,\n          type,\n          target,\n          longVideo,\n          fileHandle,\n          realMimeType,\n          mediaCategory,\n          _args7 = arguments;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _ref = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {}, mimeType = _ref.mimeType, type = _ref.type, target = _ref.target, longVideo = _ref.longVideo;\n                _context7.prev = 1;\n                _context7.next = 4;\n                return (0, media_helpers_v1_1.getFileHandle)(file);\n              case 4:\n                fileHandle = _context7.sent;\n                // Get the mimetype\n                realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType); // Get the media category\n                // If explicit longmp4 OR explicit MIME type and not DM target\n                if (realMimeType === types_1.EUploadMimeType.Mp4 && (!mimeType && !type && target !== 'dm' || longVideo)) {\n                  mediaCategory = 'amplify_video';\n                } else {\n                  mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n                }\n                _context7.t0 = fileHandle;\n                _context7.t1 = mediaCategory;\n                _context7.next = 11;\n                return (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle);\n              case 11:\n                _context7.t2 = _context7.sent;\n                _context7.t3 = realMimeType;\n                return _context7.abrupt(\"return\", {\n                  fileHandle: _context7.t0,\n                  mediaCategory: _context7.t1,\n                  fileSize: _context7.t2,\n                  mimeType: _context7.t3\n                });\n              case 16:\n                _context7.prev = 16;\n                _context7.t4 = _context7[\"catch\"](1);\n                // Close file if any\n                if (typeof file === 'number') {\n                  // eslint-disable-next-line @typescript-eslint/no-empty-function\n                  fs.close(file, function () {});\n                } else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                  fileHandle.close();\n                }\n                throw _context7.t4;\n              case 20:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, null, [[1, 16]]);\n      }));\n      function getUploadMediaRequirements(_x8) {\n        return _getUploadMediaRequirements.apply(this, arguments);\n      }\n      return getUploadMediaRequirements;\n    }()\n  }, {\n    key: \"mediaChunkedUpload\",\n    value: function () {\n      var _mediaChunkedUpload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(fileHandle, chunkLength, mediaId) {\n        var _this2 = this;\n        var maxConcurrentUploads,\n          chunkIndex,\n          buffer,\n          readBuffer,\n          nread,\n          offset,\n          _yield,\n          _yield2,\n          currentUploads,\n          mediaBufferPart,\n          _yield3,\n          _yield4,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                maxConcurrentUploads = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : 3;\n                // Send chunk by chunk\n                chunkIndex = 0;\n                if (!(maxConcurrentUploads < 1)) {\n                  _context8.next = 4;\n                  break;\n                }\n                throw new RangeError('Bad maxConcurrentUploads parameter.');\n              case 4:\n                // Creating a buffer for doing file stuff (if we don't have one)\n                buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength); // Sliced/filled buffer returned for each part\n                // Needed to use the buffer object (file handles always \"remembers\" file position)\n                offset = 0;\n                _context8.next = 8;\n                return (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n              case 8:\n                _yield = _context8.sent;\n                _yield2 = _slicedToArray(_yield, 2);\n                readBuffer = _yield2[0];\n                nread = _yield2[1];\n                offset += nread;\n                // Handle max concurrent uploads\n                currentUploads = new Set(); // Read buffer until file is completely read\n              case 14:\n                if (!nread) {\n                  _context8.next = 29;\n                  break;\n                }\n                mediaBufferPart = readBuffer.slice(0, nread); // Sent part if part has something inside\n                if (mediaBufferPart.length) {\n                  (function () {\n                    var request = _this2.post(UPLOAD_ENDPOINT, {\n                      command: 'APPEND',\n                      media_id: mediaId,\n                      segment_index: chunkIndex,\n                      media: mediaBufferPart\n                    }, {\n                      prefix: globals_1.API_V1_1_UPLOAD_PREFIX\n                    });\n                    currentUploads.add(request);\n                    request.then(function () {\n                      currentUploads.delete(request);\n                    });\n                    chunkIndex++;\n                  })();\n                }\n                if (!(currentUploads.size >= maxConcurrentUploads)) {\n                  _context8.next = 20;\n                  break;\n                }\n                _context8.next = 20;\n                return Promise.race(currentUploads);\n              case 20:\n                _context8.next = 22;\n                return (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n              case 22:\n                _yield3 = _context8.sent;\n                _yield4 = _slicedToArray(_yield3, 2);\n                readBuffer = _yield4[0];\n                nread = _yield4[1];\n                offset += nread;\n                _context8.next = 14;\n                break;\n              case 29:\n                _context8.next = 31;\n                return Promise.all(_toConsumableArray(currentUploads));\n              case 31:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n      function mediaChunkedUpload(_x9, _x10, _x11) {\n        return _mediaChunkedUpload.apply(this, arguments);\n      }\n      return mediaChunkedUpload;\n    }()\n  }]);\n  return TwitterApiv1ReadWrite;\n}(client_v1_read_1.default);\nexports.default = TwitterApiv1ReadWrite;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","globals_1","require","client_v1_read_1","types_1","fs","media_helpers_v1_1","helpers_1","UPLOAD_ENDPOINT","TwitterApiv1ReadWrite","arguments","_prefix","API_V1_1_PREFIX","status","payload","queryParams","tweet_mode","post","quotingStatusId","url","tweet","attachment_url","tweets","postedTweets","lastTweet","length","inReplyToId","id_str","in_reply_to_status_id","reply","push","auto_populate_reply_metadata","tweetId","params","id","options","file","readFileIntoBuffer","banner","forceBodyMode","image","hasMultiple","user_id","hasMultipleItems","screen_name","endpoint","mediaId","metadata","media_id","prefix","API_V1_1_UPLOAD_PREFIX","subtitles","media_category","subtitle_info","languages","map","lang","language_code","chunkLength","_a","getUploadMediaRequirements","fileHandle","mediaCategory","fileSize","mimeType","command","total_bytes","media_type","additional_owners","additionalOwners","shared","mediaData","mediaChunkedUpload","media_id_string","maxConcurrentUploads","fullMediaData","processing_info","state","awaitForMediaProcessingCompletion","close","Buffer","mediaInfo","error","name","message","Error","check_after_secs","sleepSecs","type","target","longVideo","getFileHandle","realMimeType","getMimeType","EUploadMimeType","Mp4","getMediaCategoryByMime","getFileSizeFromFileHandle","chunkIndex","RangeError","buffer","alloc","offset","readNextPartOf","readBuffer","nread","currentUploads","Set","mediaBufferPart","slice","request","segment_index","media","add","then","delete","size","Promise","race","all","default"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v1/client.v1.write.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v1_read_1 = __importDefault(require(\"./client.v1.read\"));\nconst types_1 = require(\"../types\");\nconst fs = __importStar(require(\"fs\"));\nconst media_helpers_v1_1 = require(\"./media-helpers.v1\");\nconst helpers_1 = require(\"../helpers\");\nconst UPLOAD_ENDPOINT = 'media/upload.json';\n/**\n * Base Twitter v1 client with read/write rights.\n */\nclass TwitterApiv1ReadWrite extends client_v1_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /* Tweet API */\n    /**\n     * Post a new tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    tweet(status, payload = {}) {\n        const queryParams = {\n            status,\n            tweet_mode: 'extended',\n            ...payload,\n        };\n        return this.post('statuses/update.json', queryParams);\n    }\n    /**\n     * Quote an existing tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async quote(status, quotingStatusId, payload = {}) {\n        const url = 'https://twitter.com/i/statuses/' + quotingStatusId;\n        return this.tweet(status, { ...payload, attachment_url: url });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    async tweetThread(tweets) {\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ status: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.id_str : queryParams.in_reply_to_status_id;\n            const status = queryParams.status;\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Reply to an existing tweet. Shortcut to `.tweet` with tweaked parameters.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-update\n     */\n    reply(status, in_reply_to_status_id, payload = {}) {\n        return this.tweet(status, {\n            auto_populate_reply_metadata: true,\n            in_reply_to_status_id,\n            ...payload,\n        });\n    }\n    /**\n     * Delete an existing tweet belonging to you.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     */\n    deleteTweet(tweetId) {\n        return this.post('statuses/destroy/:id.json', { tweet_mode: 'extended' }, { params: { id: tweetId } });\n    }\n    /* User API */\n    /**\n     * Report the specified user as a spam account to Twitter.\n     * Additionally, optionally performs the equivalent of POST blocks/create on behalf of the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/mute-block-report-users/api-reference/post-users-report_spam\n     */\n    reportUserAsSpam(options) {\n        return this.post('users/report_spam.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Turn on/off Retweets and device notifications from the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-update\n     */\n    updateFriendship(options) {\n        return this.post('friendships/update.json', options);\n    }\n    /**\n     * Follow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-create\n     */\n    createFriendship(options) {\n        return this.post('friendships/create.json', options);\n    }\n    /**\n     * Unfollow the specified user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/follow-search-get-users/api-reference/post-friendships-destroy\n     */\n    destroyFriendship(options) {\n        return this.post('friendships/destroy.json', options);\n    }\n    /* Account API */\n    /**\n     * Update current account settings for authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/get-account-settings\n     */\n    updateAccountSettings(options) {\n        return this.post('account/settings.json', options);\n    }\n    /**\n     * Sets some values that users are able to set under the \"Account\" tab of their settings page.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile\n     */\n    updateAccountProfile(options) {\n        return this.post('account/update_profile.json', options);\n    }\n    /**\n     * Uploads a profile banner on behalf of the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_banner\n     */\n    async updateAccountProfileBanner(file, options = {}) {\n        const queryParams = {\n            banner: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_banner.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Updates the authenticating user's profile image.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-update_profile_image\n     */\n    async updateAccountProfileImage(file, options = {}) {\n        const queryParams = {\n            tweet_mode: 'extended',\n            image: await (0, media_helpers_v1_1.readFileIntoBuffer)(file),\n            ...options,\n        };\n        return this.post('account/update_profile_image.json', queryParams, { forceBodyMode: 'form-data' });\n    }\n    /**\n     * Removes the uploaded profile banner for the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/manage-account-settings/api-reference/post-account-remove_profile_banner\n     */\n    removeAccountProfileBanner() {\n        return this.post('account/remove_profile_banner.json');\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-create\n     */\n    createList(options) {\n        return this.post('lists/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-update\n     */\n    updateList(options) {\n        return this.post('lists/update.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-destroy\n     */\n    removeList(options) {\n        return this.post('lists/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/create.json`, otherwise\n     * it will target `lists/members/create_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-create_all\n     */\n    addListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/create_all.json' : 'lists/members/create.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Removes multiple members to a list, by specifying a comma-separated list of member ids or screen names.\n     * If you add a single `user_id` or `screen_name`, it will target `lists/members/destroy.json`, otherwise\n     * it will target `lists/members/destroy_all.json`.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-members-destroy_all\n     */\n    removeListMembers(options) {\n        const hasMultiple = (options.user_id && (0, helpers_1.hasMultipleItems)(options.user_id)) || (options.screen_name && (0, helpers_1.hasMultipleItems)(options.screen_name));\n        const endpoint = hasMultiple ? 'lists/members/destroy_all.json' : 'lists/members/destroy.json';\n        return this.post(endpoint, options);\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-create\n     */\n    subscribeToList(options) {\n        return this.post('lists/subscribers/create.json', { tweet_mode: 'extended', ...options });\n    }\n    /**\n     * Unsubscribes the authenticated user of the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/accounts-and-users/create-manage-lists/api-reference/post-lists-subscribers-destroy\n     */\n    unsubscribeOfList(options) {\n        return this.post('lists/subscribers/destroy.json', { tweet_mode: 'extended', ...options });\n    }\n    /* Media upload API */\n    /**\n     * This endpoint can be used to provide additional information about the uploaded media_id.\n     * This feature is currently only supported for images and GIFs.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-metadata-create\n     */\n    createMediaMetadata(mediaId, metadata) {\n        return this.post('media/metadata/create.json', { media_id: mediaId, ...metadata }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to associate uploaded subtitles to an uploaded video. You can associate subtitles to video before or after Tweeting.\n     * **To obtain subtitle media ID, you must upload each subtitle file separately using `.uploadMedia()` method.**\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-create\n     */\n    createMediaSubtitles(mediaId, subtitles) {\n        return this.post('media/subtitles/create.json', { media_id: mediaId, media_category: 'TweetVideo', subtitle_info: { subtitles } }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Use this endpoint to dissociate subtitles from a video and delete the subtitles. You can dissociate subtitles from a video before or after Tweeting.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/media/upload-media/api-reference/post-media-subtitles-delete\n     */\n    deleteMediaSubtitles(mediaId, ...languages) {\n        return this.post('media/subtitles/delete.json', {\n            media_id: mediaId,\n            media_category: 'TweetVideo',\n            subtitle_info: { subtitles: languages.map(lang => ({ language_code: lang })) },\n        }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX, forceBodyMode: 'json' });\n    }\n    /**\n     * Upload a media (JPG/PNG/GIF/MP4/WEBP) or subtitle (SRT) to Twitter and return the media_id to use in tweet/DM send.\n     *\n     * @param file If `string`, filename is supposed.\n     * A `Buffer` is a raw file.\n     * `fs.promises.FileHandle` or `number` are file pointers.\n     *\n     * @param options.type File type (Enum 'jpg' | 'longmp4' | 'mp4' | 'png' | 'gif' | 'srt' | 'webp').\n     * If filename is given, it could be guessed with file extension, otherwise this parameter is mandatory.\n     * If type is not part of the enum, it will be used as mime type.\n     *\n     * Type `longmp4` is **required** is you try to upload a video higher than 140 seconds.\n     *\n     * @param options.chunkLength Maximum chunk length sent to Twitter. Default goes to 1 MB.\n     *\n     * @param options.additionalOwners Other user IDs allowed to use the returned media_id. Default goes to none.\n     *\n     * @param options.maxConcurrentUploads Maximum uploaded chunks in the same time. Default goes to 3.\n     *\n     * @param options.target Target type `tweet` or `dm`. Defaults to `tweet`.\n     * You must specify it if you send a media to use in DMs.\n     */\n    async uploadMedia(file, options = {}) {\n        var _a;\n        const chunkLength = (_a = options.chunkLength) !== null && _a !== void 0 ? _a : (1024 * 1024);\n        const { fileHandle, mediaCategory, fileSize, mimeType } = await this.getUploadMediaRequirements(file, options);\n        // Get the file handle (if not buffer)\n        try {\n            // Finally! We can send INIT message.\n            const mediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'INIT',\n                total_bytes: fileSize,\n                media_type: mimeType,\n                media_category: mediaCategory,\n                additional_owners: options.additionalOwners,\n                shared: options.shared ? true : undefined,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            // Upload the media chunk by chunk\n            await this.mediaChunkedUpload(fileHandle, chunkLength, mediaData.media_id_string, options.maxConcurrentUploads);\n            // Finalize media\n            const fullMediaData = await this.post(UPLOAD_ENDPOINT, {\n                command: 'FINALIZE',\n                media_id: mediaData.media_id_string,\n            }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n            if (fullMediaData.processing_info && fullMediaData.processing_info.state !== 'succeeded') {\n                // Must wait if video is still computed\n                await this.awaitForMediaProcessingCompletion(fullMediaData);\n            }\n            // Video is ready, return media_id\n            return fullMediaData.media_id_string;\n        }\n        finally {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n        }\n    }\n    async awaitForMediaProcessingCompletion(fullMediaData) {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            fullMediaData = await this.mediaInfo(fullMediaData.media_id_string);\n            const { processing_info } = fullMediaData;\n            if (!processing_info || processing_info.state === 'succeeded') {\n                // Ok, completed!\n                return;\n            }\n            if (processing_info.state === 'failed') {\n                if (processing_info.error) {\n                    const { name, message } = processing_info.error;\n                    throw new Error(`Failed to process media: ${name} - ${message}.`);\n                }\n                throw new Error('Failed to process the media.');\n            }\n            if (processing_info.check_after_secs) {\n                // Await for given seconds\n                await (0, media_helpers_v1_1.sleepSecs)(processing_info.check_after_secs);\n            }\n            else {\n                // No info; Await for 5 seconds\n                await (0, media_helpers_v1_1.sleepSecs)(5);\n            }\n        }\n    }\n    async getUploadMediaRequirements(file, { mimeType, type, target, longVideo } = {}) {\n        // Get the file handle (if not buffer)\n        let fileHandle;\n        try {\n            fileHandle = await (0, media_helpers_v1_1.getFileHandle)(file);\n            // Get the mimetype\n            const realMimeType = (0, media_helpers_v1_1.getMimeType)(file, type, mimeType);\n            // Get the media category\n            let mediaCategory;\n            // If explicit longmp4 OR explicit MIME type and not DM target\n            if (realMimeType === types_1.EUploadMimeType.Mp4 && ((!mimeType && !type && target !== 'dm') || longVideo)) {\n                mediaCategory = 'amplify_video';\n            }\n            else {\n                mediaCategory = (0, media_helpers_v1_1.getMediaCategoryByMime)(realMimeType, target !== null && target !== void 0 ? target : 'tweet');\n            }\n            return {\n                fileHandle,\n                mediaCategory,\n                fileSize: await (0, media_helpers_v1_1.getFileSizeFromFileHandle)(fileHandle),\n                mimeType: realMimeType,\n            };\n        }\n        catch (e) {\n            // Close file if any\n            if (typeof file === 'number') {\n                // eslint-disable-next-line @typescript-eslint/no-empty-function\n                fs.close(file, () => { });\n            }\n            else if (typeof fileHandle === 'object' && !(fileHandle instanceof Buffer)) {\n                fileHandle.close();\n            }\n            throw e;\n        }\n    }\n    async mediaChunkedUpload(fileHandle, chunkLength, mediaId, maxConcurrentUploads = 3) {\n        // Send chunk by chunk\n        let chunkIndex = 0;\n        if (maxConcurrentUploads < 1) {\n            throw new RangeError('Bad maxConcurrentUploads parameter.');\n        }\n        // Creating a buffer for doing file stuff (if we don't have one)\n        const buffer = fileHandle instanceof Buffer ? undefined : Buffer.alloc(chunkLength);\n        // Sliced/filled buffer returned for each part\n        let readBuffer;\n        // Needed to know when we should stop reading the file\n        let nread;\n        // Needed to use the buffer object (file handles always \"remembers\" file position)\n        let offset = 0;\n        [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n        offset += nread;\n        // Handle max concurrent uploads\n        const currentUploads = new Set();\n        // Read buffer until file is completely read\n        while (nread) {\n            const mediaBufferPart = readBuffer.slice(0, nread);\n            // Sent part if part has something inside\n            if (mediaBufferPart.length) {\n                const request = this.post(UPLOAD_ENDPOINT, {\n                    command: 'APPEND',\n                    media_id: mediaId,\n                    segment_index: chunkIndex,\n                    media: mediaBufferPart,\n                }, { prefix: globals_1.API_V1_1_UPLOAD_PREFIX });\n                currentUploads.add(request);\n                request.then(() => {\n                    currentUploads.delete(request);\n                });\n                chunkIndex++;\n            }\n            if (currentUploads.size >= maxConcurrentUploads) {\n                // Await for first promise to be finished\n                await Promise.race(currentUploads);\n            }\n            [readBuffer, nread] = await (0, media_helpers_v1_1.readNextPartOf)(fileHandle, chunkLength, offset, buffer);\n            offset += nread;\n        }\n        await Promise.all([...currentUploads]);\n    }\n}\nexports.default = TwitterApiv1ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}