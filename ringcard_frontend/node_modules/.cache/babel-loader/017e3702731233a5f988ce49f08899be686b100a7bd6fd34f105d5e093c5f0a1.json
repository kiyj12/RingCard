{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _regeneratorRuntime = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _objectSpread = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _asyncToGenerator = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _defineProperty = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _objectWithoutProperties = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectWithoutProperties.js\").default;\nvar _classCallCheck = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _excluded = [\"recipient_id\", \"custom_profile_id\"];\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TwitterApiv1 = void 0;\nvar globals_1 = require(\"../globals\");\nvar dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\nvar types_1 = require(\"../types\");\nvar client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\nvar TwitterApiv1 = /*#__PURE__*/function (_client_v1_write_1$de) {\n  _inherits(TwitterApiv1, _client_v1_write_1$de);\n  var _super = _createSuper(TwitterApiv1);\n  function TwitterApiv1() {\n    var _this;\n    _classCallCheck(this, TwitterApiv1);\n    _this = _super.apply(this, arguments);\n    _this._prefix = globals_1.API_V1_1_PREFIX;\n    return _this;\n  }\n  /**\n   * Get a client with read/write rights.\n   */\n  _createClass(TwitterApiv1, [{\n    key: \"readWrite\",\n    get: function get() {\n      return this;\n    }\n    /* Direct messages */\n    // Part: Sending and receiving events\n    /**\n     * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n     */\n  }, {\n    key: \"sendDm\",\n    value: function sendDm(_ref) {\n      var recipient_id = _ref.recipient_id,\n        custom_profile_id = _ref.custom_profile_id,\n        params = _objectWithoutProperties(_ref, _excluded);\n      var args = {\n        event: _defineProperty({\n          type: types_1.EDirectMessageEventTypeV1.Create\n        }, types_1.EDirectMessageEventTypeV1.Create, {\n          target: {\n            recipient_id: recipient_id\n          },\n          message_data: params\n        })\n      };\n      if (custom_profile_id) {\n        args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n      }\n      return this.post('direct_messages/events/new.json', args, {\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Returns a single Direct Message event by the given id.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n     */\n  }, {\n    key: \"getDmEvent\",\n    value: function getDmEvent(id) {\n      return this.get('direct_messages/events/show.json', {\n        id: id\n      });\n    }\n    /**\n     * Deletes the direct message specified in the required ID parameter.\n     * The authenticating user must be the recipient of the specified direct message.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n     */\n  }, {\n    key: \"deleteDm\",\n    value: function deleteDm(id) {\n      return this.delete('direct_messages/events/destroy.json', {\n        id: id\n      });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n  }, {\n    key: \"listDmEvents\",\n    value: function () {\n      var _listDmEvents = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var args,\n          queryParams,\n          initialRq,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                args = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n                queryParams = _objectSpread({}, args);\n                _context.next = 4;\n                return this.get('direct_messages/events/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context.sent;\n                return _context.abrupt(\"return\", new dm_paginator_v1_1.DmEventsV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function listDmEvents() {\n        return _listDmEvents.apply(this, arguments);\n      }\n      return listDmEvents;\n    }() // Part: Welcome messages (events)\n    /**\n     * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n     */\n  }, {\n    key: \"newWelcomeDm\",\n    value: function newWelcomeDm(name, data) {\n      var args = _defineProperty({}, types_1.EDirectMessageEventTypeV1.WelcomeCreate, {\n        name: name,\n        message_data: data\n      });\n      return this.post('direct_messages/welcome_messages/new.json', args, {\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Returns a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n     */\n  }, {\n    key: \"getWelcomeDm\",\n    value: function getWelcomeDm(id) {\n      return this.get('direct_messages/welcome_messages/show.json', {\n        id: id\n      });\n    }\n    /**\n     * Deletes a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n     */\n  }, {\n    key: \"deleteWelcomeDm\",\n    value: function deleteWelcomeDm(id) {\n      return this.delete('direct_messages/welcome_messages/destroy.json', {\n        id: id\n      });\n    }\n    /**\n     * Updates a Welcome Message by the given ID.\n     * Updates to the welcome_message object are atomic.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n     */\n  }, {\n    key: \"updateWelcomeDm\",\n    value: function updateWelcomeDm(id, data) {\n      var args = {\n        message_data: data\n      };\n      return this.put('direct_messages/welcome_messages/update.json', args, {\n        forceBodyMode: 'json',\n        query: {\n          id: id\n        }\n      });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n  }, {\n    key: \"listWelcomeDms\",\n    value: function () {\n      var _listWelcomeDms = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var args,\n          queryParams,\n          initialRq,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                args = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                queryParams = _objectSpread({}, args);\n                _context2.next = 4;\n                return this.get('direct_messages/welcome_messages/list.json', queryParams, {\n                  fullResponse: true\n                });\n              case 4:\n                initialRq = _context2.sent;\n                return _context2.abrupt(\"return\", new dm_paginator_v1_1.WelcomeDmV1Paginator({\n                  realData: initialRq.data,\n                  rateLimit: initialRq.rateLimit,\n                  instance: this,\n                  queryParams: queryParams\n                }));\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function listWelcomeDms() {\n        return _listWelcomeDms.apply(this, arguments);\n      }\n      return listWelcomeDms;\n    }() // Part: Welcome message (rules)\n    /**\n     * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n     */\n  }, {\n    key: \"newWelcomeDmRule\",\n    value: function newWelcomeDmRule(welcomeMessageId) {\n      return this.post('direct_messages/welcome_messages/rules/new.json', {\n        welcome_message_rule: {\n          welcome_message_id: welcomeMessageId\n        }\n      }, {\n        forceBodyMode: 'json'\n      });\n    }\n    /**\n     * Returns a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n     */\n  }, {\n    key: \"getWelcomeDmRule\",\n    value: function getWelcomeDmRule(id) {\n      return this.get('direct_messages/welcome_messages/rules/show.json', {\n        id: id\n      });\n    }\n    /**\n     * Deletes a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n     */\n  }, {\n    key: \"deleteWelcomeDmRule\",\n    value: function deleteWelcomeDmRule(id) {\n      return this.delete('direct_messages/welcome_messages/rules/destroy.json', {\n        id: id\n      });\n    }\n    /**\n     * Retrieves all welcome DM rules for this account.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n     */\n  }, {\n    key: \"listWelcomeDmRules\",\n    value: function () {\n      var _listWelcomeDmRules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var args,\n          queryParams,\n          _args4 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                args = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n                queryParams = _objectSpread({}, args);\n                return _context3.abrupt(\"return\", this.get('direct_messages/welcome_messages/rules/list.json', queryParams));\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function listWelcomeDmRules() {\n        return _listWelcomeDmRules.apply(this, arguments);\n      }\n      return listWelcomeDmRules;\n    }()\n    /**\n     * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n     * Test if a rule already exists, delete if any, then create a rule for current message ID.\n     *\n     * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n     */\n  }, {\n    key: \"setWelcomeDm\",\n    value: function () {\n      var _setWelcomeDm = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(welcomeMessageId) {\n        var deleteAssociatedWelcomeDmWhenDeletingRule,\n          _a,\n          existingRules,\n          _iterator,\n          _step,\n          rule,\n          _args5 = arguments;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                deleteAssociatedWelcomeDmWhenDeletingRule = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : true;\n                _context4.next = 3;\n                return this.listWelcomeDmRules();\n              case 3:\n                existingRules = _context4.sent;\n                if (!((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length)) {\n                  _context4.next = 25;\n                  break;\n                }\n                _iterator = _createForOfIteratorHelper(existingRules.welcome_message_rules);\n                _context4.prev = 6;\n                _iterator.s();\n              case 8:\n                if ((_step = _iterator.n()).done) {\n                  _context4.next = 17;\n                  break;\n                }\n                rule = _step.value;\n                _context4.next = 12;\n                return this.deleteWelcomeDmRule(rule.id);\n              case 12:\n                if (!deleteAssociatedWelcomeDmWhenDeletingRule) {\n                  _context4.next = 15;\n                  break;\n                }\n                _context4.next = 15;\n                return this.deleteWelcomeDm(rule.welcome_message_id);\n              case 15:\n                _context4.next = 8;\n                break;\n              case 17:\n                _context4.next = 22;\n                break;\n              case 19:\n                _context4.prev = 19;\n                _context4.t0 = _context4[\"catch\"](6);\n                _iterator.e(_context4.t0);\n              case 22:\n                _context4.prev = 22;\n                _iterator.f();\n                return _context4.finish(22);\n              case 25:\n                return _context4.abrupt(\"return\", this.newWelcomeDmRule(welcomeMessageId));\n              case 26:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[6, 19, 22, 25]]);\n      }));\n      function setWelcomeDm(_x) {\n        return _setWelcomeDm.apply(this, arguments);\n      }\n      return setWelcomeDm;\n    }() // Part: Read indicator\n    /**\n     * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n     */\n  }, {\n    key: \"markDmAsRead\",\n    value: function markDmAsRead(lastEventId, recipientId) {\n      return this.post('direct_messages/mark_read.json', {\n        last_read_event_id: lastEventId,\n        recipient_id: recipientId\n      }, {\n        forceBodyMode: 'url'\n      });\n    }\n    /**\n     * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n     */\n  }, {\n    key: \"indicateDmTyping\",\n    value: function indicateDmTyping(recipientId) {\n      return this.post('direct_messages/indicate_typing.json', {\n        recipient_id: recipientId\n      }, {\n        forceBodyMode: 'url'\n      });\n    }\n    // Part: Images\n    /**\n     * Get a single image attached to a direct message. TwitterApi client must be logged with OAuth 1.0a.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/message-attachments/guides/retrieving-media\n     */\n  }, {\n    key: \"downloadDmImage\",\n    value: function () {\n      var _downloadDmImage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(urlOrDm) {\n        var attachment, data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(typeof urlOrDm !== 'string')) {\n                  _context5.next = 5;\n                  break;\n                }\n                attachment = urlOrDm[types_1.EDirectMessageEventTypeV1.Create].message_data.attachment;\n                if (attachment) {\n                  _context5.next = 4;\n                  break;\n                }\n                throw new Error('The given direct message doesn\\'t contain any attachment');\n              case 4:\n                urlOrDm = attachment.media_url_https;\n              case 5:\n                _context5.next = 7;\n                return this.get(urlOrDm, undefined, {\n                  forceParseMode: 'buffer',\n                  prefix: ''\n                });\n              case 7:\n                data = _context5.sent;\n                if (data.length) {\n                  _context5.next = 10;\n                  break;\n                }\n                throw new Error('Image not found. Make sure you are logged with credentials able to access direct messages, and check the URL.');\n              case 10:\n                return _context5.abrupt(\"return\", data);\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function downloadDmImage(_x2) {\n        return _downloadDmImage.apply(this, arguments);\n      }\n      return downloadDmImage;\n    }()\n  }]);\n  return TwitterApiv1;\n}(client_v1_write_1.default);\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","TwitterApiv1","globals_1","require","dm_paginator_v1_1","types_1","client_v1_write_1","arguments","_prefix","API_V1_1_PREFIX","recipient_id","custom_profile_id","params","args","event","type","EDirectMessageEventTypeV1","Create","target","message_data","post","forceBodyMode","id","get","delete","queryParams","fullResponse","initialRq","DmEventsV1Paginator","realData","data","rateLimit","instance","name","WelcomeCreate","put","query","WelcomeDmV1Paginator","welcomeMessageId","welcome_message_rule","welcome_message_id","deleteAssociatedWelcomeDmWhenDeletingRule","listWelcomeDmRules","existingRules","_a","welcome_message_rules","length","rule","deleteWelcomeDmRule","deleteWelcomeDm","newWelcomeDmRule","lastEventId","recipientId","last_read_event_id","urlOrDm","attachment","Error","media_url_https","undefined","forceParseMode","prefix","default"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v1/client.v1.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TwitterApiv1 = void 0;\nconst globals_1 = require(\"../globals\");\nconst dm_paginator_v1_1 = require(\"../paginators/dm.paginator.v1\");\nconst types_1 = require(\"../types\");\nconst client_v1_write_1 = __importDefault(require(\"./client.v1.write\"));\n/**\n * Twitter v1.1 API client with read/write/DMs rights.\n */\nclass TwitterApiv1 extends client_v1_write_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V1_1_PREFIX;\n    }\n    /**\n     * Get a client with read/write rights.\n     */\n    get readWrite() {\n        return this;\n    }\n    /* Direct messages */\n    // Part: Sending and receiving events\n    /**\n     * Publishes a new message_create event resulting in a Direct Message sent to a specified user from the authenticating user.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/new-event\n     */\n    sendDm({ recipient_id, custom_profile_id, ...params }) {\n        const args = {\n            event: {\n                type: types_1.EDirectMessageEventTypeV1.Create,\n                [types_1.EDirectMessageEventTypeV1.Create]: {\n                    target: { recipient_id },\n                    message_data: params,\n                },\n            },\n        };\n        if (custom_profile_id) {\n            args.event[types_1.EDirectMessageEventTypeV1.Create].custom_profile_id = custom_profile_id;\n        }\n        return this.post('direct_messages/events/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a single Direct Message event by the given id.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/get-event\n     */\n    getDmEvent(id) {\n        return this.get('direct_messages/events/show.json', { id });\n    }\n    /**\n     * Deletes the direct message specified in the required ID parameter.\n     * The authenticating user must be the recipient of the specified direct message.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/delete-message-event\n     */\n    deleteDm(id) {\n        return this.delete('direct_messages/events/destroy.json', { id });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listDmEvents(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/events/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.DmEventsV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome messages (events)\n    /**\n     * Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message\n     */\n    newWelcomeDm(name, data) {\n        const args = {\n            [types_1.EDirectMessageEventTypeV1.WelcomeCreate]: {\n                name,\n                message_data: data,\n            },\n        };\n        return this.post('direct_messages/welcome_messages/new.json', args, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message\n     */\n    getWelcomeDm(id) {\n        return this.get('direct_messages/welcome_messages/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message\n     */\n    deleteWelcomeDm(id) {\n        return this.delete('direct_messages/welcome_messages/destroy.json', { id });\n    }\n    /**\n     * Updates a Welcome Message by the given ID.\n     * Updates to the welcome_message object are atomic.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/update-welcome-message\n     */\n    updateWelcomeDm(id, data) {\n        const args = { message_data: data };\n        return this.put('direct_messages/welcome_messages/update.json', args, {\n            forceBodyMode: 'json',\n            query: { id },\n        });\n    }\n    /**\n     * Returns all Direct Message events (both sent and received) within the last 30 days.\n     * Sorted in reverse-chronological order.\n     *\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/sending-and-receiving/api-reference/list-events\n     */\n    async listWelcomeDms(args = {}) {\n        const queryParams = { ...args };\n        const initialRq = await this.get('direct_messages/welcome_messages/list.json', queryParams, { fullResponse: true });\n        return new dm_paginator_v1_1.WelcomeDmV1Paginator({\n            realData: initialRq.data,\n            rateLimit: initialRq.rateLimit,\n            instance: this,\n            queryParams,\n        });\n    }\n    // Part: Welcome message (rules)\n    /**\n     * Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/new-welcome-message-rule\n     */\n    newWelcomeDmRule(welcomeMessageId) {\n        return this.post('direct_messages/welcome_messages/rules/new.json', {\n            welcome_message_rule: { welcome_message_id: welcomeMessageId },\n        }, {\n            forceBodyMode: 'json',\n        });\n    }\n    /**\n     * Returns a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/get-welcome-message-rule\n     */\n    getWelcomeDmRule(id) {\n        return this.get('direct_messages/welcome_messages/rules/show.json', { id });\n    }\n    /**\n     * Deletes a Welcome Message Rule by the given id.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/delete-welcome-message-rule\n     */\n    deleteWelcomeDmRule(id) {\n        return this.delete('direct_messages/welcome_messages/rules/destroy.json', { id });\n    }\n    /**\n     * Retrieves all welcome DM rules for this account.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/welcome-messages/api-reference/list-welcome-message-rules\n     */\n    async listWelcomeDmRules(args = {}) {\n        const queryParams = { ...args };\n        return this.get('direct_messages/welcome_messages/rules/list.json', queryParams);\n    }\n    /**\n     * Set the current showed welcome message for logged account ; wrapper for Welcome DM rules.\n     * Test if a rule already exists, delete if any, then create a rule for current message ID.\n     *\n     * If you don't have already a welcome message, create it with `.newWelcomeMessage`.\n     */\n    async setWelcomeDm(welcomeMessageId, deleteAssociatedWelcomeDmWhenDeletingRule = true) {\n        var _a;\n        const existingRules = await this.listWelcomeDmRules();\n        if ((_a = existingRules.welcome_message_rules) === null || _a === void 0 ? void 0 : _a.length) {\n            for (const rule of existingRules.welcome_message_rules) {\n                await this.deleteWelcomeDmRule(rule.id);\n                if (deleteAssociatedWelcomeDmWhenDeletingRule) {\n                    await this.deleteWelcomeDm(rule.welcome_message_id);\n                }\n            }\n        }\n        return this.newWelcomeDmRule(welcomeMessageId);\n    }\n    // Part: Read indicator\n    /**\n     * Marks a message as read in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-read-receipt\n     */\n    markDmAsRead(lastEventId, recipientId) {\n        return this.post('direct_messages/mark_read.json', {\n            last_read_event_id: lastEventId,\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n    /**\n     * Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/typing-indicator-and-read-receipts/api-reference/new-typing-indicator\n     */\n    indicateDmTyping(recipientId) {\n        return this.post('direct_messages/indicate_typing.json', {\n            recipient_id: recipientId,\n        }, { forceBodyMode: 'url' });\n    }\n    // Part: Images\n    /**\n     * Get a single image attached to a direct message. TwitterApi client must be logged with OAuth 1.0a.\n     * https://developer.twitter.com/en/docs/twitter-api/v1/direct-messages/message-attachments/guides/retrieving-media\n     */\n    async downloadDmImage(urlOrDm) {\n        if (typeof urlOrDm !== 'string') {\n            const attachment = urlOrDm[types_1.EDirectMessageEventTypeV1.Create].message_data.attachment;\n            if (!attachment) {\n                throw new Error('The given direct message doesn\\'t contain any attachment');\n            }\n            urlOrDm = attachment.media_url_https;\n        }\n        const data = await this.get(urlOrDm, undefined, { forceParseMode: 'buffer', prefix: '' });\n        if (!data.length) {\n            throw new Error('Image not found. Make sure you are logged with credentials able to access direct messages, and check the URL.');\n        }\n        return data;\n    }\n}\nexports.TwitterApiv1 = TwitterApiv1;\nexports.default = TwitterApiv1;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}