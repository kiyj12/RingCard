{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EStreamParserEvent = void 0;\nconst events_1 = require(\"events\");\nclass TweetStreamParser extends events_1.EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.currentMessage = '';\n  }\n  // Code partially belongs to twitter-stream-api for this\n  // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n  push(chunk) {\n    this.currentMessage += chunk;\n    chunk = this.currentMessage;\n    const size = chunk.length;\n    let start = 0;\n    let offset = 0;\n    while (offset < size) {\n      // Take [offset, offset+1] inside a new string\n      if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n        // If chunk contains \\r\\n after current offset,\n        // parse [start, ..., offset] as a tweet\n        const piece = chunk.slice(start, offset);\n        start = offset += 2;\n        // If empty object\n        if (!piece.length) {\n          continue;\n        }\n        try {\n          const payload = JSON.parse(piece);\n          if (payload) {\n            this.emit(EStreamParserEvent.ParsedData, payload);\n            continue;\n          }\n        } catch (error) {\n          this.emit(EStreamParserEvent.ParseError, error);\n        }\n      }\n      offset++;\n    }\n    this.currentMessage = chunk.slice(start, size);\n  }\n  /** Reset the currently stored message (f.e. on connection reset) */\n  reset() {\n    this.currentMessage = '';\n  }\n}\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n(function (EStreamParserEvent) {\n  EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n  EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));","map":{"version":3,"names":["Object","defineProperty","exports","value","EStreamParserEvent","events_1","require","TweetStreamParser","EventEmitter","constructor","arguments","currentMessage","push","chunk","size","length","start","offset","slice","piece","payload","JSON","parse","emit","ParsedData","error","ParseError","reset","default"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/stream/TweetStreamParser.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EStreamParserEvent = void 0;\nconst events_1 = require(\"events\");\nclass TweetStreamParser extends events_1.EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.currentMessage = '';\n    }\n    // Code partially belongs to twitter-stream-api for this\n    // https://github.com/trygve-lie/twitter-stream-api/blob/master/lib/parser.js\n    push(chunk) {\n        this.currentMessage += chunk;\n        chunk = this.currentMessage;\n        const size = chunk.length;\n        let start = 0;\n        let offset = 0;\n        while (offset < size) {\n            // Take [offset, offset+1] inside a new string\n            if (chunk.slice(offset, offset + 2) === '\\r\\n') {\n                // If chunk contains \\r\\n after current offset,\n                // parse [start, ..., offset] as a tweet\n                const piece = chunk.slice(start, offset);\n                start = offset += 2;\n                // If empty object\n                if (!piece.length) {\n                    continue;\n                }\n                try {\n                    const payload = JSON.parse(piece);\n                    if (payload) {\n                        this.emit(EStreamParserEvent.ParsedData, payload);\n                        continue;\n                    }\n                }\n                catch (error) {\n                    this.emit(EStreamParserEvent.ParseError, error);\n                }\n            }\n            offset++;\n        }\n        this.currentMessage = chunk.slice(start, size);\n    }\n    /** Reset the currently stored message (f.e. on connection reset) */\n    reset() {\n        this.currentMessage = '';\n    }\n}\nexports.default = TweetStreamParser;\nvar EStreamParserEvent;\n(function (EStreamParserEvent) {\n    EStreamParserEvent[\"ParsedData\"] = \"parsed data\";\n    EStreamParserEvent[\"ParseError\"] = \"parse error\";\n})(EStreamParserEvent = exports.EStreamParserEvent || (exports.EStreamParserEvent = {}));\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMC,iBAAiB,SAASF,QAAQ,CAACG,YAAY,CAAC;EAClDC,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,cAAc,GAAG,EAAE;EAC5B;EACA;EACA;EACAC,IAAI,CAACC,KAAK,EAAE;IACR,IAAI,CAACF,cAAc,IAAIE,KAAK;IAC5BA,KAAK,GAAG,IAAI,CAACF,cAAc;IAC3B,MAAMG,IAAI,GAAGD,KAAK,CAACE,MAAM;IACzB,IAAIC,KAAK,GAAG,CAAC;IACb,IAAIC,MAAM,GAAG,CAAC;IACd,OAAOA,MAAM,GAAGH,IAAI,EAAE;MAClB;MACA,IAAID,KAAK,CAACK,KAAK,CAACD,MAAM,EAAEA,MAAM,GAAG,CAAC,CAAC,KAAK,MAAM,EAAE;QAC5C;QACA;QACA,MAAME,KAAK,GAAGN,KAAK,CAACK,KAAK,CAACF,KAAK,EAAEC,MAAM,CAAC;QACxCD,KAAK,GAAGC,MAAM,IAAI,CAAC;QACnB;QACA,IAAI,CAACE,KAAK,CAACJ,MAAM,EAAE;UACf;QACJ;QACA,IAAI;UACA,MAAMK,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC;UACjC,IAAIC,OAAO,EAAE;YACT,IAAI,CAACG,IAAI,CAACnB,kBAAkB,CAACoB,UAAU,EAAEJ,OAAO,CAAC;YACjD;UACJ;QACJ,CAAC,CACD,OAAOK,KAAK,EAAE;UACV,IAAI,CAACF,IAAI,CAACnB,kBAAkB,CAACsB,UAAU,EAAED,KAAK,CAAC;QACnD;MACJ;MACAR,MAAM,EAAE;IACZ;IACA,IAAI,CAACN,cAAc,GAAGE,KAAK,CAACK,KAAK,CAACF,KAAK,EAAEF,IAAI,CAAC;EAClD;EACA;EACAa,KAAK,GAAG;IACJ,IAAI,CAAChB,cAAc,GAAG,EAAE;EAC5B;AACJ;AACAT,OAAO,CAAC0B,OAAO,GAAGrB,iBAAiB;AACnC,IAAIH,kBAAkB;AACtB,CAAC,UAAUA,kBAAkB,EAAE;EAC3BA,kBAAkB,CAAC,YAAY,CAAC,GAAG,aAAa;EAChDA,kBAAkB,CAAC,YAAY,CAAC,GAAG,aAAa;AACpD,CAAC,EAAEA,kBAAkB,GAAGF,OAAO,CAACE,kBAAkB,KAAKF,OAAO,CAACE,kBAAkB,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}