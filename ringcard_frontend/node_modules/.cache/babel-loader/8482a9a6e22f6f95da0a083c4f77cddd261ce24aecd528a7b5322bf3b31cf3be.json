{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from \"react-router-dom\";\nimport { TwitterApi } from 'twitter-api-v2';\nconst Oauth = () => {\n  _s();\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  const CALLBACK_URL = process.env.REACT_APP_CALLBACK_URL;\n  const navigate = useNavigate();\n\n  // 일단 oauth1.0a로 해보자.\n  // const client = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\n\n  // OAuth 1.0a (User context)\n  const userClient = new TwitterApi({\n    // appKey: 'consumerAppKey',\n    appKey: 'S0FVySANFNnlISMw5D1vSE8P0',\n    // appSecret: 'consumerAppSecret',\n    appSecret: 'KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X',\n    // Following access tokens are not required if you are\n    // at part 1 of user-auth process (ask for a request token)\n    // or if you want a app-only client (see below)\n    // accessToken: 'accessOAuthToken',\n    accessToken: '1516353113430851586-Qhjz3YpRRL1yFqSa5PYcyjf5gmJhU1',\n    // accessSecret: 'accessOAuthSecret',\n    accessSecret: 'accdPvdajDmTYtMybqbj9mOMnTIvbE9SnOuJY8h9uRQjRxlnessOAuthSecret'\n  });\n  const client = new TwitterApi({\n    appKey: CONSUMER_KEY,\n    appSecret: CONSUMER_SECRET\n  });\n\n  //   // OAuth2 (app-only or user context)\n  //   // Create a client with an already known bearer token\n  //   const appOnlyClient = new TwitterApi('bearerToken');\n  //   // OR - you can also create a app-only client from your consumer keys -\n  //   const appOnlyClientFromConsumer = await userClient.appLogin();\n\n  //   // Oauth2\n  // \t// if로 undefined 처리)\n  // \tif (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL){\n  // \t\tconst client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n\n  // \t\t// Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\n  // \t\tconst { url, codeVerifier, state } = client.generateOAuth2AuthLink(CALLBACK_URL, { scope: ['tweet.read', 'users.read', 'offline.access'] });\n\n  // \t\t// Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\n\n  //     // const a = url;\n  //     // console.log(a);\n  // \t\t// client.generateAuthLink();\n  // \t\tnavigate(url);\n  //     // console.log(url);\n  // \t\t// console.log(url);\n\n  //   app.get('/callback', (req:any, res:any) => {\n  //   // Extract state and code from query string\n  //   const { state, code } = req.query;\n  //   // Get the saved codeVerifier from session\n  //   const { codeVerifier, state: sessionState } = req.session;\n\n  //   if (!codeVerifier || !state || !sessionState || !code) {\n  //     return res.status(400).send('You denied the app or your session expired!');\n  //   }\n  //   if (state !== sessionState) {\n  //     return res.status(400).send('Stored tokens didnt match!');\n  //   }\n\n  //   // Obtain access token\n  //   const client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\n\n  //   client.loginWithOAuth2({ code, codeVerifier, redirectUri: CALLBACK_URL })\n  //     .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {\n  //       // {loggedClient} is an authenticated client in behalf of some user\n  //       // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.\n  //       // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)\n\n  //       // Example request\n  //       const { data: userObject } = await loggedClient.v2.me();\n  //     })\n  //     .catch(() => res.status(403).send('Invalid verifier or access tokens!'));\n  // });\n  // }\n\n  return null;\n};\n_s(Oauth, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Oauth;\nexport default Oauth;\nvar _c;\n$RefreshReg$(_c, \"Oauth\");","map":{"version":3,"names":["useNavigate","TwitterApi","Oauth","CLIENT_ID","process","env","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","navigate","userClient","appKey","appSecret","accessToken","accessSecret","client","CONSUMER_KEY","CONSUMER_SECRET"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/login/Oauth.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\n\r\nconst Oauth=()=>{\r\n\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst navigate = useNavigate();\r\n\r\n\r\n  // 일단 oauth1.0a로 해보자.\r\n  // const client = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\r\n\r\n  // OAuth 1.0a (User context)\r\n  const userClient = new TwitterApi({\r\n    // appKey: 'consumerAppKey',\r\n    appKey: 'S0FVySANFNnlISMw5D1vSE8P0',\r\n    // appSecret: 'consumerAppSecret',\r\n    appSecret: 'KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X',\r\n    // Following access tokens are not required if you are\r\n    // at part 1 of user-auth process (ask for a request token)\r\n    // or if you want a app-only client (see below)\r\n    // accessToken: 'accessOAuthToken',\r\n    accessToken: '1516353113430851586-Qhjz3YpRRL1yFqSa5PYcyjf5gmJhU1',\r\n    // accessSecret: 'accessOAuthSecret',\r\n    accessSecret: 'accdPvdajDmTYtMybqbj9mOMnTIvbE9SnOuJY8h9uRQjRxlnessOAuthSecret',\r\n  });\r\n\r\n  \r\n  const client = new TwitterApi({ appKey: CONSUMER_KEY, appSecret: CONSUMER_SECRET });\r\n\r\n\r\n\r\n//   // OAuth2 (app-only or user context)\r\n//   // Create a client with an already known bearer token\r\n//   const appOnlyClient = new TwitterApi('bearerToken');\r\n//   // OR - you can also create a app-only client from your consumer keys -\r\n//   const appOnlyClientFromConsumer = await userClient.appLogin();\r\n\r\n//   // Oauth2\r\n// \t// if로 undefined 처리)\r\n// \tif (CLIENT_ID && CLIENT_SECRET && CALLBACK_URL){\r\n// \t\tconst client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\r\n\r\n// \t\t// Don't forget to specify 'offline.access' in scope list if you want to refresh your token later\r\n// \t\tconst { url, codeVerifier, state } = client.generateOAuth2AuthLink(CALLBACK_URL, { scope: ['tweet.read', 'users.read', 'offline.access'] });\r\n\r\n// \t\t// Redirect your user to {url}, store {state} and {codeVerifier} into a DB/Redis/memory after user redirection\r\n    \r\n//     // const a = url;\r\n//     // console.log(a);\r\n// \t\t// client.generateAuthLink();\r\n// \t\tnavigate(url);\r\n//     // console.log(url);\r\n// \t\t// console.log(url);\r\n\r\n//   app.get('/callback', (req:any, res:any) => {\r\n//   // Extract state and code from query string\r\n//   const { state, code } = req.query;\r\n//   // Get the saved codeVerifier from session\r\n//   const { codeVerifier, state: sessionState } = req.session;\r\n\r\n//   if (!codeVerifier || !state || !sessionState || !code) {\r\n//     return res.status(400).send('You denied the app or your session expired!');\r\n//   }\r\n//   if (state !== sessionState) {\r\n//     return res.status(400).send('Stored tokens didnt match!');\r\n//   }\r\n\r\n//   // Obtain access token\r\n//   const client = new TwitterApi({ clientId: CLIENT_ID, clientSecret: CLIENT_SECRET });\r\n\r\n//   client.loginWithOAuth2({ code, codeVerifier, redirectUri: CALLBACK_URL })\r\n//     .then(async ({ client: loggedClient, accessToken, refreshToken, expiresIn }) => {\r\n//       // {loggedClient} is an authenticated client in behalf of some user\r\n//       // Store {accessToken} somewhere, it will be valid until {expiresIn} is hit.\r\n//       // If you want to refresh your token later, store {refreshToken} (it is present if 'offline.access' has been given as scope)\r\n\r\n//       // Example request\r\n//       const { data: userObject } = await loggedClient.v2.me();\r\n//     })\r\n//     .catch(() => res.status(403).send('Invalid verifier or access tokens!'));\r\n// });\r\n\t// }\r\n\r\n  return(null);\r\n\r\n}\r\n\r\nexport default Oauth;"],"mappings":";AACA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,gBAAgB;AAE3C,MAAMC,KAAK,GAAC,MAAI;EAAA;EAEd,MAAMC,SAAS,GAACC,OAAO,CAACC,GAAG,CAACC,mBAAmB;EAChD,MAAMC,aAAa,GAACH,OAAO,CAACC,GAAG,CAACG,uBAAuB;EACvD,MAAMC,YAAY,GAACL,OAAO,CAACC,GAAG,CAACK,sBAAsB;EACrD,MAAMC,QAAQ,GAAGX,WAAW,EAAE;;EAG7B;EACA;;EAEA;EACA,MAAMY,UAAU,GAAG,IAAIX,UAAU,CAAC;IAChC;IACAY,MAAM,EAAE,2BAA2B;IACnC;IACAC,SAAS,EAAE,oDAAoD;IAC/D;IACA;IACA;IACA;IACAC,WAAW,EAAE,oDAAoD;IACjE;IACAC,YAAY,EAAE;EAChB,CAAC,CAAC;EAGF,MAAMC,MAAM,GAAG,IAAIhB,UAAU,CAAC;IAAEY,MAAM,EAAEK,YAAY;IAAEJ,SAAS,EAAEK;EAAgB,CAAC,CAAC;;EAIrF;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACC;;EAEC,OAAO,IAAI;AAEb,CAAC;AAAA,GArFKjB,KAAK;EAAA,QAKOF,WAAW;AAAA;AAAA,KALvBE,KAAK;AAuFX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}