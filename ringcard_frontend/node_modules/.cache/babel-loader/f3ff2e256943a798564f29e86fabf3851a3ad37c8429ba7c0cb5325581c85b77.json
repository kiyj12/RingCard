{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yuleg\\\\Dev\\\\Ringca\\\\ORIN33\\\\ringcard\\\\ringcard_frontend\\\\src\\\\pages\\\\auth\\\\Oauth2Step3.tsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport qs from \"qs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Oauth2Step3 = () => {\n  _s();\n  const {\n    Client,\n    auth\n  } = require(\"twitter-api-sdk\");\n  const CONSUMER_KEY = process.env.REACT_APP_CONSUMER_KEY;\n  const CONSUMER_SECRET = process.env.REACT_APP_CONSUMER_SECRET;\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  const ACCESS_TOKEN = process.env.REACT_APP_ACCESS_TOKEN;\n  const ACCESS_TOKEN_SECRET = process.env.REACT_APP_ACCESS_TOKEN_SECRET;\n  const CALLBACK_URL = process.env.REACT_APP_CALLBACK_URL;\n  const BEARER_TOKEN = process.env.REACT_APP_BEARER_TOKEN;\n\n  // const TWITTER_STATE = \"twitter-increaser-state\";\n  const TWITTER_STATE = \"state\";\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\n  const [searchParams] = useSearchParams();\n  const state = searchParams.get(\"state\");\n  const code = searchParams.get(\"code\");\n  const authClient = new auth.OAuth2User({\n    client_id: CLIENT_ID,\n    client_secret: CLIENT_SECRET,\n    callback: \"http://localhost:3000/login/oauth2/code/twitter\",\n    scopes: [\"tweet.read\", \"users.read\", \"bookmark.read\"]\n  });\n  const client = new Client(authClient);\n  const params = {\n    expansions: \"author_id\",\n    \"user.fields\": [\"username\", \"created_at\"],\n    \"tweet.fields\": [\"geo\", \"entities\", \"context_annotations\"]\n  };\n  useEffect(() => {\n    // \tconsole.log(state);\n    // \tconsole.log(code);\n    // if(code){\n    // const details = {\n    //     code: code,\n    // grant_type: 'authorization_code',\n    // client_id: 'rG9n6402A3dbUJKzXTNX4oWHJ',\n    // redirect_uri: 'https://localhost:3000/home/unanswered/',\n    // code_verifier: 'challenge',\n    // };\n    // const formBodyPart = [];\n\n    // for (let property in details) {\n    //   let encodedKey = encodeURIComponent(property);\n    //   let encodedValue = encodeURIComponent(details[property]);\n    //   formBodyPart.push(encodedKey + \"=\" + encodedValue);\n\n    // const formBody = formBodyPart.join(\"&\");\n    // }\n\n    if (code && CLIENT_ID) {\n      const hello = qs.stringify({\n        code: code,\n        grant_type: 'authorization_code',\n        client_id: CLIENT_ID,\n        redirect_uri: 'http://localhost:3000/login/oauth2/code/twitter',\n        code_verifier: 'challenge'\n      });\n      console.log(hello);\n      axios({\n        method: 'post',\n        url: 'https://api.twitter.com/2/oauth2/token',\n        data: hello,\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\n          'Access-Control-Allow-Origin': 'https://api.twitter.com/2/oauth2/token',\n          'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': '*',\n          'Access-Control-Allow-Credentials': 'true'\n        }\n      }).then(res => {\n        alert(\"생성이 완료되었습니다.\");\n      });\n\n      //   async function Hello(){\n      // await authClient.requestAccessToken(code);\n\n      //   //Get the user ID\n      //   const {\n      //     data: { id },\n      //   } = await client.users.findMyUser();\n\n      //   //Makes api call\n      //   const getBookmark = await client.bookmarks.getUsersIdBookmarks(id, params);\n      //   console.dir(getBookmark, {\n      //     depth: null,\n      //   });\n      //   process.exit();\n      //   }\n\n      //   Hello();\n\n      // axios\n      // \t.post(\"https://api.twitter.com/2/oauth2/token\", null, {})\n      // \t.then((res) => {\n      // \t\talert(\"생성이 완료되었습니다.\");\n      // \t\tconsole.log(res.data);\n      // \t})\n      // \t.catch((err) => {\n      // \t\tconsole.log(err.config);\n      // \t\tconsole.log(err.response.data);\n      // \t});\n\n      // fetch(\"https://RINGCARD_FRONTEND.herokuapp.com/https://api.twitter.com/2/oauth2/token\", {\n      // fetch(\"https://api.twitter.com/2/oauth2/token\", {\n      //     method: \"POST\",\n      //     headers: {\n      //       \"Content-Type\": \"application/x-www-form-urlencoded\",\n      //     },\n\n      //   //   headers: {\n      //   // 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      //   //   },\n\n      //     body: hello,\n      //   }).then(res => {\n      //     if(res.ok) {\n      //       alert(\"생성이 완료되었습니다.\")\n      //     }\n      //   })\n\n      //   const getURLWithQueryParams = (\n      //   baseUrl: string,\n      //   params: Record<string, any>\n      // ) => {\n      //   const query = Object.entries(params)\n      //     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\n      //     .join(\"&\")\n\n      //   return `${baseUrl}?${query}`\n      // }\n      // const getTwitterOAuthUrl = (redirectUri: string) =>\n      // getURLWithQueryParams(TWITTER_AUTH_URL, {\n      //   response_type: \"code\",\n      //   client_id: CLIENT_ID,\n      //   redirect_uri: redirectUri,\n      //   scope: TWITTER_SCOPE,\n      //   state: TWITTER_STATE,\n      //   code_challenge: TWITTER_CODE_CHALLENGE,\n      //   code_challenge_method: \"plain\",\n      // })\n      //   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\n      //   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\n    }\n  }, []);\n\n  // const authHandler = (err:any, data:any) => {\n  //   console.log(err, data);\n  // };\n\n  // const [user, setUser] = useState<any>([]);\n\n  // useEffect(() => {\n  // \taxios\n  // \t\t.get(\"/oauth2\")\n  // \t\t.then((res) => {\n  // \t\t\tsetUser(res.data);\n  // \t\t\tconsole.log(res.data);\n  // \t\t})\n  // \t\t.catch((err) => {\n  // \t\t\tconsole.log(err.config);\n  // \t\t\tconsole.log(err.response.data);\n  // \t\t});\n  // }, []);\n\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\n\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\n\n  // Consuming a Stream\n  // if(BEARER_TOKEN){\n  //   const client = new Client(BEARER_TOKEN);\n\n  //   async function OauthTwitter() {\n  //     const stream = client.tweets.sampleStream({\n  //       \"tweet.fields\": [\"author_id\"],\n  //     });\n  //     for await (const tweet of stream) {\n  //       console.log(tweet.data?.author_id);\n  //     }\n\n  //     return(null);\n  //   }\n  //   return(<div><OauthTwitter/></div>)\n  // }\n\n  // Getting a Tweet\n  // if(BEARER_TOKEN){\n  //   const client = new Client(BEARER_TOKEN);\n\n  //   async function GettingATweet() {\n  //     const tweet = await client.tweets.findTweetById(\"20\");\n  //     // console.log(tweet.data.text);\n  //     console.log(tweet);\n  //   }\n\n  //     return(null);\n  // }\n\n  // oauth2-bearer.ts \n  // if(BEARER_TOKEN){\n  //   async function Oauth2Bearer() {\n  //     const client = new Client(BEARER_TOKEN);\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n  //     if (!data) throw new Error(\"Couldn't find user\");\n  //     let count = 0;\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\n  //       console.log(followers);\n  //       if (++count === 3) {\n  //         break;\n  //       }\n  //     }\n  //     return (<div></div>);\n  //   }\n  // }\n\n  // if(BEARER_TOKEN){\n  //     const client = new Client(BEARER_TOKEN);\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n  //     if (!data) throw new Error(\"Couldn't find user\");\n  //     let count = 0;\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\n  //       console.log(followers);\n  //       if (++count === 3) {\n  //         break;\n  //       }\n  //     }\n  //     return (<div></div>);\n  // }\n\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\n  // function TestOauth(){\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\n  //     authCallback={authHandler}\n  //     consumerKey={CONSUMER_KEY}\n  //     consumerSecret={CONSUMER_SECRET}\n  //   />)}\n  //   else{\n  //     return(<div></div>)\n  //   }\n  // }\n  // return (<p>1<GettingATweet/></p>)\n\n  // const authHandler = (err:any, data:any) => {\n  //   console.log(err, data);\n  // };\n\n  function BtnToTwitterLogin() {\n    function handleClick(e) {\n      const getURLWithQueryParams = (baseUrl, params) => {\n        const query = Object.entries(params).map(_ref => {\n          let [key, value] = _ref;\n          return `${key}=${encodeURIComponent(value)}`;\n        }).join(\"&\");\n        return `${baseUrl}?${query}`;\n      };\n      const getTwitterOAuthUrl = redirectUri => getURLWithQueryParams(TWITTER_AUTH_URL, {\n        response_type: \"code\",\n        client_id: CLIENT_ID,\n        redirect_uri: redirectUri,\n        scope: TWITTER_SCOPE,\n        state: TWITTER_STATE,\n        code_challenge: TWITTER_CODE_CHALLENGE,\n        code_challenge_method: \"plain\"\n      });\n      window.location.href = getTwitterOAuthUrl(\"http://localhost:3000/login/oauth2/code/twitter\");\n    }\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 4\n    }, this);\n  }\n  return (\n    /*#__PURE__*/\n    // <TestOauth/>\n    // <TwitterLogin\n    //       authCallback={authHandler}\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\n    //       buttonTheme={\"dark\"}\n    //     \t/>\n    _jsxDEV(BtnToTwitterLogin, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Oauth2Step3, \"Vr8ywHSj7XLtnLkrJxRpkjH85wI=\", false, function () {\n  return [useSearchParams];\n});\n_c = Oauth2Step3;\nexport default Oauth2Step3;\nvar _c;\n$RefreshReg$(_c, \"Oauth2Step3\");","map":{"version":3,"names":["axios","React","useEffect","useSearchParams","qs","Oauth2Step3","Client","auth","require","CONSUMER_KEY","process","env","REACT_APP_CONSUMER_KEY","CONSUMER_SECRET","REACT_APP_CONSUMER_SECRET","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","ACCESS_TOKEN","REACT_APP_ACCESS_TOKEN","ACCESS_TOKEN_SECRET","REACT_APP_ACCESS_TOKEN_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","BEARER_TOKEN","REACT_APP_BEARER_TOKEN","TWITTER_STATE","TWITTER_CODE_CHALLENGE","TWITTER_AUTH_URL","TWITTER_SCOPE","join","searchParams","state","get","code","authClient","OAuth2User","client_id","client_secret","callback","scopes","client","params","expansions","hello","stringify","grant_type","redirect_uri","code_verifier","console","log","method","url","data","headers","then","res","alert","BtnToTwitterLogin","handleClick","e","getURLWithQueryParams","baseUrl","query","Object","entries","map","key","value","encodeURIComponent","getTwitterOAuthUrl","redirectUri","response_type","scope","code_challenge","code_challenge_method","window","location","href"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/auth/Oauth2Step3.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\nimport { Client } from \"twitter-api-sdk\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\nimport { createHmac } from \"crypto\";\r\nimport { Navigate, useParams, useSearchParams } from \"react-router-dom\";\r\nimport qs from \"qs\";\r\n\r\nconst Oauth2Step3=()=>{\r\n\r\n    const { Client, auth } = require(\"twitter-api-sdk\");\r\n\r\n\r\n\r\n\r\n  const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;\r\n\tconst ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  \r\n  // const TWITTER_STATE = \"twitter-increaser-state\";\r\n  const TWITTER_STATE = \"state\";\r\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\r\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\r\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\r\n\r\n  const [searchParams] = useSearchParams();\r\n  const state = searchParams.get(\"state\");\r\n  const code = searchParams.get(\"code\");\r\n  \r\n  const authClient = new auth.OAuth2User({\r\n    client_id: CLIENT_ID,\r\n    client_secret: CLIENT_SECRET,\r\n    callback: \"http://localhost:3000/login/oauth2/code/twitter\",\r\n    scopes: [\"tweet.read\", \"users.read\", \"bookmark.read\"],\r\n  });\r\n\r\n  const client = new Client(authClient);\r\n\r\n  const params = {\r\n  expansions: \"author_id\",\r\n  \"user.fields\": [\"username\", \"created_at\"],\r\n  \"tweet.fields\": [\"geo\", \"entities\", \"context_annotations\"],\r\n};\r\n\r\n  useEffect(() => {\r\n// \tconsole.log(state);\r\n// \tconsole.log(code);\r\n// if(code){\r\n// const details = {\r\n//     code: code,\r\n    // grant_type: 'authorization_code',\r\n    // client_id: 'rG9n6402A3dbUJKzXTNX4oWHJ',\r\n    // redirect_uri: 'https://localhost:3000/home/unanswered/',\r\n    // code_verifier: 'challenge',\r\n// };\r\n// const formBodyPart = [];\r\n\r\n// for (let property in details) {\r\n//   let encodedKey = encodeURIComponent(property);\r\n//   let encodedValue = encodeURIComponent(details[property]);\r\n//   formBodyPart.push(encodedKey + \"=\" + encodedValue);\r\n\r\n// const formBody = formBodyPart.join(\"&\");\r\n// }\r\n\r\n\r\n\r\n\r\n\r\nif(code&&CLIENT_ID){\r\n  const hello = qs.stringify({\r\n        code: code,\r\n        grant_type: 'authorization_code',\r\n        client_id: CLIENT_ID,\r\n        redirect_uri: 'http://localhost:3000/login/oauth2/code/twitter',\r\n        code_verifier: 'challenge',\r\n      });\r\n  console.log(hello);\r\n  \r\n  axios({\r\n  method: 'post',\r\n  url: 'https://api.twitter.com/2/oauth2/token',\r\n\r\n  data: hello,\r\n  headers: {\r\n    'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\r\n    'Access-Control-Allow-Origin': 'https://api.twitter.com/2/oauth2/token',\r\n    'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, DELETE, OPTIONS',\r\n    'Access-Control-Allow-Headers': '*',\r\n    'Access-Control-Allow-Credentials': 'true',\r\n  }\r\n\r\n}).then((res) => {\r\n\t\t\t\talert(\"생성이 완료되었습니다.\");});\r\n  \r\n\r\n\r\n\r\n  //   async function Hello(){\r\n  // await authClient.requestAccessToken(code);\r\n\r\n  //   //Get the user ID\r\n  //   const {\r\n  //     data: { id },\r\n  //   } = await client.users.findMyUser();\r\n\r\n  //   //Makes api call\r\n  //   const getBookmark = await client.bookmarks.getUsersIdBookmarks(id, params);\r\n  //   console.dir(getBookmark, {\r\n  //     depth: null,\r\n  //   });\r\n  //   process.exit();\r\n  //   }\r\n\r\n\r\n  //   Hello();\r\n\r\n\r\n\r\n\r\n  \t// axios\r\n\t\t// \t.post(\"https://api.twitter.com/2/oauth2/token\", null, {})\r\n\t\t// \t.then((res) => {\r\n\t\t// \t\talert(\"생성이 완료되었습니다.\");\r\n\t\t// \t\tconsole.log(res.data);\r\n\t\t// \t})\r\n\t\t// \t.catch((err) => {\r\n\t\t// \t\tconsole.log(err.config);\r\n\t\t// \t\tconsole.log(err.response.data);\r\n\t\t// \t});\r\n\r\n\r\n\r\n\r\n  // fetch(\"https://RINGCARD_FRONTEND.herokuapp.com/https://api.twitter.com/2/oauth2/token\", {\r\n  // fetch(\"https://api.twitter.com/2/oauth2/token\", {\r\n  //     method: \"POST\",\r\n  //     headers: {\r\n  //       \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n  //     },\r\n\r\n  //   //   headers: {\r\n  //   // 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\r\n  //   //   },\r\n\r\n  //     body: hello,\r\n  //   }).then(res => {\r\n  //     if(res.ok) {\r\n  //       alert(\"생성이 완료되었습니다.\")\r\n  //     }\r\n  //   })\r\n\r\n\r\n\r\n  //   const getURLWithQueryParams = (\r\n  //   baseUrl: string,\r\n  //   params: Record<string, any>\r\n  // ) => {\r\n  //   const query = Object.entries(params)\r\n  //     .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n  //     .join(\"&\")\r\n\r\n  //   return `${baseUrl}?${query}`\r\n  // }\r\n  // const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  // getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n  //   response_type: \"code\",\r\n  //   client_id: CLIENT_ID,\r\n  //   redirect_uri: redirectUri,\r\n  //   scope: TWITTER_SCOPE,\r\n  //   state: TWITTER_STATE,\r\n  //   code_challenge: TWITTER_CODE_CHALLENGE,\r\n  //   code_challenge_method: \"plain\",\r\n  // })\r\n  //   console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\r\n  //   window.location.href=getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\r\n}\r\n\t}, []);\r\n  \r\n  \r\n  \r\n  \r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n  // const [user, setUser] = useState<any>([]);\r\n  \r\n  // useEffect(() => {\r\n\t// \taxios\r\n\t// \t\t.get(\"/oauth2\")\r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tsetUser(res.data);\r\n\t// \t\t\tconsole.log(res.data);\r\n\t// \t\t})\r\n\t// \t\t.catch((err) => {\r\n\t// \t\t\tconsole.log(err.config);\r\n\t// \t\t\tconsole.log(err.response.data);\r\n\t// \t\t});\r\n\t// }, []);\r\n\r\n\r\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\r\n\r\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  // Consuming a Stream\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function OauthTwitter() {\r\n  //     const stream = client.tweets.sampleStream({\r\n  //       \"tweet.fields\": [\"author_id\"],\r\n  //     });\r\n  //     for await (const tweet of stream) {\r\n  //       console.log(tweet.data?.author_id);\r\n  //     }\r\n      \r\n  //     return(null);\r\n  //   }\r\n  //   return(<div><OauthTwitter/></div>)\r\n  // }\r\n\r\n\r\n  // Getting a Tweet\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function GettingATweet() {\r\n  //     const tweet = await client.tweets.findTweetById(\"20\");\r\n  //     // console.log(tweet.data.text);\r\n  //     console.log(tweet);\r\n  //   }\r\n      \r\n  //     return(null);\r\n  // }\r\n\r\n\r\n  // oauth2-bearer.ts \r\n  // if(BEARER_TOKEN){\r\n  //   async function Oauth2Bearer() {\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  //   }\r\n  // }\r\n\r\n  // if(BEARER_TOKEN){\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  // }\r\n\r\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  // function TestOauth(){\r\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\r\n  //     authCallback={authHandler}\r\n  //     consumerKey={CONSUMER_KEY}\r\n  //     consumerSecret={CONSUMER_SECRET}\r\n  //   />)}\r\n  //   else{\r\n  //     return(<div></div>)\r\n  //   }\r\n  // }\r\n  // return (<p>1<GettingATweet/></p>)\r\n\r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n\r\n  function BtnToTwitterLogin(){\r\n\t\tfunction handleClick(e: any){\r\n\t\t\tconst getURLWithQueryParams = (\r\n    baseUrl: string,\r\n    params: Record<string, any>\r\n  ) => {\r\n    const query = Object.entries(params)\r\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n      .join(\"&\")\r\n\r\n    return `${baseUrl}?${query}`\r\n  }\r\n  const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n    response_type: \"code\",\r\n    client_id: CLIENT_ID,\r\n    redirect_uri: redirectUri,\r\n    scope: TWITTER_SCOPE,\r\n    state: TWITTER_STATE,\r\n    code_challenge: TWITTER_CODE_CHALLENGE,\r\n    code_challenge_method: \"plain\",\r\n  })\r\n  window.location.href=getTwitterOAuthUrl(\"http://localhost:3000/login/oauth2/code/twitter\");\r\n    \r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<button onClick={handleClick}>\r\n\t\t\t</button>\r\n\t\t);\r\n\t}\r\n\r\n\r\n  return (\r\n    // <TestOauth/>\r\n    // <TwitterLogin\r\n    //       authCallback={authHandler}\r\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\r\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\r\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\r\n    //       buttonTheme={\"dark\"}\r\n    //     \t/>\r\n    <BtnToTwitterLogin/>\r\n  );\r\n}\r\n\r\nexport default Oauth2Step3;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}