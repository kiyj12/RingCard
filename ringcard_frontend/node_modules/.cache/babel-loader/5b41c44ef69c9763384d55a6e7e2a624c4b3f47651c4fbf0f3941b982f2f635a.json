{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\nconst helpers_1 = require(\"./helpers\");\nconst globals_1 = require(\"./globals\");\n/**\n * Base class for Twitter instances\n */\nclass TwitterApiBase {\n  constructor(token) {\n    let settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this._currentUser = null;\n    this._currentUserV2 = null;\n    if (token instanceof TwitterApiBase) {\n      this._requestMaker = token._requestMaker;\n    } else {\n      this._requestMaker = new request_maker_mixin_1.ClientRequestMaker(settings);\n      this._requestMaker.initializeToken(token);\n    }\n  }\n  /* Prefix/Token handling */\n  setPrefix(prefix) {\n    this._prefix = prefix;\n  }\n  cloneWithPrefix(prefix) {\n    const clone = this.constructor(this);\n    clone.setPrefix(prefix);\n    return clone;\n  }\n  getActiveTokens() {\n    return this._requestMaker.getActiveTokens();\n  }\n  /* Rate limit cache / Plugins */\n  getPlugins() {\n    return this._requestMaker.getPlugins();\n  }\n  getPluginOfType(type) {\n    return this.getPlugins().find(plugin => plugin instanceof type);\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Tells if you hit the Twitter rate limit for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n  hasHitRateLimit(endpoint) {\n    var _a;\n    if (this.isRateLimitStatusObsolete(endpoint)) {\n      return false;\n    }\n    return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n   * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n   */\n  isRateLimitStatusObsolete(endpoint) {\n    const rateLimit = this.getLastRateLimitStatus(endpoint);\n    if (rateLimit === undefined) {\n      return true;\n    }\n    // Timestamps are exprimed in seconds, JS works with ms\n    return rateLimit.reset * 1000 < Date.now();\n  }\n  /**\n   * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n   *\n   * Get the last obtained Twitter rate limit information for {endpoint}.\n   * (local data only, this should not ask anything to Twitter)\n   */\n  getLastRateLimitStatus(endpoint) {\n    const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : this._prefix + endpoint;\n    return this._requestMaker.getRateLimits()[endpointWithPrefix];\n  }\n  /* Current user cache */\n  /** Get cached current user. */\n  getCurrentUserObject() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!forceFetch && this._currentUser) {\n      if (this._currentUser.value) {\n        return Promise.resolve(this._currentUser.value);\n      }\n      return this._currentUser.promise;\n    }\n    this._currentUser = (0, helpers_1.sharedPromise)(() => this.get('account/verify_credentials.json', {\n      tweet_mode: 'extended'\n    }, {\n      prefix: globals_1.API_V1_1_PREFIX\n    }));\n    return this._currentUser.promise;\n  }\n  /**\n   * Get cached current user from v2 API.\n   * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n   *\n   * To get a customized `UserV2Result`, use `.v2.me()`\n   *\n   * OAuth2 scopes: `tweet.read` & `users.read`\n   */\n  getCurrentUserV2Object() {\n    let forceFetch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!forceFetch && this._currentUserV2) {\n      if (this._currentUserV2.value) {\n        return Promise.resolve(this._currentUserV2.value);\n      }\n      return this._currentUserV2.promise;\n    }\n    this._currentUserV2 = (0, helpers_1.sharedPromise)(() => this.get('users/me', undefined, {\n      prefix: globals_1.API_V2_PREFIX\n    }));\n    return this._currentUserV2.promise;\n  }\n  async get(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n  async delete(url) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'DELETE',\n      query,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n  async post(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n  async put(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'PUT',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n  async patch(url, body) {\n    let {\n      fullResponse,\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (prefix) url = prefix + url;\n    const resp = await this._requestMaker.send({\n      url,\n      method: 'PATCH',\n      body,\n      ...rest\n    });\n    return fullResponse ? resp : resp.data;\n  }\n  getStream(url, query) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this._requestMaker.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'GET',\n      query,\n      ...rest\n    });\n  }\n  postStream(url, body) {\n    let {\n      prefix = this._prefix,\n      ...rest\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return this._requestMaker.sendStream({\n      url: prefix ? prefix + url : url,\n      method: 'POST',\n      body,\n      ...rest\n    });\n  }\n}\nexports.default = TwitterApiBase;","map":{"version":3,"names":["Object","defineProperty","exports","value","request_maker_mixin_1","require","helpers_1","globals_1","TwitterApiBase","constructor","token","settings","_currentUser","_currentUserV2","_requestMaker","ClientRequestMaker","initializeToken","setPrefix","prefix","_prefix","cloneWithPrefix","clone","getActiveTokens","getPlugins","getPluginOfType","type","find","plugin","hasHitRateLimit","endpoint","_a","isRateLimitStatusObsolete","getLastRateLimitStatus","remaining","rateLimit","undefined","reset","Date","now","endpointWithPrefix","match","getRateLimits","getCurrentUserObject","forceFetch","Promise","resolve","promise","sharedPromise","get","tweet_mode","API_V1_1_PREFIX","getCurrentUserV2Object","API_V2_PREFIX","url","query","fullResponse","rest","resp","send","method","data","delete","post","body","put","patch","getStream","sendStream","postStream","default"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/client.base.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_maker_mixin_1 = require(\"./client-mixins/request-maker.mixin\");\nconst helpers_1 = require(\"./helpers\");\nconst globals_1 = require(\"./globals\");\n/**\n * Base class for Twitter instances\n */\nclass TwitterApiBase {\n    constructor(token, settings = {}) {\n        this._currentUser = null;\n        this._currentUserV2 = null;\n        if (token instanceof TwitterApiBase) {\n            this._requestMaker = token._requestMaker;\n        }\n        else {\n            this._requestMaker = new request_maker_mixin_1.ClientRequestMaker(settings);\n            this._requestMaker.initializeToken(token);\n        }\n    }\n    /* Prefix/Token handling */\n    setPrefix(prefix) {\n        this._prefix = prefix;\n    }\n    cloneWithPrefix(prefix) {\n        const clone = this.constructor(this);\n        clone.setPrefix(prefix);\n        return clone;\n    }\n    getActiveTokens() {\n        return this._requestMaker.getActiveTokens();\n    }\n    /* Rate limit cache / Plugins */\n    getPlugins() {\n        return this._requestMaker.getPlugins();\n    }\n    getPluginOfType(type) {\n        return this.getPlugins().find(plugin => plugin instanceof type);\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the Twitter rate limit for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    hasHitRateLimit(endpoint) {\n        var _a;\n        if (this.isRateLimitStatusObsolete(endpoint)) {\n            return false;\n        }\n        return ((_a = this.getLastRateLimitStatus(endpoint)) === null || _a === void 0 ? void 0 : _a.remaining) === 0;\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Tells if you hit the returned Twitter rate limit for {endpoint} has expired.\n     * If client has no saved rate limit data for {endpoint}, this will gives you `true`.\n     */\n    isRateLimitStatusObsolete(endpoint) {\n        const rateLimit = this.getLastRateLimitStatus(endpoint);\n        if (rateLimit === undefined) {\n            return true;\n        }\n        // Timestamps are exprimed in seconds, JS works with ms\n        return (rateLimit.reset * 1000) < Date.now();\n    }\n    /**\n     * @deprecated - Migrate to plugin `@twitter-api-v2/plugin-rate-limit`\n     *\n     * Get the last obtained Twitter rate limit information for {endpoint}.\n     * (local data only, this should not ask anything to Twitter)\n     */\n    getLastRateLimitStatus(endpoint) {\n        const endpointWithPrefix = endpoint.match(/^https?:\\/\\//) ? endpoint : (this._prefix + endpoint);\n        return this._requestMaker.getRateLimits()[endpointWithPrefix];\n    }\n    /* Current user cache */\n    /** Get cached current user. */\n    getCurrentUserObject(forceFetch = false) {\n        if (!forceFetch && this._currentUser) {\n            if (this._currentUser.value) {\n                return Promise.resolve(this._currentUser.value);\n            }\n            return this._currentUser.promise;\n        }\n        this._currentUser = (0, helpers_1.sharedPromise)(() => this.get('account/verify_credentials.json', { tweet_mode: 'extended' }, { prefix: globals_1.API_V1_1_PREFIX }));\n        return this._currentUser.promise;\n    }\n    /**\n     * Get cached current user from v2 API.\n     * This can only be the slimest available `UserV2` object, with only `id`, `name` and `username` properties defined.\n     *\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    getCurrentUserV2Object(forceFetch = false) {\n        if (!forceFetch && this._currentUserV2) {\n            if (this._currentUserV2.value) {\n                return Promise.resolve(this._currentUserV2.value);\n            }\n            return this._currentUserV2.promise;\n        }\n        this._currentUserV2 = (0, helpers_1.sharedPromise)(() => this.get('users/me', undefined, { prefix: globals_1.API_V2_PREFIX }));\n        return this._currentUserV2.promise;\n    }\n    async get(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async delete(url, query = {}, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'DELETE',\n            query,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async post(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async put(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'PUT',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    async patch(url, body, { fullResponse, prefix = this._prefix, ...rest } = {}) {\n        if (prefix)\n            url = prefix + url;\n        const resp = await this._requestMaker.send({\n            url,\n            method: 'PATCH',\n            body,\n            ...rest,\n        });\n        return fullResponse ? resp : resp.data;\n    }\n    getStream(url, query, { prefix = this._prefix, ...rest } = {}) {\n        return this._requestMaker.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'GET',\n            query,\n            ...rest,\n        });\n    }\n    postStream(url, body, { prefix = this._prefix, ...rest } = {}) {\n        return this._requestMaker.sendStream({\n            url: prefix ? prefix + url : url,\n            method: 'POST',\n            body,\n            ...rest,\n        });\n    }\n}\nexports.default = TwitterApiBase;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}