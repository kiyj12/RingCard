{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _createForOfIteratorHelper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar _asyncToGenerator = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _objectSpread = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _classCallCheck = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar globals_1 = require(\"../globals\");\nvar client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nvar client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nvar TwitterApiv2ReadWrite = /*#__PURE__*/function (_client_v2_read_1$def) {\n  _inherits(TwitterApiv2ReadWrite, _client_v2_read_1$def);\n  var _super = _createSuper(TwitterApiv2ReadWrite);\n  function TwitterApiv2ReadWrite() {\n    var _this;\n    _classCallCheck(this, TwitterApiv2ReadWrite);\n    _this = _super.apply(this, arguments);\n    _this._prefix = globals_1.API_V2_PREFIX;\n    return _this;\n  }\n  /* Sub-clients */\n  /**\n   * Get a client with only read rights.\n   */\n  _createClass(TwitterApiv2ReadWrite, [{\n    key: \"readOnly\",\n    get: function get() {\n      return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n  }, {\n    key: \"labs\",\n    get: function get() {\n      if (this._labs) return this._labs;\n      return this._labs = new client_v2_labs_write_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n  }, {\n    key: \"hideReply\",\n    value: function hideReply(tweetId, makeHidden) {\n      return this.put('tweets/:id/hidden', {\n        hidden: makeHidden\n      }, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"like\",\n    value: function like(loggedUserId, targetTweetId) {\n      return this.post('users/:id/likes', {\n        tweet_id: targetTweetId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"unlike\",\n    value: function unlike(loggedUserId, targetTweetId) {\n      return this.delete('users/:id/likes/:tweet_id', undefined, {\n        params: {\n          id: loggedUserId,\n          tweet_id: targetTweetId\n        }\n      });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"retweet\",\n    value: function retweet(loggedUserId, targetTweetId) {\n      return this.post('users/:id/retweets', {\n        tweet_id: targetTweetId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"unretweet\",\n    value: function unretweet(loggedUserId, targetTweetId) {\n      return this.delete('users/:id/retweets/:tweet_id', undefined, {\n        params: {\n          id: loggedUserId,\n          tweet_id: targetTweetId\n        }\n      });\n    }\n  }, {\n    key: \"tweet\",\n    value: function tweet(status) {\n      var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (typeof status === 'object') {\n        payload = status;\n      } else {\n        payload = _objectSpread({\n          text: status\n        }, payload);\n      }\n      return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n  }, {\n    key: \"reply\",\n    value: function reply(status, toTweetId) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _a;\n      var reply = _objectSpread({\n        in_reply_to_tweet_id: toTweetId\n      }, (_a = payload.reply) !== null && _a !== void 0 ? _a : {});\n      return this.post('tweets', _objectSpread(_objectSpread({\n        text: status\n      }, payload), {}, {\n        reply: reply\n      }));\n    }\n    /**\n     * Quote an existing Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n  }, {\n    key: \"quote\",\n    value: function quote(status, quotedTweetId) {\n      var payload = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.tweet(status, _objectSpread(_objectSpread({}, payload), {}, {\n        quote_tweet_id: quotedTweetId\n      }));\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n  }, {\n    key: \"tweetThread\",\n    value: function () {\n      var _tweetThread = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(tweets) {\n        var _a, _b, postedTweets, _iterator, _step, tweet, lastTweet, queryParams, inReplyToId, status;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                postedTweets = [];\n                _iterator = _createForOfIteratorHelper(tweets);\n                _context.prev = 2;\n                _iterator.s();\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 25;\n                  break;\n                }\n                tweet = _step.value;\n                // Retrieve the last sent tweet\n                lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null; // Build the tweet query params\n                queryParams = _objectSpread({}, typeof tweet === 'string' ? {\n                  text: tweet\n                } : tweet); // Reply to an existing tweet if needed\n                inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n                status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n                if (!inReplyToId) {\n                  _context.next = 18;\n                  break;\n                }\n                _context.t0 = postedTweets;\n                _context.next = 14;\n                return this.reply(status, inReplyToId, queryParams);\n              case 14:\n                _context.t1 = _context.sent;\n                _context.t0.push.call(_context.t0, _context.t1);\n                _context.next = 23;\n                break;\n              case 18:\n                _context.t2 = postedTweets;\n                _context.next = 21;\n                return this.tweet(status, queryParams);\n              case 21:\n                _context.t3 = _context.sent;\n                _context.t2.push.call(_context.t2, _context.t3);\n              case 23:\n                _context.next = 4;\n                break;\n              case 25:\n                _context.next = 30;\n                break;\n              case 27:\n                _context.prev = 27;\n                _context.t4 = _context[\"catch\"](2);\n                _iterator.e(_context.t4);\n              case 30:\n                _context.prev = 30;\n                _iterator.f();\n                return _context.finish(30);\n              case 33:\n                return _context.abrupt(\"return\", postedTweets);\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 27, 30, 33]]);\n      }));\n      function tweetThread(_x) {\n        return _tweetThread.apply(this, arguments);\n      }\n      return tweetThread;\n    }()\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n  }, {\n    key: \"deleteTweet\",\n    value: function deleteTweet(tweetId) {\n      return this.delete('tweets/:id', undefined, {\n        params: {\n          id: tweetId\n        }\n      });\n    }\n    /* Bookmarks */\n    /**\n     * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n  }, {\n    key: \"bookmark\",\n    value: function () {\n      var _bookmark = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(tweetId) {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.getCurrentUserV2Object();\n              case 2:\n                user = _context2.sent;\n                return _context2.abrupt(\"return\", this.post('users/:id/bookmarks', {\n                  tweet_id: tweetId\n                }, {\n                  params: {\n                    id: user.data.id\n                  }\n                }));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function bookmark(_x2) {\n        return _bookmark.apply(this, arguments);\n      }\n      return bookmark;\n    }()\n    /**\n     * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n  }, {\n    key: \"deleteBookmark\",\n    value: function () {\n      var _deleteBookmark = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(tweetId) {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.getCurrentUserV2Object();\n              case 2:\n                user = _context3.sent;\n                return _context3.abrupt(\"return\", this.delete('users/:id/bookmarks/:tweet_id', undefined, {\n                  params: {\n                    id: user.data.id,\n                    tweet_id: tweetId\n                  }\n                }));\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function deleteBookmark(_x3) {\n        return _deleteBookmark.apply(this, arguments);\n      }\n      return deleteBookmark;\n    }()\n    /* Users */\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"follow\",\n    value: function follow(loggedUserId, targetUserId) {\n      return this.post('users/:id/following', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"unfollow\",\n    value: function unfollow(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"block\",\n    value: function block(loggedUserId, targetUserId) {\n      return this.post('users/:id/blocking', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"unblock\",\n    value: function unblock(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"mute\",\n    value: function mute(loggedUserId, targetUserId) {\n      return this.post('users/:id/muting', {\n        target_user_id: targetUserId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n  }, {\n    key: \"unmute\",\n    value: function unmute(loggedUserId, targetUserId) {\n      return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n        params: {\n          source_user_id: loggedUserId,\n          target_user_id: targetUserId\n        }\n      });\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n  }, {\n    key: \"createList\",\n    value: function createList(options) {\n      return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n  }, {\n    key: \"updateList\",\n    value: function updateList(listId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.put('lists/:id', options, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n  }, {\n    key: \"removeList\",\n    value: function removeList(listId) {\n      return this.delete('lists/:id', undefined, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n  }, {\n    key: \"addListMember\",\n    value: function addListMember(listId, userId) {\n      return this.post('lists/:id/members', {\n        user_id: userId\n      }, {\n        params: {\n          id: listId\n        }\n      });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n  }, {\n    key: \"removeListMember\",\n    value: function removeListMember(listId, userId) {\n      return this.delete('lists/:id/members/:user_id', undefined, {\n        params: {\n          id: listId,\n          user_id: userId\n        }\n      });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n  }, {\n    key: \"subscribeToList\",\n    value: function subscribeToList(loggedUserId, listId) {\n      return this.post('users/:id/followed_lists', {\n        list_id: listId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n  }, {\n    key: \"unsubscribeOfList\",\n    value: function unsubscribeOfList(loggedUserId, listId) {\n      return this.delete('users/:id/followed_lists/:list_id', undefined, {\n        params: {\n          id: loggedUserId,\n          list_id: listId\n        }\n      });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n  }, {\n    key: \"pinList\",\n    value: function pinList(loggedUserId, listId) {\n      return this.post('users/:id/pinned_lists', {\n        list_id: listId\n      }, {\n        params: {\n          id: loggedUserId\n        }\n      });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n  }, {\n    key: \"unpinList\",\n    value: function unpinList(loggedUserId, listId) {\n      return this.delete('users/:id/pinned_lists/:list_id', undefined, {\n        params: {\n          id: loggedUserId,\n          list_id: listId\n        }\n      });\n    }\n  }]);\n  return TwitterApiv2ReadWrite;\n}(client_v2_read_1.default);\nexports.default = TwitterApiv2ReadWrite;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","globals_1","require","client_v2_read_1","client_v2_labs_write_1","TwitterApiv2ReadWrite","arguments","_prefix","API_V2_PREFIX","_labs","default","tweetId","makeHidden","put","hidden","params","id","loggedUserId","targetTweetId","post","tweet_id","delete","undefined","status","payload","text","toTweetId","_a","reply","in_reply_to_tweet_id","quotedTweetId","tweet","quote_tweet_id","tweets","postedTweets","lastTweet","length","queryParams","inReplyToId","data","_b","push","getCurrentUserV2Object","user","targetUserId","target_user_id","source_user_id","options","listId","userId","user_id","list_id"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/v2/client.v2.write.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst globals_1 = require(\"../globals\");\nconst client_v2_read_1 = __importDefault(require(\"./client.v2.read\"));\nconst client_v2_labs_write_1 = __importDefault(require(\"../v2-labs/client.v2.labs.write\"));\n/**\n * Base Twitter v2 client with read/write rights.\n */\nclass TwitterApiv2ReadWrite extends client_v2_read_1.default {\n    constructor() {\n        super(...arguments);\n        this._prefix = globals_1.API_V2_PREFIX;\n    }\n    /* Sub-clients */\n    /**\n     * Get a client with only read rights.\n     */\n    get readOnly() {\n        return this;\n    }\n    /**\n     * Get a client for v2 labs endpoints.\n     */\n    get labs() {\n        if (this._labs)\n            return this._labs;\n        return this._labs = new client_v2_labs_write_1.default(this);\n    }\n    /* Tweets */\n    /**\n     * Hides or unhides a reply to a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/hide-replies/api-reference/put-tweets-id-hidden\n     */\n    hideReply(tweetId, makeHidden) {\n        return this.put('tweets/:id/hidden', { hidden: makeHidden }, { params: { id: tweetId } });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Like the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/post-users-user_id-likes\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    like(loggedUserId, targetTweetId) {\n        return this.post('users/:id/likes', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unlike a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/likes/api-reference/delete-users-id-likes-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unlike(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/likes/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    /**\n     * Causes the user ID identified in the path parameter to Retweet the target Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/post-users-id-retweets\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    retweet(loggedUserId, targetTweetId) {\n        return this.post('users/:id/retweets', { tweet_id: targetTweetId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove the Retweet of a Tweet.\n     * The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/retweets/api-reference/delete-users-id-retweets-tweet_id\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unretweet(loggedUserId, targetTweetId) {\n        return this.delete('users/:id/retweets/:tweet_id', undefined, {\n            params: { id: loggedUserId, tweet_id: targetTweetId },\n        });\n    }\n    tweet(status, payload = {}) {\n        if (typeof status === 'object') {\n            payload = status;\n        }\n        else {\n            payload = { text: status, ...payload };\n        }\n        return this.post('tweets', payload);\n    }\n    /**\n     * Reply to a Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    reply(status, toTweetId, payload = {}) {\n        var _a;\n        const reply = { in_reply_to_tweet_id: toTweetId, ...(_a = payload.reply) !== null && _a !== void 0 ? _a : {} };\n        return this.post('tweets', { text: status, ...payload, reply });\n    }\n    /**\n     * Quote an existing Tweet on behalf of an authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    quote(status, quotedTweetId, payload = {}) {\n        return this.tweet(status, { ...payload, quote_tweet_id: quotedTweetId });\n    }\n    /**\n     * Post a series of tweets.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/post-tweets\n     */\n    async tweetThread(tweets) {\n        var _a, _b;\n        const postedTweets = [];\n        for (const tweet of tweets) {\n            // Retrieve the last sent tweet\n            const lastTweet = postedTweets.length ? postedTweets[postedTweets.length - 1] : null;\n            // Build the tweet query params\n            const queryParams = { ...(typeof tweet === 'string' ? ({ text: tweet }) : tweet) };\n            // Reply to an existing tweet if needed\n            const inReplyToId = lastTweet ? lastTweet.data.id : (_a = queryParams.reply) === null || _a === void 0 ? void 0 : _a.in_reply_to_tweet_id;\n            const status = (_b = queryParams.text) !== null && _b !== void 0 ? _b : '';\n            if (inReplyToId) {\n                postedTweets.push(await this.reply(status, inReplyToId, queryParams));\n            }\n            else {\n                postedTweets.push(await this.tweet(status, queryParams));\n            }\n        }\n        return postedTweets;\n    }\n    /**\n     * Allows a user or authenticated user ID to delete a Tweet\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/manage-tweets/api-reference/delete-tweets-id\n     */\n    deleteTweet(tweetId) {\n        return this.delete('tweets/:id', undefined, {\n            params: {\n                id: tweetId,\n            },\n        });\n    }\n    /* Bookmarks */\n    /**\n     * Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/post-users-id-bookmarks\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async bookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.post('users/:id/bookmarks', { tweet_id: tweetId }, { params: { id: user.data.id } });\n    }\n    /**\n     * Allows a user or authenticated user ID to remove a Bookmark of a Tweet.\n     * https://developer.twitter.com/en/docs/twitter-api/tweets/bookmarks/api-reference/delete-users-id-bookmarks-tweet_id\n     *\n     * OAuth2 scopes: `users.read` `tweet.read` `bookmark.write`\n     */\n    async deleteBookmark(tweetId) {\n        const user = await this.getCurrentUserV2Object();\n        return this.delete('users/:id/bookmarks/:tweet_id', undefined, { params: { id: user.data.id, tweet_id: tweetId } });\n    }\n    /* Users */\n    /**\n     * Allows a user ID to follow another user.\n     * If the target user does not have public Tweets, this endpoint will send a follow request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/post-users-source_user_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    follow(loggedUserId, targetUserId) {\n        return this.post('users/:id/following', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user ID to unfollow another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/follows/api-reference/delete-users-source_id-following\n     *\n     * OAuth2 scope: `follows.write`\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unfollow(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/following/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Causes the user (in the path) to block the target user.\n     * The user (in the path) must match the user context authorizing the request.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/post-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    block(loggedUserId, targetUserId) {\n        return this.post('users/:id/blocking', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows a user or authenticated user ID to unblock another user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/blocks/api-reference/delete-users-user_id-blocking\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unblock(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/blocking/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /**\n     * Allows an authenticated user ID to mute the target user.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/post-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    mute(loggedUserId, targetUserId) {\n        return this.post('users/:id/muting', { target_user_id: targetUserId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Allows an authenticated user ID to unmute the target user.\n     * The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.\n     * https://developer.twitter.com/en/docs/twitter-api/users/mutes/api-reference/delete-users-user_id-muting\n     *\n     * **Note**: You must specify the currently logged user ID ; you can obtain it through v1.1 API.\n     */\n    unmute(loggedUserId, targetUserId) {\n        return this.delete('users/:source_user_id/muting/:target_user_id', undefined, {\n            params: { source_user_id: loggedUserId, target_user_id: targetUserId },\n        });\n    }\n    /* Lists */\n    /**\n     * Creates a new list for the authenticated user.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists\n     */\n    createList(options) {\n        return this.post('lists', options);\n    }\n    /**\n     * Updates the specified list. The authenticated user must own the list to be able to update it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/put-lists-id\n     */\n    updateList(listId, options = {}) {\n        return this.put('lists/:id', options, { params: { id: listId } });\n    }\n    /**\n     * Deletes the specified list. The authenticated user must own the list to be able to destroy it.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id\n     */\n    removeList(listId) {\n        return this.delete('lists/:id', undefined, { params: { id: listId } });\n    }\n    /**\n     * Adds a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-lists-id-members\n     */\n    addListMember(listId, userId) {\n        return this.post('lists/:id/members', { user_id: userId }, { params: { id: listId } });\n    }\n    /**\n     * Remember a member to a list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-lists-id-members-user_id\n     */\n    removeListMember(listId, userId) {\n        return this.delete('lists/:id/members/:user_id', undefined, { params: { id: listId, user_id: userId } });\n    }\n    /**\n     * Subscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-followed-lists\n     */\n    subscribeToList(loggedUserId, listId) {\n        return this.post('users/:id/followed_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Unsubscribes the authenticated user to the specified list.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-followed-lists-list_id\n     */\n    unsubscribeOfList(loggedUserId, listId) {\n        return this.delete('users/:id/followed_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n    /**\n     * Enables the authenticated user to pin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/post-users-id-pinned-lists\n     */\n    pinList(loggedUserId, listId) {\n        return this.post('users/:id/pinned_lists', { list_id: listId }, { params: { id: loggedUserId } });\n    }\n    /**\n     * Enables the authenticated user to unpin a List.\n     * https://developer.twitter.com/en/docs/twitter-api/lists/manage-lists/api-reference/delete-users-id-pinned-lists-list_id\n     */\n    unpinList(loggedUserId, listId) {\n        return this.delete('users/:id/pinned_lists/:list_id', undefined, { params: { id: loggedUserId, list_id: listId } });\n    }\n}\nexports.default = TwitterApiv2ReadWrite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}