{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _assertThisInitialized = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\nvar _inherits = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TweetStreamEventCombiner = void 0;\nvar events_1 = require(\"events\");\nvar types_1 = require(\"../types\");\nvar TweetStreamEventCombiner = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(TweetStreamEventCombiner, _events_1$EventEmitte);\n  var _super = _createSuper(TweetStreamEventCombiner);\n  function TweetStreamEventCombiner(stream) {\n    var _this;\n    _classCallCheck(this, TweetStreamEventCombiner);\n    _this = _super.call(this);\n    _this.stream = stream;\n    _this.stack = [];\n    _this.onStreamData = _this.onStreamData.bind(_assertThisInitialized(_this));\n    _this.onStreamError = _this.onStreamError.bind(_assertThisInitialized(_this));\n    _this.onceNewEvent = _this.once.bind(_assertThisInitialized(_this), 'event');\n    // Init events from stream\n    stream.on(types_1.ETwitterStreamEvent.Data, _this.onStreamData);\n    // Ignore reconnect errors: Don't close event combiner until connection error/closed\n    stream.on(types_1.ETwitterStreamEvent.ConnectionError, _this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.TweetParseError, _this.onStreamError);\n    stream.on(types_1.ETwitterStreamEvent.ConnectionClosed, _this.onStreamError);\n    return _this;\n  }\n  /** Returns a new `Promise` that will `resolve` on next event (`data` or any sort of error). */\n  _createClass(TweetStreamEventCombiner, [{\n    key: \"nextEvent\",\n    value: function nextEvent() {\n      return new Promise(this.onceNewEvent);\n    }\n    /** Returns `true` if there's something in the stack. */\n  }, {\n    key: \"hasStack\",\n    value: function hasStack() {\n      return this.stack.length > 0;\n    }\n    /** Returns stacked data events, and clean the stack. */\n  }, {\n    key: \"popStack\",\n    value: function popStack() {\n      var stack = this.stack;\n      this.stack = [];\n      return stack;\n    }\n    /** Cleanup all the listeners attached on stream. */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.removeAllListeners();\n      this.stream.off(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n      this.stream.off(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n      this.stream.off(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n      this.stream.off(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(type, payload) {\n      this.emit('event', {\n        type: type,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"onStreamError\",\n    value: function onStreamError(payload) {\n      this.emitEvent('error', payload);\n    }\n  }, {\n    key: \"onStreamData\",\n    value: function onStreamData(payload) {\n      this.stack.push(payload);\n      this.emitEvent('data', payload);\n    }\n  }]);\n  return TweetStreamEventCombiner;\n}(events_1.EventEmitter);\nexports.TweetStreamEventCombiner = TweetStreamEventCombiner;\nexports.default = TweetStreamEventCombiner;","map":{"version":3,"names":["Object","defineProperty","exports","value","TweetStreamEventCombiner","events_1","require","types_1","stream","stack","onStreamData","bind","onStreamError","onceNewEvent","once","on","ETwitterStreamEvent","Data","ConnectionError","TweetParseError","ConnectionClosed","Promise","length","removeAllListeners","off","type","payload","emit","emitEvent","push","EventEmitter","default"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/stream/TweetStreamEventCombiner.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TweetStreamEventCombiner = void 0;\nconst events_1 = require(\"events\");\nconst types_1 = require(\"../types\");\nclass TweetStreamEventCombiner extends events_1.EventEmitter {\n    constructor(stream) {\n        super();\n        this.stream = stream;\n        this.stack = [];\n        this.onStreamData = this.onStreamData.bind(this);\n        this.onStreamError = this.onStreamError.bind(this);\n        this.onceNewEvent = this.once.bind(this, 'event');\n        // Init events from stream\n        stream.on(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n        // Ignore reconnect errors: Don't close event combiner until connection error/closed\n        stream.on(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n        stream.on(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n        stream.on(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n    /** Returns a new `Promise` that will `resolve` on next event (`data` or any sort of error). */\n    nextEvent() {\n        return new Promise(this.onceNewEvent);\n    }\n    /** Returns `true` if there's something in the stack. */\n    hasStack() {\n        return this.stack.length > 0;\n    }\n    /** Returns stacked data events, and clean the stack. */\n    popStack() {\n        const stack = this.stack;\n        this.stack = [];\n        return stack;\n    }\n    /** Cleanup all the listeners attached on stream. */\n    destroy() {\n        this.removeAllListeners();\n        this.stream.off(types_1.ETwitterStreamEvent.Data, this.onStreamData);\n        this.stream.off(types_1.ETwitterStreamEvent.ConnectionError, this.onStreamError);\n        this.stream.off(types_1.ETwitterStreamEvent.TweetParseError, this.onStreamError);\n        this.stream.off(types_1.ETwitterStreamEvent.ConnectionClosed, this.onStreamError);\n    }\n    emitEvent(type, payload) {\n        this.emit('event', { type, payload });\n    }\n    onStreamError(payload) {\n        this.emitEvent('error', payload);\n    }\n    onStreamData(payload) {\n        this.stack.push(payload);\n        this.emitEvent('data', payload);\n    }\n}\nexports.TweetStreamEventCombiner = TweetStreamEventCombiner;\nexports.default = TweetStreamEventCombiner;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}