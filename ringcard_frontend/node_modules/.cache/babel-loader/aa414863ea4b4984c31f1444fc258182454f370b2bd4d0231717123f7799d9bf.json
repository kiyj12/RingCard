{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/objectSpread2.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar _classCallCheck = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _1 = __importDefault(require(\".\"));\nvar client_base_1 = __importDefault(require(\"../client.base\"));\nvar client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nvar client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nvar oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\nvar request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\nvar TwitterApiReadOnly = /*#__PURE__*/function (_client_base_1$defaul) {\n  _inherits(TwitterApiReadOnly, _client_base_1$defaul);\n  var _super = _createSuper(TwitterApiReadOnly);\n  function TwitterApiReadOnly() {\n    _classCallCheck(this, TwitterApiReadOnly);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TwitterApiReadOnly, [{\n    key: \"v1\",\n    get: /* Direct access to subclients */\n    function get() {\n      if (this._v1) return this._v1;\n      return this._v1 = new client_v1_read_1.default(this);\n    }\n  }, {\n    key: \"v2\",\n    get: function get() {\n      if (this._v2) return this._v2;\n      return this._v2 = new client_v2_read_1.default(this);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentication.\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n  }, {\n    key: \"currentUser\",\n    value: function () {\n      var _currentUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var forceFetch,\n          _args = arguments;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                forceFetch = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;\n                _context.next = 3;\n                return this.getCurrentUserObject(forceFetch);\n              case 3:\n                return _context.abrupt(\"return\", _context.sent);\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function currentUser() {\n        return _currentUser.apply(this, arguments);\n      }\n      return currentUser;\n    }()\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n     *\n     * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n  }, {\n    key: \"currentUserV2\",\n    value: function () {\n      var _currentUserV = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var forceFetch,\n          _args2 = arguments;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                forceFetch = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n                _context2.next = 3;\n                return this.getCurrentUserV2Object(forceFetch);\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function currentUserV2() {\n        return _currentUserV.apply(this, arguments);\n      }\n      return currentUserV2;\n    }() /* Shortcuts to endpoints */\n  }, {\n    key: \"search\",\n    value: function search(what, options) {\n      return this.v2.search(what, options);\n    }\n    /* Authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n  }, {\n    key: \"generateAuthLink\",\n    value: function () {\n      var _generateAuthLink = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var oauth_callback,\n          _ref,\n          authAccessType,\n          _ref$linkMode,\n          linkMode,\n          forceLogin,\n          screenName,\n          oauthResult,\n          url,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                oauth_callback = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : 'oob';\n                _ref = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {}, authAccessType = _ref.authAccessType, _ref$linkMode = _ref.linkMode, linkMode = _ref$linkMode === void 0 ? 'authenticate' : _ref$linkMode, forceLogin = _ref.forceLogin, screenName = _ref.screenName;\n                _context3.next = 4;\n                return this.post('https://api.twitter.com/oauth/request_token', {\n                  oauth_callback: oauth_callback,\n                  x_auth_access_type: authAccessType\n                });\n              case 4:\n                oauthResult = _context3.sent;\n                url = \"https://api.twitter.com/oauth/\".concat(linkMode, \"?oauth_token=\").concat(encodeURIComponent(oauthResult.oauth_token));\n                if (forceLogin !== undefined) {\n                  url += \"&force_login=\".concat(encodeURIComponent(forceLogin));\n                }\n                if (screenName !== undefined) {\n                  url += \"&screen_name=\".concat(encodeURIComponent(screenName));\n                }\n                if (this._requestMaker.hasPlugins()) {\n                  this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n                    client: this._requestMaker,\n                    url: url,\n                    oauthResult: oauthResult\n                  });\n                }\n                return _context3.abrupt(\"return\", _objectSpread({\n                  url: url\n                }, oauthResult));\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function generateAuthLink() {\n        return _generateAuthLink.apply(this, arguments);\n      }\n      return generateAuthLink;\n    }()\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(oauth_verifier) {\n        var tokens, oauth_result, client;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                tokens = this.getActiveTokens();\n                if (!(tokens.type !== 'oauth-1.0a')) {\n                  _context4.next = 3;\n                  break;\n                }\n                throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n              case 3:\n                _context4.next = 5;\n                return this.post('https://api.twitter.com/oauth/access_token', {\n                  oauth_token: tokens.accessToken,\n                  oauth_verifier: oauth_verifier\n                });\n              case 5:\n                oauth_result = _context4.sent;\n                client = new _1.default({\n                  appKey: tokens.appKey,\n                  appSecret: tokens.appSecret,\n                  accessToken: oauth_result.oauth_token,\n                  accessSecret: oauth_result.oauth_token_secret\n                }, this._requestMaker.clientSettings);\n                return _context4.abrupt(\"return\", {\n                  accessToken: oauth_result.oauth_token,\n                  accessSecret: oauth_result.oauth_token_secret,\n                  userId: oauth_result.user_id,\n                  screenName: oauth_result.screen_name,\n                  client: client\n                });\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }()\n    /**\n     * Enable application-only authentication.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n  }, {\n    key: \"appLogin\",\n    value: function () {\n      var _appLogin = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tokens, basicClient, res;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                tokens = this.getActiveTokens();\n                if (!(tokens.type !== 'oauth-1.0a')) {\n                  _context5.next = 3;\n                  break;\n                }\n                throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n              case 3:\n                // Create a client with Basic authentication\n                basicClient = new _1.default({\n                  username: tokens.appKey,\n                  password: tokens.appSecret\n                });\n                _context5.next = 6;\n                return basicClient.post('https://api.twitter.com/oauth2/token', {\n                  grant_type: 'client_credentials'\n                });\n              case 6:\n                res = _context5.sent;\n                return _context5.abrupt(\"return\", new _1.default(res.access_token, this._requestMaker.clientSettings));\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function appLogin() {\n        return _appLogin.apply(this, arguments);\n      }\n      return appLogin;\n    }()\n    /* OAuth 2 user authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * - **You can only use v2 API endpoints with this authentication method.**\n     * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n     *\n     * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n  }, {\n    key: \"generateOAuth2AuthLink\",\n    value: function generateOAuth2AuthLink(redirectUri) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _a, _b;\n      if (!this._requestMaker.clientId) {\n        throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n      }\n      var state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n      var codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n      var codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n      var rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n      var scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n      var url = new URL('https://twitter.com/i/oauth2/authorize');\n      var query = {\n        response_type: 'code',\n        client_id: this._requestMaker.clientId,\n        redirect_uri: redirectUri,\n        state: state,\n        code_challenge: codeChallenge,\n        code_challenge_method: 's256',\n        scope: scope\n      };\n      request_param_helper_1.default.addQueryParamsToUrl(url, query);\n      var result = {\n        url: url.toString(),\n        state: state,\n        codeVerifier: codeVerifier,\n        codeChallenge: codeChallenge\n      };\n      if (this._requestMaker.hasPlugins()) {\n        this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n          client: this._requestMaker,\n          result: result,\n          redirectUri: redirectUri\n        });\n      }\n      return result;\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n  }, {\n    key: \"loginWithOAuth2\",\n    value: function () {\n      var _loginWithOAuth = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref2) {\n        var code, codeVerifier, redirectUri, accessTokenResult;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                code = _ref2.code, codeVerifier = _ref2.codeVerifier, redirectUri = _ref2.redirectUri;\n                if (this._requestMaker.clientId) {\n                  _context6.next = 3;\n                  break;\n                }\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n              case 3:\n                _context6.next = 5;\n                return this.post('https://api.twitter.com/2/oauth2/token', {\n                  code: code,\n                  code_verifier: codeVerifier,\n                  redirect_uri: redirectUri,\n                  grant_type: 'authorization_code',\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret\n                });\n              case 5:\n                accessTokenResult = _context6.sent;\n                return _context6.abrupt(\"return\", this.parseOAuth2AccessTokenResult(accessTokenResult));\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function loginWithOAuth2(_x2) {\n        return _loginWithOAuth.apply(this, arguments);\n      }\n      return loginWithOAuth2;\n    }()\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n  }, {\n    key: \"refreshOAuth2Token\",\n    value: function () {\n      var _refreshOAuth2Token = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(refreshToken) {\n        var accessTokenResult;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._requestMaker.clientId) {\n                  _context7.next = 2;\n                  break;\n                }\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n              case 2:\n                _context7.next = 4;\n                return this.post('https://api.twitter.com/2/oauth2/token', {\n                  refresh_token: refreshToken,\n                  grant_type: 'refresh_token',\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret\n                });\n              case 4:\n                accessTokenResult = _context7.sent;\n                return _context7.abrupt(\"return\", this.parseOAuth2AccessTokenResult(accessTokenResult));\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function refreshOAuth2Token(_x3) {\n        return _refreshOAuth2Token.apply(this, arguments);\n      }\n      return refreshOAuth2Token;\n    }()\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n  }, {\n    key: \"revokeOAuth2Token\",\n    value: function () {\n      var _revokeOAuth2Token = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(token) {\n        var tokenType,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                tokenType = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : 'access_token';\n                if (this._requestMaker.clientId) {\n                  _context8.next = 3;\n                  break;\n                }\n                throw new Error('Twitter API instance is not initialized with client ID. ' + 'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n              case 3:\n                _context8.next = 5;\n                return this.post('https://api.twitter.com/2/oauth2/revoke', {\n                  client_id: this._requestMaker.clientId,\n                  client_secret: this._requestMaker.clientSecret,\n                  token: token,\n                  token_type_hint: tokenType\n                });\n              case 5:\n                return _context8.abrupt(\"return\", _context8.sent);\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function revokeOAuth2Token(_x4) {\n        return _revokeOAuth2Token.apply(this, arguments);\n      }\n      return revokeOAuth2Token;\n    }()\n  }, {\n    key: \"parseOAuth2AccessTokenResult\",\n    value: function parseOAuth2AccessTokenResult(result) {\n      var client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n      var scope = result.scope.split(' ').filter(function (e) {\n        return e;\n      });\n      return {\n        client: client,\n        expiresIn: result.expires_in,\n        accessToken: result.access_token,\n        scope: scope,\n        refreshToken: result.refresh_token\n      };\n    }\n  }]);\n  return TwitterApiReadOnly;\n}(client_base_1.default);\nexports.default = TwitterApiReadOnly;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","_1","require","client_base_1","client_v1_read_1","client_v2_read_1","oauth2_helper_1","request_param_helper_1","TwitterApiReadOnly","_v1","default","_v2","forceFetch","getCurrentUserObject","getCurrentUserV2Object","what","options","v2","search","oauth_callback","authAccessType","linkMode","forceLogin","screenName","post","x_auth_access_type","oauthResult","url","encodeURIComponent","oauth_token","undefined","_requestMaker","hasPlugins","applyPluginMethod","client","oauth_verifier","tokens","getActiveTokens","type","Error","accessToken","oauth_result","appKey","appSecret","accessSecret","oauth_token_secret","clientSettings","userId","user_id","screen_name","basicClient","username","password","grant_type","res","access_token","redirectUri","_a","_b","clientId","state","OAuth2Helper","generateRandomString","codeVerifier","getCodeVerifier","codeChallenge","getCodeChallengeFromVerifier","rawScope","scope","Array","isArray","join","URL","query","response_type","client_id","redirect_uri","code_challenge","code_challenge_method","addQueryParamsToUrl","result","toString","code","code_verifier","client_secret","clientSecret","accessTokenResult","parseOAuth2AccessTokenResult","refreshToken","refresh_token","token","tokenType","token_type_hint","split","filter","e","expiresIn","expires_in"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/client/readonly.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = __importDefault(require(\".\"));\nconst client_base_1 = __importDefault(require(\"../client.base\"));\nconst client_v1_read_1 = __importDefault(require(\"../v1/client.v1.read\"));\nconst client_v2_read_1 = __importDefault(require(\"../v2/client.v2.read\"));\nconst oauth2_helper_1 = require(\"../client-mixins/oauth2.helper\");\nconst request_param_helper_1 = __importDefault(require(\"../client-mixins/request-param.helper\"));\n/**\n * Twitter v1.1 and v2 API client.\n */\nclass TwitterApiReadOnly extends client_base_1.default {\n    /* Direct access to subclients */\n    get v1() {\n        if (this._v1)\n            return this._v1;\n        return this._v1 = new client_v1_read_1.default(this);\n    }\n    get v2() {\n        if (this._v2)\n            return this._v2;\n        return this._v2 = new client_v2_read_1.default(this);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a user authentication.\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     */\n    async currentUser(forceFetch = false) {\n        return await this.getCurrentUserObject(forceFetch);\n    }\n    /**\n     * Fetch and cache current user.\n     * This method can only be called with a OAuth 1.0a or OAuth2 user authentication.\n     *\n     * This can only be the slimest available `UserV2` object, with only id, name and username properties defined.\n     * To get a customized `UserV2Result`, use `.v2.me()`\n     *\n     * You can use this method to test if authentication was successful.\n     * Next calls to this methods will use the cached user, unless `forceFetch: true` is given.\n     *\n     * OAuth2 scopes: `tweet.read` & `users.read`\n     */\n    async currentUserV2(forceFetch = false) {\n        return await this.getCurrentUserV2Object(forceFetch);\n    }\n    /* Shortcuts to endpoints */\n    search(what, options) {\n        return this.v2.search(what, options);\n    }\n    /* Authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 1.0 auth.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with consumer keys\n     * const client = new TwitterApi({ appKey: 'consumer_key', appSecret: 'consumer_secret' });\n     *\n     * const tokenRequest = await client.generateAuthLink('oob-or-your-callback-url');\n     * // redirect end-user to tokenRequest.url\n     *\n     * // Save tokenRequest.oauth_token_secret somewhere, it will be needed for next auth step.\n     * ```\n     */\n    async generateAuthLink(oauth_callback = 'oob', { authAccessType, linkMode = 'authenticate', forceLogin, screenName, } = {}) {\n        const oauthResult = await this.post('https://api.twitter.com/oauth/request_token', { oauth_callback, x_auth_access_type: authAccessType });\n        let url = `https://api.twitter.com/oauth/${linkMode}?oauth_token=${encodeURIComponent(oauthResult.oauth_token)}`;\n        if (forceLogin !== undefined) {\n            url += `&force_login=${encodeURIComponent(forceLogin)}`;\n        }\n        if (screenName !== undefined) {\n            url += `&screen_name=${encodeURIComponent(screenName)}`;\n        }\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth1RequestToken', {\n                client: this._requestMaker,\n                url,\n                oauthResult,\n            });\n        }\n        return {\n            url,\n            ...oauthResult,\n        };\n    }\n    /**\n     * Obtain access to user-based OAuth 1.0 auth.\n     *\n     * After user is redirect from your callback, use obtained oauth_token and oauth_verifier to\n     * instanciate the new TwitterApi instance.\n     *\n     * ```ts\n     * // Use the saved oauth_token_secret associated to oauth_token returned by callback\n     * const requestClient = new TwitterApi({\n     *  appKey: 'consumer_key',\n     *  appSecret: 'consumer_secret',\n     *  accessToken: 'oauth_token',\n     *  accessSecret: 'oauth_token_secret'\n     * });\n     *\n     * // Use oauth_verifier obtained from callback request\n     * const { client: userClient } = await requestClient.login('oauth_verifier');\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async login(oauth_verifier) {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept OAuth 1.0 login');\n        const oauth_result = await this.post('https://api.twitter.com/oauth/access_token', { oauth_token: tokens.accessToken, oauth_verifier });\n        const client = new _1.default({\n            appKey: tokens.appKey,\n            appSecret: tokens.appSecret,\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n        }, this._requestMaker.clientSettings);\n        return {\n            accessToken: oauth_result.oauth_token,\n            accessSecret: oauth_result.oauth_token_secret,\n            userId: oauth_result.user_id,\n            screenName: oauth_result.screen_name,\n            client,\n        };\n    }\n    /**\n     * Enable application-only authentication.\n     *\n     * To make the request, instanciate TwitterApi with consumer and secret.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ appKey: 'consumer', appSecret: 'secret' });\n     * const appClient = await requestClient.appLogin();\n     *\n     * // Use {appClient} to make requests\n     * ```\n     */\n    async appLogin() {\n        const tokens = this.getActiveTokens();\n        if (tokens.type !== 'oauth-1.0a')\n            throw new Error('You must setup TwitterApi instance with consumer keys to accept app-only login');\n        // Create a client with Basic authentication\n        const basicClient = new _1.default({ username: tokens.appKey, password: tokens.appSecret });\n        const res = await basicClient.post('https://api.twitter.com/oauth2/token', { grant_type: 'client_credentials' });\n        // New object with Bearer token\n        return new _1.default(res.access_token, this._requestMaker.clientSettings);\n    }\n    /* OAuth 2 user authentication */\n    /**\n     * Generate the OAuth request token link for user-based OAuth 2.0 auth.\n     *\n     * - **You can only use v2 API endpoints with this authentication method.**\n     * - **You need to specify which scope you want to have when you create your auth link. Make sure it matches your needs.**\n     *\n     * See https://developer.twitter.com/en/docs/authentication/oauth-2-0/user-access-token for details.\n     *\n     * ```ts\n     * // Instanciate TwitterApi with client ID\n     * const client = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * // Generate a link to callback URL that will gives a token with tweet+user read access\n     * const link = client.generateOAuth2AuthLink('your-callback-url', { scope: ['tweet.read', 'users.read'] });\n     *\n     * // Extract props from generate link\n     * const { url, state, codeVerifier } = link;\n     *\n     * // redirect end-user to url\n     * // Save `state` and `codeVerifier` somewhere, it will be needed for next auth step.\n     * ```\n     */\n    generateOAuth2AuthLink(redirectUri, options = {}) {\n        var _a, _b;\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. You can find your client ID in Twitter Developer Portal. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const state = (_a = options.state) !== null && _a !== void 0 ? _a : oauth2_helper_1.OAuth2Helper.generateRandomString(32);\n        const codeVerifier = oauth2_helper_1.OAuth2Helper.getCodeVerifier();\n        const codeChallenge = oauth2_helper_1.OAuth2Helper.getCodeChallengeFromVerifier(codeVerifier);\n        const rawScope = (_b = options.scope) !== null && _b !== void 0 ? _b : '';\n        const scope = Array.isArray(rawScope) ? rawScope.join(' ') : rawScope;\n        const url = new URL('https://twitter.com/i/oauth2/authorize');\n        const query = {\n            response_type: 'code',\n            client_id: this._requestMaker.clientId,\n            redirect_uri: redirectUri,\n            state,\n            code_challenge: codeChallenge,\n            code_challenge_method: 's256',\n            scope,\n        };\n        request_param_helper_1.default.addQueryParamsToUrl(url, query);\n        const result = {\n            url: url.toString(),\n            state,\n            codeVerifier,\n            codeChallenge,\n        };\n        if (this._requestMaker.hasPlugins()) {\n            this._requestMaker.applyPluginMethod('onOAuth2RequestToken', {\n                client: this._requestMaker,\n                result,\n                redirectUri,\n            });\n        }\n        return result;\n    }\n    /**\n     * Obtain access to user-based OAuth 2.0 auth.\n     *\n     * After user is redirect from your callback, use obtained code to\n     * instanciate the new TwitterApi instance.\n     *\n     * You need to obtain `codeVerifier` from a call to `.generateOAuth2AuthLink`.\n     *\n     * ```ts\n     * // Use the saved codeVerifier associated to state (present in query string of callback)\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient, refreshToken } = await requestClient.loginWithOAuth2({\n     *  code: 'codeFromQueryString',\n     *  // the same URL given to generateOAuth2AuthLink\n     *  redirectUri,\n     *  // the verifier returned by generateOAuth2AuthLink\n     *  codeVerifier,\n     * });\n     *\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * // {refreshToken} is defined if 'offline.access' is in scope.\n     * ```\n     */\n    async loginWithOAuth2({ code, codeVerifier, redirectUri }) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            code,\n            code_verifier: codeVerifier,\n            redirect_uri: redirectUri,\n            grant_type: 'authorization_code',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Obtain a new access token to user-based OAuth 2.0 auth from a refresh token.\n     *\n     * ```ts\n     * const requestClient = new TwitterApi({ clientId: 'yourClientId' });\n     *\n     * const { client: userClient } = await requestClient.refreshOAuth2Token('refreshToken');\n     * // {userClient} is a valid {TwitterApi} object you can use for future requests\n     * ```\n     */\n    async refreshOAuth2Token(refreshToken) {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        const accessTokenResult = await this.post('https://api.twitter.com/2/oauth2/token', {\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n        });\n        return this.parseOAuth2AccessTokenResult(accessTokenResult);\n    }\n    /**\n     * Revoke a single user-based OAuth 2.0 token.\n     *\n     * You must specify its source, access token (directly after login)\n     * or refresh token (if you've called `.refreshOAuth2Token` before).\n     */\n    async revokeOAuth2Token(token, tokenType = 'access_token') {\n        if (!this._requestMaker.clientId) {\n            throw new Error('Twitter API instance is not initialized with client ID. ' +\n                'Please build an instance with: new TwitterApi({ clientId: \\'<yourClientId>\\' })');\n        }\n        return await this.post('https://api.twitter.com/2/oauth2/revoke', {\n            client_id: this._requestMaker.clientId,\n            client_secret: this._requestMaker.clientSecret,\n            token,\n            token_type_hint: tokenType,\n        });\n    }\n    parseOAuth2AccessTokenResult(result) {\n        const client = new _1.default(result.access_token, this._requestMaker.clientSettings);\n        const scope = result.scope.split(' ').filter(e => e);\n        return {\n            client,\n            expiresIn: result.expires_in,\n            accessToken: result.access_token,\n            scope,\n            refreshToken: result.refresh_token,\n        };\n    }\n}\nexports.default = TwitterApiReadOnly;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}