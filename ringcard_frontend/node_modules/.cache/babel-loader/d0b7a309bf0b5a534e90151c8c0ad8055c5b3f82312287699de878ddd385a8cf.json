{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\yuleg\\\\Dev\\\\Ringca\\\\ORIN33\\\\ringcard\\\\ringcard_frontend\\\\src\\\\pages\\\\auth\\\\Oauth2.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Oauth2 = () => {\n  _s();\n  const CONSUMER_KEY = process.env.REACT_APP_CONSUMER_KEY;\n  const CONSUMER_SECRET = process.env.REACT_APP_CONSUMER_SECRET;\n  const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\n  const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET;\n  const ACCESS_TOKEN = process.env.REACT_APP_ACCESS_TOKEN;\n  const ACCESS_TOKEN_SECRET = process.env.REACT_APP_ACCESS_TOKEN_SECRET;\n  const CALLBACK_URL = process.env.REACT_APP_CALLBACK_URL;\n  const BEARER_TOKEN = process.env.REACT_APP_BEARER_TOKEN;\n  const TWITTER_STATE = \"twitter-increaser-state\";\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\n  useEffect(() => {\n    const getURLWithQueryParams = (baseUrl, params) => {\n      const query = Object.entries(params).map(_ref => {\n        let [key, value] = _ref;\n        return `${key}=${encodeURIComponent(value)}`;\n      }).join(\"&\");\n      return `${baseUrl}?${query}`;\n    };\n    const getTwitterOAuthUrl = redirectUri => getURLWithQueryParams(TWITTER_AUTH_URL, {\n      response_type: \"code\",\n      client_id: CLIENT_ID,\n      redirect_uri: redirectUri,\n      scope: TWITTER_SCOPE,\n      state: TWITTER_STATE,\n      code_challenge: TWITTER_CODE_CHALLENGE,\n      code_challenge_method: \"plain\"\n    });\n    getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\n  }, []);\n  console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\n\n  // const authHandler = (err:any, data:any) => {\n  //   console.log(err, data);\n  // };\n\n  // const [user, setUser] = useState<any>([]);\n\n  // useEffect(() => {\n  // \taxios\n  // \t\t.get(\"/oauth2\")\n  // \t\t.then((res) => {\n  // \t\t\tsetUser(res.data);\n  // \t\t\tconsole.log(res.data);\n  // \t\t})\n  // \t\t.catch((err) => {\n  // \t\t\tconsole.log(err.config);\n  // \t\t\tconsole.log(err.response.data);\n  // \t\t});\n  // }, []);\n\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\n\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\n\n  // Consuming a Stream\n  // if(BEARER_TOKEN){\n  //   const client = new Client(BEARER_TOKEN);\n\n  //   async function OauthTwitter() {\n  //     const stream = client.tweets.sampleStream({\n  //       \"tweet.fields\": [\"author_id\"],\n  //     });\n  //     for await (const tweet of stream) {\n  //       console.log(tweet.data?.author_id);\n  //     }\n\n  //     return(null);\n  //   }\n  //   return(<div><OauthTwitter/></div>)\n  // }\n\n  // Getting a Tweet\n  // if(BEARER_TOKEN){\n  //   const client = new Client(BEARER_TOKEN);\n\n  //   async function GettingATweet() {\n  //     const tweet = await client.tweets.findTweetById(\"20\");\n  //     // console.log(tweet.data.text);\n  //     console.log(tweet);\n  //   }\n\n  //     return(null);\n  // }\n\n  // oauth2-bearer.ts \n  // if(BEARER_TOKEN){\n  //   async function Oauth2Bearer() {\n  //     const client = new Client(BEARER_TOKEN);\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n  //     if (!data) throw new Error(\"Couldn't find user\");\n  //     let count = 0;\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\n  //       console.log(followers);\n  //       if (++count === 3) {\n  //         break;\n  //       }\n  //     }\n  //     return (<div></div>);\n  //   }\n  // }\n\n  // if(BEARER_TOKEN){\n  //     const client = new Client(BEARER_TOKEN);\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\n  //     if (!data) throw new Error(\"Couldn't find user\");\n  //     let count = 0;\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\n  //       console.log(followers);\n  //       if (++count === 3) {\n  //         break;\n  //       }\n  //     }\n  //     return (<div></div>);\n  // }\n\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\n  // function TestOauth(){\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\n  //     authCallback={authHandler}\n  //     consumerKey={CONSUMER_KEY}\n  //     consumerSecret={CONSUMER_SECRET}\n  //   />)}\n  //   else{\n  //     return(<div></div>)\n  //   }\n  // }\n  // return (<p>1<GettingATweet/></p>)\n\n  const authHandler = (err, data) => {\n    console.log(err, data);\n  };\n  return (\n    /*#__PURE__*/\n    // <TestOauth/>\n    // <TwitterLogin\n    //       authCallback={authHandler}\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\n    //       buttonTheme={\"dark\"}\n    //     \t/>\n    _jsxDEV(\"div\", {\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(Oauth2, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Oauth2;\nexport default Oauth2;\nvar _c;\n$RefreshReg$(_c, \"Oauth2\");","map":{"version":3,"names":["React","useEffect","Oauth2","CONSUMER_KEY","process","env","REACT_APP_CONSUMER_KEY","CONSUMER_SECRET","REACT_APP_CONSUMER_SECRET","CLIENT_ID","REACT_APP_CLIENT_ID","CLIENT_SECRET","REACT_APP_CLIENT_SECRET","ACCESS_TOKEN","REACT_APP_ACCESS_TOKEN","ACCESS_TOKEN_SECRET","REACT_APP_ACCESS_TOKEN_SECRET","CALLBACK_URL","REACT_APP_CALLBACK_URL","BEARER_TOKEN","REACT_APP_BEARER_TOKEN","TWITTER_STATE","TWITTER_CODE_CHALLENGE","TWITTER_AUTH_URL","TWITTER_SCOPE","join","getURLWithQueryParams","baseUrl","params","query","Object","entries","map","key","value","encodeURIComponent","getTwitterOAuthUrl","redirectUri","response_type","client_id","redirect_uri","scope","state","code_challenge","code_challenge_method","console","log","authHandler","err","data"],"sources":["C:/Users/yuleg/Dev/Ringca/ORIN33/ringcard/ringcard_frontend/src/pages/auth/Oauth2.tsx"],"sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport TwitterLogin from \"react-twitter-login\";\r\nimport { Client } from \"twitter-api-sdk\";\r\nimport { TwitterApi } from 'twitter-api-v2';\r\nimport { createHmac } from \"crypto\";\r\nconst Oauth2=()=>{\r\n\r\n\r\n  const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  const CLIENT_ID=process.env.REACT_APP_CLIENT_ID;\r\n\tconst CLIENT_SECRET=process.env.REACT_APP_CLIENT_SECRET;\r\n\tconst ACCESS_TOKEN=process.env.REACT_APP_ACCESS_TOKEN;\r\n\tconst ACCESS_TOKEN_SECRET=process.env.REACT_APP_ACCESS_TOKEN_SECRET;\r\n\tconst CALLBACK_URL=process.env.REACT_APP_CALLBACK_URL;\r\n\tconst BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  const TWITTER_STATE = \"twitter-increaser-state\";\r\n  const TWITTER_CODE_CHALLENGE = \"challenge\";\r\n  const TWITTER_AUTH_URL = \"https://twitter.com/i/oauth2/authorize\";\r\n  const TWITTER_SCOPE = [\"tweet.read\", \"users.read\", \"offline.access\"].join(\" \");\r\n\r\n  \r\n  useEffect(() => {\r\n    const getURLWithQueryParams = (\r\n    baseUrl: string,\r\n    params: Record<string, any>\r\n  ) => {\r\n    const query = Object.entries(params)\r\n      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)\r\n      .join(\"&\")\r\n\r\n    return `${baseUrl}?${query}`\r\n  }\r\n  const getTwitterOAuthUrl = (redirectUri: string) =>\r\n  getURLWithQueryParams(TWITTER_AUTH_URL, {\r\n    response_type: \"code\",\r\n    client_id: CLIENT_ID,\r\n    redirect_uri: redirectUri,\r\n    scope: TWITTER_SCOPE,\r\n    state: TWITTER_STATE,\r\n    code_challenge: TWITTER_CODE_CHALLENGE,\r\n    code_challenge_method: \"plain\",\r\n  })\r\n\t\tgetTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\");\r\n\t}, []);\r\n  \r\n  console.log(getTwitterOAuthUrl(\"https://localhost:8000/login/oauth2/code/twitter\"));\r\n  \r\n  \r\n  // const authHandler = (err:any, data:any) => {\r\n  //   console.log(err, data);\r\n  // };\r\n\r\n  // const [user, setUser] = useState<any>([]);\r\n  \r\n  // useEffect(() => {\r\n\t// \taxios\r\n\t// \t\t.get(\"/oauth2\")\r\n\t// \t\t.then((res) => {\r\n\t// \t\t\tsetUser(res.data);\r\n\t// \t\t\tconsole.log(res.data);\r\n\t// \t\t})\r\n\t// \t\t.catch((err) => {\r\n\t// \t\t\tconsole.log(err.config);\r\n\t// \t\t\tconsole.log(err.response.data);\r\n\t// \t\t});\r\n\t// }, []);\r\n\r\n\r\n  // const client = new TwitterApi({ appKey: \"S0FVySANFNnlISMw5D1vSE8P0\", appSecret: \"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\" });\r\n\r\n  // const BEARER_TOKEN=process.env.REACT_APP_BEARER_TOKEN;\r\n\r\n  // Consuming a Stream\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function OauthTwitter() {\r\n  //     const stream = client.tweets.sampleStream({\r\n  //       \"tweet.fields\": [\"author_id\"],\r\n  //     });\r\n  //     for await (const tweet of stream) {\r\n  //       console.log(tweet.data?.author_id);\r\n  //     }\r\n      \r\n  //     return(null);\r\n  //   }\r\n  //   return(<div><OauthTwitter/></div>)\r\n  // }\r\n\r\n\r\n  // Getting a Tweet\r\n  // if(BEARER_TOKEN){\r\n  //   const client = new Client(BEARER_TOKEN);\r\n\r\n  //   async function GettingATweet() {\r\n  //     const tweet = await client.tweets.findTweetById(\"20\");\r\n  //     // console.log(tweet.data.text);\r\n  //     console.log(tweet);\r\n  //   }\r\n      \r\n  //     return(null);\r\n  // }\r\n\r\n\r\n  // oauth2-bearer.ts \r\n  // if(BEARER_TOKEN){\r\n  //   async function Oauth2Bearer() {\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  //   }\r\n  // }\r\n\r\n  // if(BEARER_TOKEN){\r\n  //     const client = new Client(BEARER_TOKEN);\r\n  //     const { data } = await client.users.findUserByUsername(\"TwitterDev\");\r\n  //     if (!data) throw new Error(\"Couldn't find user\");\r\n  //     let count = 0;\r\n  //     for await (const followers of client.users.usersIdFollowers(data.id)) {\r\n  //       console.log(followers);\r\n  //       if (++count === 3) {\r\n  //         break;\r\n  //       }\r\n  //     }\r\n  //     return (<div></div>);\r\n  // }\r\n\r\n  // const CONSUMER_KEY=process.env.REACT_APP_CONSUMER_KEY;\r\n  // const CONSUMER_SECRET=process.env.REACT_APP_CONSUMER_SECRET;\r\n  // function TestOauth(){\r\n  //   if(CONSUMER_KEY&&CONSUMER_SECRET){return(<TwitterLogin\r\n  //     authCallback={authHandler}\r\n  //     consumerKey={CONSUMER_KEY}\r\n  //     consumerSecret={CONSUMER_SECRET}\r\n  //   />)}\r\n  //   else{\r\n  //     return(<div></div>)\r\n  //   }\r\n  // }\r\n  // return (<p>1<GettingATweet/></p>)\r\n\r\n  const authHandler = (err:any, data:any) => {\r\n    console.log(err, data);\r\n  };\r\n\r\n  return (\r\n    // <TestOauth/>\r\n    // <TwitterLogin\r\n    //       authCallback={authHandler}\r\n    //       consumerKey={\"S0FVySANFNnlISMw5D1vSE8P0\"}\r\n    //       consumerSecret={\"KCu23eNrVftMqQeefWJTIei5Klju341e78BypImTVfw338Mm0X\"}\r\n    //       callbackUrl={\"https://alexandrtovmach.github.io/react-twitter-login/\"}\r\n    //       buttonTheme={\"dark\"}\r\n    //     \t/>\r\n    <div>hello</div>\r\n  );\r\n}\r\n\r\nexport default Oauth2;"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAkB,OAAO;AAAC;AAKnD,MAAMC,MAAM,GAAC,MAAI;EAAA;EAGf,MAAMC,YAAY,GAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACrD,MAAMC,eAAe,GAACH,OAAO,CAACC,GAAG,CAACG,yBAAyB;EAC3D,MAAMC,SAAS,GAACL,OAAO,CAACC,GAAG,CAACK,mBAAmB;EAChD,MAAMC,aAAa,GAACP,OAAO,CAACC,GAAG,CAACO,uBAAuB;EACvD,MAAMC,YAAY,GAACT,OAAO,CAACC,GAAG,CAACS,sBAAsB;EACrD,MAAMC,mBAAmB,GAACX,OAAO,CAACC,GAAG,CAACW,6BAA6B;EACnE,MAAMC,YAAY,GAACb,OAAO,CAACC,GAAG,CAACa,sBAAsB;EACrD,MAAMC,YAAY,GAACf,OAAO,CAACC,GAAG,CAACe,sBAAsB;EAEpD,MAAMC,aAAa,GAAG,yBAAyB;EAC/C,MAAMC,sBAAsB,GAAG,WAAW;EAC1C,MAAMC,gBAAgB,GAAG,wCAAwC;EACjE,MAAMC,aAAa,GAAG,CAAC,YAAY,EAAE,YAAY,EAAE,gBAAgB,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAG9ExB,SAAS,CAAC,MAAM;IACd,MAAMyB,qBAAqB,GAAG,CAC9BC,OAAe,EACfC,MAA2B,KACxB;MACH,MAAMC,KAAK,GAAGC,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CACjCI,GAAG,CAAC;QAAA,IAAC,CAACC,GAAG,EAAEC,KAAK,CAAC;QAAA,OAAM,GAAED,GAAI,IAAGE,kBAAkB,CAACD,KAAK,CAAE,EAAC;MAAA,EAAC,CAC5DT,IAAI,CAAC,GAAG,CAAC;MAEZ,OAAQ,GAAEE,OAAQ,IAAGE,KAAM,EAAC;IAC9B,CAAC;IACD,MAAMO,kBAAkB,GAAIC,WAAmB,IAC/CX,qBAAqB,CAACH,gBAAgB,EAAE;MACtCe,aAAa,EAAE,MAAM;MACrBC,SAAS,EAAE9B,SAAS;MACpB+B,YAAY,EAAEH,WAAW;MACzBI,KAAK,EAAEjB,aAAa;MACpBkB,KAAK,EAAErB,aAAa;MACpBsB,cAAc,EAAErB,sBAAsB;MACtCsB,qBAAqB,EAAE;IACzB,CAAC,CAAC;IACFR,kBAAkB,CAAC,kDAAkD,CAAC;EACvE,CAAC,EAAE,EAAE,CAAC;EAELS,OAAO,CAACC,GAAG,CAACV,kBAAkB,CAAC,kDAAkD,CAAC,CAAC;;EAGnF;EACA;EACA;;EAEA;;EAEA;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGC;;EAEA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMW,WAAW,GAAG,CAACC,GAAO,EAAEC,IAAQ,KAAK;IACzCJ,OAAO,CAACC,GAAG,CAACE,GAAG,EAAEC,IAAI,CAAC;EACxB,CAAC;EAED;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAgB;AAEpB,CAAC;AAAA,GAjKK/C,MAAM;AAAA,KAANA,MAAM;AAmKZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}