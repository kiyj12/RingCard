{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RequestParamHelpers = void 0;\nconst form_data_helper_1 = require(\"./form-data.helper\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n/* Helpers functions that are specific to this class but do not depends on instance */\nclass RequestParamHelpers {\n  static formatQueryToString(query) {\n    const formattedQuery = {};\n    for (const prop in query) {\n      if (typeof query[prop] === 'string') {\n        formattedQuery[prop] = query[prop];\n      } else if (typeof query[prop] !== 'undefined') {\n        formattedQuery[prop] = String(query[prop]);\n      }\n    }\n    return formattedQuery;\n  }\n  static autoDetectBodyType(url) {\n    if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n      // oauth2 takes url encoded\n      if (url.password.startsWith('/2/oauth2')) {\n        return 'url';\n      }\n      // Twitter API v2 has JSON-encoded requests for everything else\n      return 'json';\n    }\n    if (url.hostname === 'upload.twitter.com') {\n      if (url.pathname === '/1.1/media/upload.json') {\n        return 'form-data';\n      }\n      // json except for media/upload command, that is form-data.\n      return 'json';\n    }\n    const endpoint = url.pathname.split('/1.1/', 2)[1];\n    if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n      return 'json';\n    }\n    return 'url';\n  }\n  static addQueryParamsToUrl(url, query) {\n    const queryEntries = Object.entries(query);\n    if (queryEntries.length) {\n      let search = '';\n      for (const [key, value] of queryEntries) {\n        search += (search.length ? '&' : '?') + `${oauth1_helper_1.default.percentEncode(key)}=${oauth1_helper_1.default.percentEncode(value)}`;\n      }\n      url.search = search;\n    }\n  }\n  static constructBodyParams(body, headers, mode) {\n    if (body instanceof Buffer) {\n      return body;\n    }\n    if (mode === 'json') {\n      headers['content-type'] = 'application/json;charset=UTF-8';\n      return JSON.stringify(body);\n    } else if (mode === 'url') {\n      headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n      if (Object.keys(body).length) {\n        return new URLSearchParams(body).toString().replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n      }\n\n      return '';\n    } else if (mode === 'raw') {\n      throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n    } else {\n      const form = new form_data_helper_1.FormDataHelper();\n      for (const parameter in body) {\n        form.append(parameter, body[parameter]);\n      }\n      const formHeaders = form.getHeaders();\n      headers['content-type'] = formHeaders['content-type'];\n      return form.getBuffer();\n    }\n  }\n  static setBodyLengthHeader(options, body) {\n    var _a;\n    options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n    if (typeof body === 'string') {\n      options.headers['content-length'] = Buffer.byteLength(body);\n    } else {\n      options.headers['content-length'] = body.length;\n    }\n  }\n  static isOAuthSerializable(item) {\n    return !(item instanceof Buffer);\n  }\n  static mergeQueryAndBodyForOAuth(query, body) {\n    const parameters = {};\n    for (const prop in query) {\n      parameters[prop] = query[prop];\n    }\n    if (this.isOAuthSerializable(body)) {\n      for (const prop in body) {\n        const bodyProp = body[prop];\n        if (this.isOAuthSerializable(bodyProp)) {\n          parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp ? bodyProp.toString() : bodyProp;\n        }\n      }\n    }\n    return parameters;\n  }\n  static moveUrlQueryParamsIntoObject(url, query) {\n    for (const [param, value] of url.searchParams) {\n      query[param] = value;\n    }\n    // Remove the query string\n    url.search = '';\n    return url;\n  }\n  /**\n   * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n   * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n   */\n  static applyRequestParametersToUrl(url, parameters) {\n    url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n      if (parameters[paramName] !== undefined) {\n        return String(parameters[paramName]);\n      }\n      return fullMatch;\n    });\n    return url;\n  }\n}\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set(['direct_messages/events/new.json', 'direct_messages/welcome_messages/new.json', 'direct_messages/welcome_messages/rules/new.json', 'media/metadata/create.json', 'collections/entries/curate.json']);\nexports.default = RequestParamHelpers;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","RequestParamHelpers","form_data_helper_1","require","oauth1_helper_1","formatQueryToString","query","formattedQuery","prop","String","autoDetectBodyType","url","pathname","startsWith","password","hostname","endpoint","split","JSON_1_1_ENDPOINTS","has","addQueryParamsToUrl","queryEntries","entries","length","search","key","default","percentEncode","constructBodyParams","body","headers","mode","Buffer","JSON","stringify","keys","URLSearchParams","toString","replace","Error","form","FormDataHelper","parameter","append","formHeaders","getHeaders","getBuffer","setBodyLengthHeader","options","_a","byteLength","isOAuthSerializable","item","mergeQueryAndBodyForOAuth","parameters","bodyProp","moveUrlQueryParamsIntoObject","param","searchParams","applyRequestParametersToUrl","fullMatch","paramName","undefined","Set"],"sources":["/Users/kiyujin/Dev/ringcard/ringcard_frontend/node_modules/twitter-api-v2/dist/client-mixins/request-param.helper.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestParamHelpers = void 0;\nconst form_data_helper_1 = require(\"./form-data.helper\");\nconst oauth1_helper_1 = __importDefault(require(\"./oauth1.helper\"));\n/* Helpers functions that are specific to this class but do not depends on instance */\nclass RequestParamHelpers {\n    static formatQueryToString(query) {\n        const formattedQuery = {};\n        for (const prop in query) {\n            if (typeof query[prop] === 'string') {\n                formattedQuery[prop] = query[prop];\n            }\n            else if (typeof query[prop] !== 'undefined') {\n                formattedQuery[prop] = String(query[prop]);\n            }\n        }\n        return formattedQuery;\n    }\n    static autoDetectBodyType(url) {\n        if (url.pathname.startsWith('/2/') || url.pathname.startsWith('/labs/2/')) {\n            // oauth2 takes url encoded\n            if (url.password.startsWith('/2/oauth2')) {\n                return 'url';\n            }\n            // Twitter API v2 has JSON-encoded requests for everything else\n            return 'json';\n        }\n        if (url.hostname === 'upload.twitter.com') {\n            if (url.pathname === '/1.1/media/upload.json') {\n                return 'form-data';\n            }\n            // json except for media/upload command, that is form-data.\n            return 'json';\n        }\n        const endpoint = url.pathname.split('/1.1/', 2)[1];\n        if (this.JSON_1_1_ENDPOINTS.has(endpoint)) {\n            return 'json';\n        }\n        return 'url';\n    }\n    static addQueryParamsToUrl(url, query) {\n        const queryEntries = Object.entries(query);\n        if (queryEntries.length) {\n            let search = '';\n            for (const [key, value] of queryEntries) {\n                search += (search.length ? '&' : '?') + `${oauth1_helper_1.default.percentEncode(key)}=${oauth1_helper_1.default.percentEncode(value)}`;\n            }\n            url.search = search;\n        }\n    }\n    static constructBodyParams(body, headers, mode) {\n        if (body instanceof Buffer) {\n            return body;\n        }\n        if (mode === 'json') {\n            headers['content-type'] = 'application/json;charset=UTF-8';\n            return JSON.stringify(body);\n        }\n        else if (mode === 'url') {\n            headers['content-type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\n            if (Object.keys(body).length) {\n                return new URLSearchParams(body)\n                    .toString()\n                    .replace(/\\*/g, '%2A'); // URLSearchParams doesnt encode '*', but Twitter wants it encoded.\n            }\n            return '';\n        }\n        else if (mode === 'raw') {\n            throw new Error('You can only use raw body mode with Buffers. To give a string, use Buffer.from(str).');\n        }\n        else {\n            const form = new form_data_helper_1.FormDataHelper();\n            for (const parameter in body) {\n                form.append(parameter, body[parameter]);\n            }\n            const formHeaders = form.getHeaders();\n            headers['content-type'] = formHeaders['content-type'];\n            return form.getBuffer();\n        }\n    }\n    static setBodyLengthHeader(options, body) {\n        var _a;\n        options.headers = (_a = options.headers) !== null && _a !== void 0 ? _a : {};\n        if (typeof body === 'string') {\n            options.headers['content-length'] = Buffer.byteLength(body);\n        }\n        else {\n            options.headers['content-length'] = body.length;\n        }\n    }\n    static isOAuthSerializable(item) {\n        return !(item instanceof Buffer);\n    }\n    static mergeQueryAndBodyForOAuth(query, body) {\n        const parameters = {};\n        for (const prop in query) {\n            parameters[prop] = query[prop];\n        }\n        if (this.isOAuthSerializable(body)) {\n            for (const prop in body) {\n                const bodyProp = body[prop];\n                if (this.isOAuthSerializable(bodyProp)) {\n                    parameters[prop] = typeof bodyProp === 'object' && bodyProp !== null && 'toString' in bodyProp\n                        ? bodyProp.toString()\n                        : bodyProp;\n                }\n            }\n        }\n        return parameters;\n    }\n    static moveUrlQueryParamsIntoObject(url, query) {\n        for (const [param, value] of url.searchParams) {\n            query[param] = value;\n        }\n        // Remove the query string\n        url.search = '';\n        return url;\n    }\n    /**\n     * Replace URL parameters available in pathname, like `:id`, with data given in `parameters`:\n     * `https://twitter.com/:id.json` + `{ id: '20' }` => `https://twitter.com/20.json`\n     */\n    static applyRequestParametersToUrl(url, parameters) {\n        url.pathname = url.pathname.replace(/:([A-Z_-]+)/ig, (fullMatch, paramName) => {\n            if (parameters[paramName] !== undefined) {\n                return String(parameters[paramName]);\n            }\n            return fullMatch;\n        });\n        return url;\n    }\n}\nexports.RequestParamHelpers = RequestParamHelpers;\nRequestParamHelpers.JSON_1_1_ENDPOINTS = new Set([\n    'direct_messages/events/new.json',\n    'direct_messages/welcome_messages/new.json',\n    'direct_messages/welcome_messages/rules/new.json',\n    'media/metadata/create.json',\n    'collections/entries/curate.json',\n]);\nexports.default = RequestParamHelpers;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}